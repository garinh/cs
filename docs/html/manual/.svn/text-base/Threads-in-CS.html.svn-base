<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html401/loose.dtd">
<html>
<!-- Created by texi2html 1.76 -->
<!--
Written by: Lionel Cons <Lionel.Cons@cern.ch> (original author)
            Karl Berry  <karl@freefriends.org>
            Olaf Bachmann <obachman@mathematik.uni-kl.de>
            and many others.
Maintained by: Many creative people <dev@texi2html.cvshome.org>
Send bugs and suggestions to <users@texi2html.cvshome.org>

-->
<head>
<title>Crystal Space 1.9.0: 6.2 Threads in Crystal Space</title>

<meta name="description" content="Crystal Space 1.9.0: 6.2 Threads in Crystal Space">
<meta name="keywords" content="Crystal Space 1.9.0: 6.2 Threads in Crystal Space">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="texi2html 1.76">
<meta http-equiv="Content-Type" content="text/html; charset=us-ascii">
<style type="text/css">
<!--
a.summary-letter {text-decoration: none}
pre.display {font-family: serif}
pre.format {font-family: serif}
pre.menu-comment {font-family: serif}
pre.menu-preformatted {font-family: serif}
pre.smalldisplay {font-family: serif; font-size: smaller}
pre.smallexample {font-size: smaller}
pre.smallformat {font-family: serif; font-size: smaller}
pre.smalllisp {font-size: smaller}
span.sansserif {font-family:sans-serif; font-weight:normal;}
ul.toc {list-style: none}
-->
</style>


</head>

<body lang="en" bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080" alink="#FF0000">

<a name="Threads-in-CS"></a>
<a name="0"></a>
<table cellpadding="1" cellspacing="1" border="0">
<tr><td valign="middle" align="left">[<a href="MacOS_002fX-Dynamic-Linking.html#0" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="Engine-Internal-Workings.html#0" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="Internals.html#0" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="Internals.html#0" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="Contributing.html#0" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="index.html#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="cs_toc.html#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="cs_Index.html#0" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="cs_abt.html#SEC_About" title="About (help)"> ? </a>]</td>
</tr></table>
<hr size="1">
<h2 class="section"> 6.2 Threads in Crystal Space </h2>


<p><em>Written by Jorrit Tyberghein and Michael Gist.</em>
</p>
<p>The Crystal Space project as such is not thread-safe. So when using
threads in combination with Crystal Space you have to be careful. However,
several parts of Crystal Space are thread-safe to some degree. This is
documented in this section. However, by default you must assume that some
Crystal Space plugin or module is not thread-safe unless it is mentioned here.
</p>
<a name="1"></a>
<h3 class="subheading"> Threadsafe parts of Crystal Space </h3>

<ul>
<li>
<small>SCF</small> (see section <a href="SCF.html#0">Shared Class Facility (<small>SCF</small>)</a>) class loading/unloading is safe. This means that
<code>SCF_CREATE_INSTANCE()</code> and all the routines in <samp>&lsquo;iSCF&rsquo;</samp> that have
to do with loaded classes are safe.

</li><li>
The plugin manager is safe, thus functions such as <code>csLoadPlugin</code>,
<code>csLoadPluginAlways</code>, and <code>csQueryPluginClass</code> are safe.

</li><li>
The object registry is safe, thus macros like <code>csQueryRegistry</code>
are safe. The <code>iObjectRegistryIterator</code> takes a copy of the data
over which it iterates so it will not even lock.

</li><li>
<small>VFS</small> (see section <a href="VFS.html#0">Virtual File System (<small>VFS</small>)</a>) is thread-safe for most operations.  But do not work on
the same <samp>&lsquo;iFile&rsquo;</samp> from different threads!  That is not thread-safe.  Also
the concept of the current directory is not really valid with threads.

</li><li>
The TinyXML, XMLRead, and BinaryXML parsers are thread safe in the sense
that it is okay to create and work on separate documents in separate threads.
However it is <em>not</em> okay to work on the same document in different
threads.

</li><li>
The syntax services plugin is safe for the basic parsing tools (vectors,
matrices, reporting errors, etc.).

</li><li>
The <samp>&lsquo;simpcon&rsquo;</samp> and <samp>&lsquo;csconout&rsquo;</samp> output consoles are thread-safe provided
auto-updating is disabled which you can set like this:

<table><tr><td>&nbsp;</td><td><pre class="example">csRef&lt;iConsoleOutput&gt; con = ...;
con-&gt;AutoUpdate(false);
</pre></td></tr></table>

<p>Note that by default auto-updating is enabled!
</p>
</li><li>
The reporter plugin is fully thread-safe.

</li><li>
The standard reporter listener plugin is thread-safe for basic operations
but not for initialization. That should be done from the main thread.
Also note that thread-safety of the standard reporter listener depends
on thread-safety of the output console that is being used.

</li><li>
The following mesh object and factory loaders are thread-safe provided that the
implementation of <samp>&lsquo;iLoaderContext&rsquo;</samp> is thread-safe.  Please note that the
default <samp>&lsquo;iLoaderContext&rsquo;</samp> is <em>not</em> thread-safe which makes all loader
plugins unsafe by default.

<ul>
<li>
<em>Genmesh loader</em>: Aside from a small design mistake with streams in
case the new renderer is used, the genmesh loader plugin is perfectly
thread-safe.
</li></ul>

</li></ul>

<a name="2"></a>
<h3 class="subheading"> Thread Manager </h3>

<p>Crystal Space provides a thread manager and macros to make multi-threading as
easy as possible for the user. The thread manager is a powerful and generic system
which supports safe scaling of threads and importantly allows non-main threads to safely
dispatch method calls to be executed by other non-main threads.
In essence, if you write a plugin which correctly uses this system it will increase in
parallelism as time goes by (cpus increasingly being released with larger numbers of cores)
without you having to change anything to compensate (up to some point which depends on your plugin).
</p>
<a name="3"></a>
<h4 class="subsubheading"> Interfaces </h4>

<p>To declare that you want a method in your interface to be run in a thread other
than the main thread, you need to make use of the <samp>&lsquo;THREADED_INTERFACE&rsquo;</samp>
macro. This is rather straightforward as shown;
</p>
<table><tr><td>&nbsp;</td><td><pre class="example">#include &quot;iutil/threadmanager.h&quot;

struct iThreadTest : public virtual iBase
{
  THREADED_INTERFACE(Test1);
  THREADED_INTERFACE1(Test2, bool b);
  THREADED_INTERFACE2(Test3, int i, float f);
}
</pre></td></tr></table>
<p>This will add extra information to your method, such as a special return type.
</p>
<a name="4"></a>
<h4 class="subsubheading"> Class and Method declaration </h4>

<p>Inside your class, to declare a method as being threaded you need to do two things:
</p>
<ul>
<li> Inherit from the class <samp>&lsquo;ThreadedCallable&lt;&gt;&rsquo;</samp>. This adds some extra required functionality
to your class and forces you to implement some needed methods. Currently, you are only required
to implement <samp>&lsquo;GetObjectRegistry()&rsquo;</samp>.
</li><li> Make use of the <samp>&lsquo;THREADED_CALLABLE_DECL&rsquo;</samp> macro. This is explained below. 
</li></ul>

<p>The <samp>&lsquo;THREADED_CALLABLE_DECL&rsquo;</samp> macro is what kicks everything off. It creates extra functions to
dispatch the method call off to the thread manager, and provides a declaration to your function.
It takes multiple parameters:
</p>
<ul>
<li> The first parameter is the name of the class your method is in.
</li><li> The second parameter is the name of your method.
</li><li> The third parameter is the class of the return object, this will be explained in more detail below.
</li><li> All of the next parameters except the last two are the type followed by the name of the variables that will be passed.
</li><li> The penultimate parameter is a boolean value which determines if the method call is dispatched to the main thread(false) or a non-main thread(true).
</li><li> The final parameter is a boolean value which determines whether or not the method will return immediately (false), or if it will wait until the call is finished(true).
</li></ul>

<p>Be very careful when dispatching to the main thread and waiting on it to finish.
E.g. If you're holding a lock which the main thread is currently waiting on, you will cause a deadlock by calling such a method.
</p>
<table><tr><td>&nbsp;</td><td><pre class="example">#include &quot;csutil/threadmanager.h&quot;

class csThreadTest :
  public ThreadedCallable&lt;csThreadTest&gt;,
  public scfImplementation1&lt;csThreadTest, iThreadTest&gt;
{
public:
  csThreadTest(iObjectRegistry* objReg);

  iObjectRegistry* GetObjectRegistry() const
  { return objReg; }

  THREADED_CALLABLE_DECL(
    csThreadTest, Test1, csThreadReturn, true, false)
  THREADED_CALLABLE_DECL1(
    csThreadTest, Test2, csThreadReturn, bool, b, true, false)
  THREADED_CALLABLE_DECL2(
    csThreadTest, Test3, csThreadReturn, int, in, float, flo,
    true, false)

private:
  iObjectRegistry* objReg;
}
</pre></td></tr></table>
<a name="5"></a>
<h4 class="subsubheading"> Method definition </h4>

<p>Now that you have your class set up and methods declared, you need to define them. You do this using the <samp>&lsquo;THREADED_CALLABLE_IMPL&rsquo;</samp> macro.
The first parameter is the class name. The second is the method name and the rest are your variables as normal.
</p>
<p>The <samp>&lsquo;return&rsquo;</samp> here is actually a provided object, as you will read more about below. This is called <samp>&lsquo;ret&rsquo;</samp>.
</p>
<table><tr><td>&nbsp;</td><td><pre class="example">THREADED_CALLABLE_IMPL(csThreadTest, Test1)
{
}

THREADED_CALLABLE_IMPL1(csThreadTest, Test2, bool b)
{
}

THREADED_CALLABLE_IMPL2(csThreadTest, Test3, int i, float f)
{
}
</pre></td></tr></table>
<a name="6"></a>
<h4 class="subsubheading"> Return types </h4>

<p>As mentioned above, you specify the class of the return object in the method declaration.
There a restriction here; The object must implement the <samp>&lsquo;iThreadReturn&rsquo;</samp> interface.
This is already implemented in <tt>&lsquo;csutil/threadmanager.h&rsquo;</tt> (<samp>&lsquo;csThreadReturn&rsquo;</samp>), or you may implement this yourself.
</p>
<p>This return object basically tells/gives you three things:
</p>
<ul>
<li> Whether or not the method call has finished yet.
</li><li> Whether or not the method call succeeded.
</li><li> The return data from that method call.
</li></ul>

<p>You set the return data yourself using the provided <samp>&lsquo;ret&rsquo;</samp> <samp>&lsquo;iThreadReturn&rsquo;</samp> object interface in your method definition.
The return data is in the form of a <code>csRef&lt;iBase&gt;</code> or a <samp>&lsquo;void*&rsquo;</samp>. It is up to you which you choose to use.
To indicate whether or not your function has succeeded, return a boolean value (true for success).
Your return object will automatically be updated when your method has finished executing to mark that this is the case.
</p>
<p>An example of this:
</p>
<table><tr><td>&nbsp;</td><td><pre class="example">THREADED_CALLABLE_IMPL(csClassName, MethodName2)
{
  csRef&lt;iInterface&gt; obj = csPtr&lt;iInterface&gt;(new csImpl())
  ret-&gt;SetData(csRef&lt;iBase&gt;(obj));
  return true;
}

csClassName::MethodName()
{
  csRef&lt;iThreadReturn&gt; ret = MethodName2();
  ret-&gt;Wait();
  if(ret-&gt;WasSuccessful())
  {
    csRef&lt;iInterface&gt; obj;
    ret-&gt;GetData(obj);
  }
}
</pre></td></tr></table>
<a name="7"></a>
<h4 class="subsubheading"> Waiting </h4>

<p>You may have noticed something new in the example above:
</p>
<table><tr><td>&nbsp;</td><td><pre class="example">ret-&gt;Wait();
</pre></td></tr></table>
<p>The majority of the time you will want your method call to return immediately so you can continue onwards.
At some point you might want to check and wait for your method to finish before continuing.
The thread manager provides a simple way to do this. Call <code>Wait()</code>, on your <samp>&lsquo;iThreadReturn&rsquo;</samp> and it will send
a message to the thread manager and then wait until your method has finished executing, at which point it will return.
</p>
<a name="8"></a>
<h3 class="subheading"> Threaded Loading </h3>

<p>One important threaded section of Crystal Space is the threaded loader.  In
order to ensure that the threaded loader works correctly you must make sure
that you use thread-safe versions of the following modules in Crystal Space:
</p>
<ul class="toc">
<li>
<code>iReporter</code> (the standard reporter is okay).
</li><li>
<code>iReporterListener</code> (the standard reporter listener is okay).
</li><li>
<code>iConsoleOutput</code> (<tt>&lsquo;simpcon&rsquo;</tt> and <tt>&lsquo;csconout&rsquo;</tt> are okay provided
auto-updating is disabled).
</li><li>
<code>iLoaderContext</code> (the threaded loader provides a thread-safe version
of this one).
</li><li>
<code>iDocumentSystem</code> (TinyXML, XMLRead, and BinaryXML are all okay).
</li></ul>

<hr size="1">
<table cellpadding="1" cellspacing="1" border="0">
<tr><td valign="middle" align="left">[<a href="MacOS_002fX-Dynamic-Linking.html#0" title="Previous section in reading order"> &lt; </a>]</td>
<td valign="middle" align="left">[<a href="Engine-Internal-Workings.html#0" title="Next section in reading order"> &gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="Internals.html#0" title="Beginning of this chapter or previous chapter"> &lt;&lt; </a>]</td>
<td valign="middle" align="left">[<a href="Internals.html#0" title="Up section"> Up </a>]</td>
<td valign="middle" align="left">[<a href="Contributing.html#0" title="Next chapter"> &gt;&gt; </a>]</td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left"> &nbsp; </td>
<td valign="middle" align="left">[<a href="index.html#SEC_Top" title="Cover (top) of document">Top</a>]</td>
<td valign="middle" align="left">[<a href="cs_toc.html#SEC_Contents" title="Table of contents">Contents</a>]</td>
<td valign="middle" align="left">[<a href="cs_Index.html#0" title="Index">Index</a>]</td>
<td valign="middle" align="left">[<a href="cs_abt.html#SEC_About" title="About (help)"> ? </a>]</td>
</tr></table>
<p>
 <font size="-1">
  This document was generated using <a href="http://texi2html.cvshome.org/"><em>texi2html 1.76</em></a>.
 </font>
 <br>

</p>
</body>
</html>
