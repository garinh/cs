/*
 * app#PROJECTNAME#.cpp
 *
 * Definition of App#PROJECTNAMECAP#, the main application object.
 */

#include "app#PROJECTNAME#.h"
#ifdef USE_CEL
#include <celtool/initapp.h>
#endif
#include <cstool/simplestaticlighter.h>

// Convenience function to get a csVector3 from a config file.
static csVector3 GetConfigVector (iConfigFile* config,
        const char* key, const char* def)
{
  csVector3 v;
  csScanStr (config->GetStr (key, def), "%f,%f,%f", &v.x, &v.y, &v.z);
  return v;
}

App#PROJECTNAMECAP#::App#PROJECTNAMECAP#() : csApplicationFramework()
{
  SetApplicationName("#PROJECTNAME#");
}

App#PROJECTNAMECAP#::~App#PROJECTNAMECAP#()
{
}

void App#PROJECTNAMECAP#::DoStuffOncePerFrame()
{
  /* Note: this code is taken from simpmap tutorial.
           Remove or customize it !
  */
  // First get elapsed time from the virtual clock.
  csTicks elapsed_time = vc->GetElapsedTicks ();
  // speed is a "magic value" which can help with FPS independence
  //float speed = (elapsed_time / 1000.0) * (0.03 * 20);

  csVector3 obj_move (0);
  csVector3 obj_rotate (0);

  if (kbd->GetKeyState (CSKEY_SHIFT))
  {
    // If the user is holding down shift, the arrow keys will cause
    // the camera to strafe up, down, left or right from it's
    // current position.
    if (kbd->GetKeyState (CSKEY_RIGHT))
      obj_move = CS_VEC_RIGHT * 3.0f;
    if (kbd->GetKeyState (CSKEY_LEFT))
      obj_move = CS_VEC_LEFT * 3.0f;
    if (kbd->GetKeyState (CSKEY_UP))
      obj_move = CS_VEC_UP * 3.0f;
    if (kbd->GetKeyState (CSKEY_DOWN))
      obj_move = CS_VEC_DOWN * 3.0f;
  }
  else
  { 
    // left and right cause the camera to rotate on the global Y
    // axis; page up and page down cause the camera to rotate on the
    // _camera's_ X axis (more on this in a second) and up and down
    // arrows cause the camera to go forwards and backwards.
    if (kbd->GetKeyState (CSKEY_RIGHT))
      obj_rotate.Set (0, 1, 0);
    if (kbd->GetKeyState (CSKEY_LEFT))
      obj_rotate.Set (0, -1, 0);
    if (kbd->GetKeyState (CSKEY_PGUP))
      obj_rotate.Set (1, 0, 0);
    if (kbd->GetKeyState (CSKEY_PGDN))
      obj_rotate.Set (-1, 0, 0);
    if (kbd->GetKeyState (CSKEY_UP))
      obj_move = CS_VEC_FORWARD * 3.0f;
    if (kbd->GetKeyState (CSKEY_DOWN))
      obj_move = CS_VEC_BACKWARD * 3.0f;
  } 
    
  collider_actor.Move (float (elapsed_time) / 1000.0f, 1.0f,
        obj_move, obj_rotate);

  // To get the camera/actor position, you can use that:
  //iCamera* cam = view->GetCamera ();
  //csVector3 pos (cam->GetTransform ().GetOrigin ());
}

void App#PROJECTNAMECAP#::Frame()
{
  /*
    Note: if you use CEL, you probably don't want to call DoStuffOncePerFrame()
          nor g3d->BeginDraw() and use the entity/propclass system.
          This part (similar to simpmap tutorial) is just there as a kickstart.
  */

  DoStuffOncePerFrame ();

  if (g3d->BeginDraw(engine->GetBeginDrawFlags() | CSDRAW_3DGRAPHICS))
  {
    // Draw frame.
#ifdef USE_CEL
    // When using CEL, the entity system takes care of drawing,
    // so there's no need to call iView::Draw() here.
    // That template doesn't setup any CEL entity, so we have to call it now.
    // Once you have your entities set, remove it.
    view->Draw ();
#else
    view->Draw ();
#endif
  }
}

bool App#PROJECTNAMECAP#::OnKeyboard(iEvent& ev)
{
  // We got a keyboard event.
  if (csKeyEventHelper::GetEventType(&ev) == csKeyEventTypeDown)
  {
    // The user pressed a key (as opposed to releasing it).
    utf32_char code = csKeyEventHelper::GetCookedCode(&ev);
    if (code == CSKEY_ESC)
    {
      // The user pressed escape, so terminate the application.  The proper way
      // to terminate a Crystal Space application is by broadcasting a
      // csevQuit event.  That will cause the main run loop to stop.  To do
      // so we retrieve the event queue from the object registry and then post
      // the event.
      csRef<iEventQueue> q =
        csQueryRegistry<iEventQueue> (GetObjectRegistry());
      if (q.IsValid())
        q->GetEventOutlet()->Broadcast(csevQuit(GetObjectRegistry()));
    }
  }
  return false;
}

bool App#PROJECTNAMECAP#::OnInitialize(int argc, char* argv[])
{
  iObjectRegistry* r = GetObjectRegistry();

  // Load application-specific configuration file.
  if (!csInitializer::SetupConfigManager(r,
      "/#PROJECTNAME#/App#PROJECTNAMECAP#.cfg", GetApplicationName()))
    return ReportError("Failed to initialize configuration manager!");

#ifdef USE_CEL
  celInitializer::SetupCelPluginDirs(r);
#endif

  // RequestPlugins() will load all plugins we specify.  In addition it will
  // also check if there are plugins that need to be loaded from the
  // configuration system (both the application configuration and CS or global
  // configurations).  It also supports specifying plugins on the command line
  // via the --plugin= option.
  if (!csInitializer::RequestPlugins(r,
	CS_REQUEST_VFS,
	CS_REQUEST_OPENGL3D,
	CS_REQUEST_ENGINE,
	CS_REQUEST_FONTSERVER,
	CS_REQUEST_IMAGELOADER,
	CS_REQUEST_LEVELLOADER,
	CS_REQUEST_REPORTER,
	CS_REQUEST_REPORTERLISTENER,
	CS_REQUEST_PLUGIN("crystalspace.collisiondetection.opcode",
		iCollideSystem),
	CS_REQUEST_END))
    return ReportError("Failed to initialize plugins!");

  // "Warm up" the event handler so it can interact with the world
  csBaseEventHandler::Initialize(GetObjectRegistry());
 
  // Set up an event handler for the application.  Crystal Space is fully
  // event-driven.  Everything (except for this initialization) happens in
  // response to an event.
  if (!RegisterQueue (r, csevAllEvents(GetObjectRegistry())))
    return ReportError("Failed to set up event handler!");

  return true;
}

void App#PROJECTNAMECAP#::OnExit()
{
  printer.Invalidate();
}

bool App#PROJECTNAMECAP#::Application()
{
  iObjectRegistry* r = GetObjectRegistry();

  // Open the main system. This will open all the previously loaded plugins
  // (i.e. all windows will be opened).
  if (!OpenApplication(r))
    return ReportError("Error opening system!");

  // Now get the pointer to various modules we need.  We fetch them from the
  // object registry.  The RequestPlugins() call we did earlier registered all
  // loaded plugins with the object registry.  It is also possible to load
  // plugins manually on-demand.
  g3d = csQueryRegistry<iGraphics3D> (r);
  if (!g3d)
    return ReportError("Failed to locate 3D renderer!");

  engine = csQueryRegistry<iEngine> (r);
  if (!engine)
    return ReportError("Failed to locate 3D engine!");
    
  printer.AttachNew(new FramePrinter(GetObjectRegistry()));

  vc = csQueryRegistry<iVirtualClock> (r);
  if (!vc)
    return ReportError ("Failed to locate Virtual Clock!");

  kbd = csQueryRegistry<iKeyboardDriver> (r);
  if (!kbd)
    return ReportError ("Failed to locate Keyboard Driver!");

  loader = csQueryRegistry<iLoader> (r);
  if (!loader)
    return ReportError("Failed to locate map loader plugin!");

  cdsys = csQueryRegistry<iCollideSystem> (r);
  if (!cdsys)
    return ReportError ("Failed to locate CD system!");

  cfgmgr = csQueryRegistry<iConfigManager> (r);
  if (!cfgmgr)
    return ReportError ("Failed to locate the configuration manager plugin!");

  // We need a View to the virtual world.
  view.AttachNew(new csView (engine, g3d));
  iGraphics2D* g2d = g3d->GetDriver2D ();
  // We use the full window to draw the world.
  view->SetRectangle (0, 0, g2d->GetWidth (), g2d->GetHeight ());

  // Set the window title.
  iNativeWindow* nw = g2d->GetNativeWindow ();
  if (nw)
    nw->SetTitle (cfgmgr->GetStr ("WindowTitle",
          "Please set WindowTitle in App#PROJECTNAMECAP#.cfg"));

  if (!LoadMap (cfgmgr->GetStr ("DefaultMap", "/appdata/defaultmap")))
    return ReportError("Failed to load map!");

  if (!PostLoadMap ())
    return ReportError ("Error during PostLoadMap()!");

  // Start the default run/event loop.  This will return only when some code,
  // such as OnKeyboard(), has asked the run loop to terminate.
  Run();

  return true;
}

bool App#PROJECTNAMECAP#::LoadMap (const char* path)
{
  // Set VFS current directory to the level we want to load.
  csRef<iVFS> VFS (csQueryRegistry<iVFS> (GetObjectRegistry ()));
  VFS->PushDir (path);
  // Load the level file which is called 'world'.
  if (!loader->LoadMapFile ("world"))
  {
    VFS->PopDir ();
    return ReportError("Error couldn't load level file %s/world!", path);
  }
  VFS->PopDir ();

  return true;
}

bool App#PROJECTNAMECAP#::PostLoadMap ()
{
  // Initialize collision objects for all loaded objects.
  csColliderHelper::InitializeCollisionWrappers (cdsys, engine);

  engine->Prepare ();

  // Creates an accessor for configuration settings.
  csConfigAccess cfgAcc (GetObjectRegistry ());

  // Find the starting position in this level.
  csVector3 pos (0);
  int nbStartPositions = engine->GetCameraPositions ()->GetCount ();
  if (nbStartPositions > 0)
  {
    // There is a valid starting position defined in the level file.
    iCameraPosition* campos = engine->GetCameraPositions ()->Get (0);
    sector = engine->GetSectors ()->FindByName (campos->GetSector ());
    pos = campos->GetPosition ();
    csPrintf ("\nFound %d starting position%s, using the first one:\n"
          "name: %s, sector: %s\n",
          nbStartPositions, nbStartPositions > 1 ? "s" : "",
          campos->QueryObject ()->GetName (), campos->GetSector ());
  }
  else
  {
    // We didn't find a valid starting position,
    // so we default to going to the first sector at position (0,2,0).
    sector = engine->GetSectors ()->Get (0);
    pos = csVector3 (GetConfigVector (cfgAcc, "DefaultStartPos", "0,2,0"));
    ReportWarning (
          "Didn't find any starting position, using %s in sector '%s'",
          pos.Description ().GetData (), sector->QueryObject ()->GetName ());
  }
  if (!sector)
    return ReportError("Couldn't find a valid sector in PostLoadMap()!");

  // Now we need to position the camera in our world.
  view->GetCamera ()->SetSector (sector);
  view->GetCamera ()->GetTransform ().SetOrigin (pos);

  // Initialize our collider actor.
  collider_actor.SetCollideSystem (cdsys);
  collider_actor.SetEngine (engine);
  // Read the values from config files, and use default values if not set.
  csVector3 legs (GetConfigVector (cfgAcc, "Actor.Legs", "0.2,0.3,0.2"));
  csVector3 body (GetConfigVector (cfgAcc, "Actor.Body", "0.2,1.2,0.2"));
  csVector3 shift (GetConfigVector (cfgAcc, "Actor.Shift", "0.0,-1.0,0.0"));
  collider_actor.InitializeColliders (view->GetCamera (),
        legs, body, shift);

  // Load a mesh factory from a library, then instatiate a mesh from it
  LoadLibrary ("/appdata/defaultmap/libSimpleCube");
  iMeshFactoryWrapper* mfw = engine->FindMeshFactory ("genSimpleCube");
  if (mfw)
  {
    csRef<iMeshWrapper> cube = engine->CreateMeshWrapper (
          mfw, "aSimpleCube", sector, csVector3 (5,1,8));
    // Initialize the collider for this object, since it was created
    // after InitializeCollisionWrappers() call...
    csColliderHelper::InitializeCollisionWrapper (cdsys, cube);
  }
  else
    ReportWarning ("Couldn't find the genSimpleCube mesh factory!");

  // The static lighter provides a simple way to initialize the "static color"
  // of a mesh (usually genmesh) to provide a way to do simple static 'lighting'
  // Once you've lit your map using lighter2, disable it.
  // You must also disable it if you want to use hardware dynamic lighting,
  // like with parallax/normalmapping shaders.
  if (cfgAcc->GetBool ("StaticLighter.Enabled", true))
  {
    int maxLights = cfgAcc->GetInt ("StaticLighter.MaxLights", 4);
    using namespace CS::Lighting;
    SimpleStaticLighter::ShadowType shadowType =
      (SimpleStaticLighter::ShadowType)cfgAcc->GetInt (
      "StaticLighter.ShadowType", 0);
    // Note you could only "shine lights" on a specific mesh (see the API).
    SimpleStaticLighter::ShineLights (sector, engine, maxLights, shadowType);
  }

  return true;
}

bool App#PROJECTNAMECAP#::LoadLibrary (const char* path)
{
  csRef<iVFS> vfs (csQueryRegistry<iVFS> (GetObjectRegistry ()));
  if (vfs)
  {
    // Set current VFS dir to the level dir, helps with relative paths in maps
    vfs->PushDir (path);
    if (!loader->LoadLibraryFile (path))
    {
      vfs->PopDir ();
      return ReportError("Couldn't load library file %s!", path);
    }
    vfs->PopDir ();
  }
  else
    return ReportError ("Couldn't find VFS plugin!");

  return true;
}

