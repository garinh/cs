# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.

import _ivideo
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import core
import csgfx
_SetSCFPointer = _ivideo._SetSCFPointer
_GetSCFPointer = _ivideo._GetSCFPointer
if not "core" in dir():
    core = __import__("cspace").__dict__["core"]
core.AddSCFLink(_SetSCFPointer)
CSMutableArrayHelper = core.CSMutableArrayHelper

CS_WRITE_BASELINE = _ivideo.CS_WRITE_BASELINE
CS_WRITE_NOANTIALIAS = _ivideo.CS_WRITE_NOANTIALIAS
class csPixelCoord(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    x = _swig_property(_ivideo.csPixelCoord_x_get, _ivideo.csPixelCoord_x_set)
    y = _swig_property(_ivideo.csPixelCoord_y_get, _ivideo.csPixelCoord_y_set)
    def __init__(self, *args): 
        this = _ivideo.new_csPixelCoord(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ivideo.delete_csPixelCoord
    __del__ = lambda self : None;
csPixelCoord_swigregister = _ivideo.csPixelCoord_swigregister
csPixelCoord_swigregister(csPixelCoord)

class iGraphics2D(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def Open(*args): return _ivideo.iGraphics2D_Open(*args)
    def Close(*args): return _ivideo.iGraphics2D_Close(*args)
    def GetWidth(*args): return _ivideo.iGraphics2D_GetWidth(*args)
    def GetHeight(*args): return _ivideo.iGraphics2D_GetHeight(*args)
    def GetColorDepth(*args): return _ivideo.iGraphics2D_GetColorDepth(*args)
    def FindRGB(*args): return _ivideo.iGraphics2D_FindRGB(*args)
    def GetRGB(*args): return _ivideo.iGraphics2D_GetRGB(*args)
    def GetRGBA(*args): return _ivideo.iGraphics2D_GetRGBA(*args)
    def SetClipRect(*args): return _ivideo.iGraphics2D_SetClipRect(*args)
    def GetClipRect(*args): return _ivideo.iGraphics2D_GetClipRect(*args)
    def BeginDraw(*args): return _ivideo.iGraphics2D_BeginDraw(*args)
    def FinishDraw(*args): return _ivideo.iGraphics2D_FinishDraw(*args)
    def Print(*args): return _ivideo.iGraphics2D_Print(*args)
    def Clear(*args): return _ivideo.iGraphics2D_Clear(*args)
    def ClearAll(*args): return _ivideo.iGraphics2D_ClearAll(*args)
    def DrawLine(*args): return _ivideo.iGraphics2D_DrawLine(*args)
    def DrawBox(*args): return _ivideo.iGraphics2D_DrawBox(*args)
    def ClipLine(*args): return _ivideo.iGraphics2D_ClipLine(*args)
    def DrawPixel(*args): return _ivideo.iGraphics2D_DrawPixel(*args)
    def DrawPixels(*args): return _ivideo.iGraphics2D_DrawPixels(*args)
    def Blit(*args): return _ivideo.iGraphics2D_Blit(*args)
    def GetPixel(*args): return _ivideo.iGraphics2D_GetPixel(*args)
    def AllowResize(*args): return _ivideo.iGraphics2D_AllowResize(*args)
    def Resize(*args): return _ivideo.iGraphics2D_Resize(*args)
    def GetFontServer(*args): return _ivideo.iGraphics2D_GetFontServer(*args)
    def PerformExtension(*args): return _ivideo.iGraphics2D_PerformExtension(*args)
    def ScreenShot(*args): return _ivideo.iGraphics2D_ScreenShot(*args)
    def GetNativeWindow(*args): return _ivideo.iGraphics2D_GetNativeWindow(*args)
    def GetFullScreen(*args): return _ivideo.iGraphics2D_GetFullScreen(*args)
    def SetFullScreen(*args): return _ivideo.iGraphics2D_SetFullScreen(*args)
    def SetMousePosition(*args): return _ivideo.iGraphics2D_SetMousePosition(*args)
    def SetMouseCursor(*args): return _ivideo.iGraphics2D_SetMouseCursor(*args)
    def SetGamma(*args): return _ivideo.iGraphics2D_SetGamma(*args)
    def GetGamma(*args): return _ivideo.iGraphics2D_GetGamma(*args)
    def GetName(*args): return _ivideo.iGraphics2D_GetName(*args)
    def Write(*args): return _ivideo.iGraphics2D_Write(*args)
    def SetViewport(*args): return _ivideo.iGraphics2D_SetViewport(*args)
    def GetViewport(*args): return _ivideo.iGraphics2D_GetViewport(*args)
    def GetFramebufferDimensions(*args): return _ivideo.iGraphics2D_GetFramebufferDimensions(*args)
    def GetHWRenderer(*args): return _ivideo.iGraphics2D_GetHWRenderer(*args)
    def GetHWGLVersion(*args): return _ivideo.iGraphics2D_GetHWGLVersion(*args)
    def GetHWVendor(*args): return _ivideo.iGraphics2D_GetHWVendor(*args)
    scfGetVersion = staticmethod(_ivideo.iGraphics2D_scfGetVersion)
    __swig_destroy__ = _ivideo.delete_iGraphics2D
    __del__ = lambda self : None;
    def _PerformExtension(*args): return _ivideo.iGraphics2D__PerformExtension(*args)
    def PerformExtension (self, command, *args):
      self._PerformExtension(self.__class__.__name__, command, args);

iGraphics2D_swigregister = _ivideo.iGraphics2D_swigregister
iGraphics2D_swigregister(iGraphics2D)
iGraphics2D_scfGetVersion = _ivideo.iGraphics2D_scfGetVersion

CSDRAW_2DGRAPHICS = _ivideo.CSDRAW_2DGRAPHICS
CSDRAW_3DGRAPHICS = _ivideo.CSDRAW_3DGRAPHICS
CSDRAW_CLEARZBUFFER = _ivideo.CSDRAW_CLEARZBUFFER
CSDRAW_CLEARSCREEN = _ivideo.CSDRAW_CLEARSCREEN
CSDRAW_NOCLIPCLEAR = _ivideo.CSDRAW_NOCLIPCLEAR
CSDRAW_READBACK = _ivideo.CSDRAW_READBACK
CS_CLIPPER_NONE = _ivideo.CS_CLIPPER_NONE
CS_CLIPPER_OPTIONAL = _ivideo.CS_CLIPPER_OPTIONAL
CS_CLIPPER_TOPLEVEL = _ivideo.CS_CLIPPER_TOPLEVEL
CS_CLIPPER_REQUIRED = _ivideo.CS_CLIPPER_REQUIRED
CS_CLIP_NOT = _ivideo.CS_CLIP_NOT
CS_CLIP_NEEDED = _ivideo.CS_CLIP_NEEDED
CS_ZBUF_NONE = _ivideo.CS_ZBUF_NONE
CS_ZBUF_FILL = _ivideo.CS_ZBUF_FILL
CS_ZBUF_TEST = _ivideo.CS_ZBUF_TEST
CS_ZBUF_USE = _ivideo.CS_ZBUF_USE
CS_ZBUF_EQUAL = _ivideo.CS_ZBUF_EQUAL
CS_ZBUF_INVERT = _ivideo.CS_ZBUF_INVERT
CS_ZBUF_MESH = _ivideo.CS_ZBUF_MESH
CS_ZBUF_MESH2 = _ivideo.CS_ZBUF_MESH2
CS_VATTRIB_SPECIFIC_FIRST = _ivideo.CS_VATTRIB_SPECIFIC_FIRST
CS_VATTRIB_SPECIFIC_LAST = _ivideo.CS_VATTRIB_SPECIFIC_LAST
CS_VATTRIB_SPECIFIC_NUM = _ivideo.CS_VATTRIB_SPECIFIC_NUM
CS_VATTRIB_GENERIC_FIRST = _ivideo.CS_VATTRIB_GENERIC_FIRST
CS_VATTRIB_GENERIC_LAST = _ivideo.CS_VATTRIB_GENERIC_LAST
CS_VATTRIB_GENERIC_NUM = _ivideo.CS_VATTRIB_GENERIC_NUM
CS_IATTRIB_FIRST = _ivideo.CS_IATTRIB_FIRST
CS_IATTRIB_LAST = _ivideo.CS_IATTRIB_LAST
CS_VATTRIB_UNUSED = _ivideo.CS_VATTRIB_UNUSED
CS_VATTRIB_INVALID = _ivideo.CS_VATTRIB_INVALID
CS_VATTRIB_POSITION = _ivideo.CS_VATTRIB_POSITION
CS_VATTRIB_WEIGHT = _ivideo.CS_VATTRIB_WEIGHT
CS_VATTRIB_NORMAL = _ivideo.CS_VATTRIB_NORMAL
CS_VATTRIB_COLOR = _ivideo.CS_VATTRIB_COLOR
CS_VATTRIB_PRIMARY_COLOR = _ivideo.CS_VATTRIB_PRIMARY_COLOR
CS_VATTRIB_SECONDARY_COLOR = _ivideo.CS_VATTRIB_SECONDARY_COLOR
CS_VATTRIB_FOGCOORD = _ivideo.CS_VATTRIB_FOGCOORD
CS_VATTRIB_TEXCOORD = _ivideo.CS_VATTRIB_TEXCOORD
CS_VATTRIB_TEXCOORD0 = _ivideo.CS_VATTRIB_TEXCOORD0
CS_VATTRIB_TEXCOORD1 = _ivideo.CS_VATTRIB_TEXCOORD1
CS_VATTRIB_TEXCOORD2 = _ivideo.CS_VATTRIB_TEXCOORD2
CS_VATTRIB_TEXCOORD3 = _ivideo.CS_VATTRIB_TEXCOORD3
CS_VATTRIB_TEXCOORD4 = _ivideo.CS_VATTRIB_TEXCOORD4
CS_VATTRIB_TEXCOORD5 = _ivideo.CS_VATTRIB_TEXCOORD5
CS_VATTRIB_TEXCOORD6 = _ivideo.CS_VATTRIB_TEXCOORD6
CS_VATTRIB_TEXCOORD7 = _ivideo.CS_VATTRIB_TEXCOORD7
CS_VATTRIB_0 = _ivideo.CS_VATTRIB_0
CS_VATTRIB_1 = _ivideo.CS_VATTRIB_1
CS_VATTRIB_2 = _ivideo.CS_VATTRIB_2
CS_VATTRIB_3 = _ivideo.CS_VATTRIB_3
CS_VATTRIB_4 = _ivideo.CS_VATTRIB_4
CS_VATTRIB_5 = _ivideo.CS_VATTRIB_5
CS_VATTRIB_6 = _ivideo.CS_VATTRIB_6
CS_VATTRIB_7 = _ivideo.CS_VATTRIB_7
CS_VATTRIB_8 = _ivideo.CS_VATTRIB_8
CS_VATTRIB_9 = _ivideo.CS_VATTRIB_9
CS_VATTRIB_10 = _ivideo.CS_VATTRIB_10
CS_VATTRIB_11 = _ivideo.CS_VATTRIB_11
CS_VATTRIB_12 = _ivideo.CS_VATTRIB_12
CS_VATTRIB_13 = _ivideo.CS_VATTRIB_13
CS_VATTRIB_14 = _ivideo.CS_VATTRIB_14
CS_VATTRIB_15 = _ivideo.CS_VATTRIB_15
CS_IATTRIB_OBJECT2WORLD = _ivideo.CS_IATTRIB_OBJECT2WORLD
CS_MIXMODE_TYPE_AUTO = _ivideo.CS_MIXMODE_TYPE_AUTO
CS_MIXMODE_TYPE_BLENDOP = _ivideo.CS_MIXMODE_TYPE_BLENDOP
CS_MIXMODE_FLAG_BLENDOP_ALPHA = _ivideo.CS_MIXMODE_FLAG_BLENDOP_ALPHA
CS_MIXMODE_TYPE_MESH = _ivideo.CS_MIXMODE_TYPE_MESH
CS_MIXMODE_TYPE_MASK = _ivideo.CS_MIXMODE_TYPE_MASK
CS_MIXMODE_FACT_ZERO = _ivideo.CS_MIXMODE_FACT_ZERO
CS_MIXMODE_FACT_ONE = _ivideo.CS_MIXMODE_FACT_ONE
CS_MIXMODE_FACT_SRCCOLOR = _ivideo.CS_MIXMODE_FACT_SRCCOLOR
CS_MIXMODE_FACT_SRCCOLOR_INV = _ivideo.CS_MIXMODE_FACT_SRCCOLOR_INV
CS_MIXMODE_FACT_DSTCOLOR = _ivideo.CS_MIXMODE_FACT_DSTCOLOR
CS_MIXMODE_FACT_DSTCOLOR_INV = _ivideo.CS_MIXMODE_FACT_DSTCOLOR_INV
CS_MIXMODE_FACT_SRCALPHA = _ivideo.CS_MIXMODE_FACT_SRCALPHA
CS_MIXMODE_FACT_SRCALPHA_INV = _ivideo.CS_MIXMODE_FACT_SRCALPHA_INV
CS_MIXMODE_FACT_DSTALPHA = _ivideo.CS_MIXMODE_FACT_DSTALPHA
CS_MIXMODE_FACT_DSTALPHA_INV = _ivideo.CS_MIXMODE_FACT_DSTALPHA_INV
CS_MIXMODE_FACT_COUNT = _ivideo.CS_MIXMODE_FACT_COUNT
CS_MIXMODE_FACT_MASK = _ivideo.CS_MIXMODE_FACT_MASK
CS_MIXMODE_ALPHATEST_AUTO = _ivideo.CS_MIXMODE_ALPHATEST_AUTO
CS_MIXMODE_ALPHATEST_ENABLE = _ivideo.CS_MIXMODE_ALPHATEST_ENABLE
CS_MIXMODE_ALPHATEST_DISABLE = _ivideo.CS_MIXMODE_ALPHATEST_DISABLE
CS_MIXMODE_ALPHATEST_MASK = _ivideo.CS_MIXMODE_ALPHATEST_MASK
CS_FX_COPY = _ivideo.CS_FX_COPY
CS_FX_MESH = _ivideo.CS_FX_MESH
CS_FX_FLAT = _ivideo.CS_FX_FLAT
CS_FX_MASK_ALPHA = _ivideo.CS_FX_MASK_ALPHA
CS_FX_MASK_MIXMODE = _ivideo.CS_FX_MASK_MIXMODE
class csAlphaMode(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    alphaNone = _ivideo.csAlphaMode_alphaNone
    alphaBinary = _ivideo.csAlphaMode_alphaBinary
    alphaSmooth = _ivideo.csAlphaMode_alphaSmooth
    autoAlphaMode = _swig_property(_ivideo.csAlphaMode_autoAlphaMode_get, _ivideo.csAlphaMode_autoAlphaMode_set)
    def __init__(self, *args): 
        this = _ivideo.new_csAlphaMode(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ivideo.delete_csAlphaMode
    __del__ = lambda self : None;
csAlphaMode_swigregister = _ivideo.csAlphaMode_swigregister
csAlphaMode_swigregister(csAlphaMode)

CS_LIGHTPARAM_POSITION = _ivideo.CS_LIGHTPARAM_POSITION
CS_LIGHTPARAM_DIFFUSE = _ivideo.CS_LIGHTPARAM_DIFFUSE
CS_LIGHTPARAM_SPECULAR = _ivideo.CS_LIGHTPARAM_SPECULAR
CS_LIGHTPARAM_ATTENUATION = _ivideo.CS_LIGHTPARAM_ATTENUATION
CS_SHADOW_VOLUME_BEGIN = _ivideo.CS_SHADOW_VOLUME_BEGIN
CS_SHADOW_VOLUME_PASS1 = _ivideo.CS_SHADOW_VOLUME_PASS1
CS_SHADOW_VOLUME_PASS2 = _ivideo.CS_SHADOW_VOLUME_PASS2
CS_SHADOW_VOLUME_FAIL1 = _ivideo.CS_SHADOW_VOLUME_FAIL1
CS_SHADOW_VOLUME_FAIL2 = _ivideo.CS_SHADOW_VOLUME_FAIL2
CS_SHADOW_VOLUME_USE = _ivideo.CS_SHADOW_VOLUME_USE
CS_SHADOW_VOLUME_FINISH = _ivideo.CS_SHADOW_VOLUME_FINISH
G3DRENDERSTATE_ZBUFFERMODE = _ivideo.G3DRENDERSTATE_ZBUFFERMODE
G3DRENDERSTATE_DITHERENABLE = _ivideo.G3DRENDERSTATE_DITHERENABLE
G3DRENDERSTATE_BILINEARMAPPINGENABLE = _ivideo.G3DRENDERSTATE_BILINEARMAPPINGENABLE
G3DRENDERSTATE_TRILINEARMAPPINGENABLE = _ivideo.G3DRENDERSTATE_TRILINEARMAPPINGENABLE
G3DRENDERSTATE_TRANSPARENCYENABLE = _ivideo.G3DRENDERSTATE_TRANSPARENCYENABLE
G3DRENDERSTATE_MIPMAPENABLE = _ivideo.G3DRENDERSTATE_MIPMAPENABLE
G3DRENDERSTATE_TEXTUREMAPPINGENABLE = _ivideo.G3DRENDERSTATE_TEXTUREMAPPINGENABLE
G3DRENDERSTATE_LIGHTINGENABLE = _ivideo.G3DRENDERSTATE_LIGHTINGENABLE
G3DRENDERSTATE_INTERLACINGENABLE = _ivideo.G3DRENDERSTATE_INTERLACINGENABLE
G3DRENDERSTATE_MMXENABLE = _ivideo.G3DRENDERSTATE_MMXENABLE
G3DRENDERSTATE_INTERPOLATIONSTEP = _ivideo.G3DRENDERSTATE_INTERPOLATIONSTEP
G3DRENDERSTATE_MAXPOLYGONSTODRAW = _ivideo.G3DRENDERSTATE_MAXPOLYGONSTODRAW
G3DRENDERSTATE_GOURAUDENABLE = _ivideo.G3DRENDERSTATE_GOURAUDENABLE
G3DRENDERSTATE_EDGES = _ivideo.G3DRENDERSTATE_EDGES
class csGraphics3DCaps(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    minTexHeight = _swig_property(_ivideo.csGraphics3DCaps_minTexHeight_get, _ivideo.csGraphics3DCaps_minTexHeight_set)
    minTexWidth = _swig_property(_ivideo.csGraphics3DCaps_minTexWidth_get, _ivideo.csGraphics3DCaps_minTexWidth_set)
    maxTexHeight = _swig_property(_ivideo.csGraphics3DCaps_maxTexHeight_get, _ivideo.csGraphics3DCaps_maxTexHeight_set)
    maxTexWidth = _swig_property(_ivideo.csGraphics3DCaps_maxTexWidth_get, _ivideo.csGraphics3DCaps_maxTexWidth_set)
    SupportsPointSprites = _swig_property(_ivideo.csGraphics3DCaps_SupportsPointSprites_get, _ivideo.csGraphics3DCaps_SupportsPointSprites_set)
    DestinationAlpha = _swig_property(_ivideo.csGraphics3DCaps_DestinationAlpha_get, _ivideo.csGraphics3DCaps_DestinationAlpha_set)
    StencilShadows = _swig_property(_ivideo.csGraphics3DCaps_StencilShadows_get, _ivideo.csGraphics3DCaps_StencilShadows_set)
    def __init__(self, *args): 
        this = _ivideo.new_csGraphics3DCaps(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ivideo.delete_csGraphics3DCaps
    __del__ = lambda self : None;
csGraphics3DCaps_swigregister = _ivideo.csGraphics3DCaps_swigregister
csGraphics3DCaps_swigregister(csGraphics3DCaps)

CS_MESHTYPE_TRIANGLES = _ivideo.CS_MESHTYPE_TRIANGLES
CS_MESHTYPE_QUADS = _ivideo.CS_MESHTYPE_QUADS
CS_MESHTYPE_TRIANGLESTRIP = _ivideo.CS_MESHTYPE_TRIANGLESTRIP
CS_MESHTYPE_TRIANGLEFAN = _ivideo.CS_MESHTYPE_TRIANGLEFAN
CS_MESHTYPE_POINTS = _ivideo.CS_MESHTYPE_POINTS
CS_MESHTYPE_POINT_SPRITES = _ivideo.CS_MESHTYPE_POINT_SPRITES
CS_MESHTYPE_LINES = _ivideo.CS_MESHTYPE_LINES
CS_MESHTYPE_LINESTRIP = _ivideo.CS_MESHTYPE_LINESTRIP
csSimpleMeshScreenspace = _ivideo.csSimpleMeshScreenspace
CS_OPENPORTAL_ZFILL = _ivideo.CS_OPENPORTAL_ZFILL
CS_OPENPORTAL_MIRROR = _ivideo.CS_OPENPORTAL_MIRROR
CS_OPENPORTAL_FLOAT = _ivideo.CS_OPENPORTAL_FLOAT
class csSimpleRenderMesh(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    meshtype = _swig_property(_ivideo.csSimpleRenderMesh_meshtype_get, _ivideo.csSimpleRenderMesh_meshtype_set)
    indexCount = _swig_property(_ivideo.csSimpleRenderMesh_indexCount_get, _ivideo.csSimpleRenderMesh_indexCount_set)
    indices = _swig_property(_ivideo.csSimpleRenderMesh_indices_get, _ivideo.csSimpleRenderMesh_indices_set)
    indexStart = _swig_property(_ivideo.csSimpleRenderMesh_indexStart_get, _ivideo.csSimpleRenderMesh_indexStart_set)
    indexEnd = _swig_property(_ivideo.csSimpleRenderMesh_indexEnd_get, _ivideo.csSimpleRenderMesh_indexEnd_set)
    vertexCount = _swig_property(_ivideo.csSimpleRenderMesh_vertexCount_get, _ivideo.csSimpleRenderMesh_vertexCount_set)
    vertices = _swig_property(_ivideo.csSimpleRenderMesh_vertices_get, _ivideo.csSimpleRenderMesh_vertices_set)
    texcoords = _swig_property(_ivideo.csSimpleRenderMesh_texcoords_get, _ivideo.csSimpleRenderMesh_texcoords_set)
    colors = _swig_property(_ivideo.csSimpleRenderMesh_colors_get, _ivideo.csSimpleRenderMesh_colors_set)
    texture = _swig_property(_ivideo.csSimpleRenderMesh_texture_get, _ivideo.csSimpleRenderMesh_texture_set)
    shader = _swig_property(_ivideo.csSimpleRenderMesh_shader_get, _ivideo.csSimpleRenderMesh_shader_set)
    dynDomain = _swig_property(_ivideo.csSimpleRenderMesh_dynDomain_get, _ivideo.csSimpleRenderMesh_dynDomain_set)
    alphaType = _swig_property(_ivideo.csSimpleRenderMesh_alphaType_get, _ivideo.csSimpleRenderMesh_alphaType_set)
    z_buf_mode = _swig_property(_ivideo.csSimpleRenderMesh_z_buf_mode_get, _ivideo.csSimpleRenderMesh_z_buf_mode_set)
    mixmode = _swig_property(_ivideo.csSimpleRenderMesh_mixmode_get, _ivideo.csSimpleRenderMesh_mixmode_set)
    object2world = _swig_property(_ivideo.csSimpleRenderMesh_object2world_get, _ivideo.csSimpleRenderMesh_object2world_set)
    renderBuffers = _swig_property(_ivideo.csSimpleRenderMesh_renderBuffers_get, _ivideo.csSimpleRenderMesh_renderBuffers_set)
    def __init__(self, *args): 
        this = _ivideo.new_csSimpleRenderMesh(*args)
        try: self.this.append(this)
        except: self.this = this
    def SetWithGenmeshFactory(*args): return _ivideo.csSimpleRenderMesh_SetWithGenmeshFactory(*args)
    __swig_destroy__ = _ivideo.delete_csSimpleRenderMesh
    __del__ = lambda self : None;
csSimpleRenderMesh_swigregister = _ivideo.csSimpleRenderMesh_swigregister
csSimpleRenderMesh_swigregister(csSimpleRenderMesh)

rtaDepth = _ivideo.rtaDepth
rtaColor0 = _ivideo.rtaColor0
rtaNumAttachments = _ivideo.rtaNumAttachments
class TextureComparisonMode(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    compareNone = _ivideo.TextureComparisonMode_compareNone
    compareR = _ivideo.TextureComparisonMode_compareR
    mode = _swig_property(_ivideo.TextureComparisonMode_mode_get, _ivideo.TextureComparisonMode_mode_set)
    funcLEqual = _ivideo.TextureComparisonMode_funcLEqual
    funcGEqual = _ivideo.TextureComparisonMode_funcGEqual
    function = _swig_property(_ivideo.TextureComparisonMode_function_get, _ivideo.TextureComparisonMode_function_set)
    def __init__(self, *args): 
        this = _ivideo.new_TextureComparisonMode(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ivideo.delete_TextureComparisonMode
    __del__ = lambda self : None;
TextureComparisonMode_swigregister = _ivideo.TextureComparisonMode_swigregister
TextureComparisonMode_swigregister(TextureComparisonMode)

class iGraphics3D(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def Open(*args): return _ivideo.iGraphics3D_Open(*args)
    def Close(*args): return _ivideo.iGraphics3D_Close(*args)
    def GetDriver2D(*args): return _ivideo.iGraphics3D_GetDriver2D(*args)
    def GetTextureManager(*args): return _ivideo.iGraphics3D_GetTextureManager(*args)
    def SetDimensions(*args): return _ivideo.iGraphics3D_SetDimensions(*args)
    def GetWidth(*args): return _ivideo.iGraphics3D_GetWidth(*args)
    def GetHeight(*args): return _ivideo.iGraphics3D_GetHeight(*args)
    def GetCaps(*args): return _ivideo.iGraphics3D_GetCaps(*args)
    def SetPerspectiveCenter(*args): return _ivideo.iGraphics3D_SetPerspectiveCenter(*args)
    def GetPerspectiveCenter(*args): return _ivideo.iGraphics3D_GetPerspectiveCenter(*args)
    def SetPerspectiveAspect(*args): return _ivideo.iGraphics3D_SetPerspectiveAspect(*args)
    def GetPerspectiveAspect(*args): return _ivideo.iGraphics3D_GetPerspectiveAspect(*args)
    def SetRenderTarget(*args): return _ivideo.iGraphics3D_SetRenderTarget(*args)
    def ValidateRenderTargets(*args): return _ivideo.iGraphics3D_ValidateRenderTargets(*args)
    def CanSetRenderTarget(*args): return _ivideo.iGraphics3D_CanSetRenderTarget(*args)
    def GetRenderTarget(*args): return _ivideo.iGraphics3D_GetRenderTarget(*args)
    def UnsetRenderTargets(*args): return _ivideo.iGraphics3D_UnsetRenderTargets(*args)
    def BeginDraw(*args): return _ivideo.iGraphics3D_BeginDraw(*args)
    def FinishDraw(*args): return _ivideo.iGraphics3D_FinishDraw(*args)
    def Print(*args): return _ivideo.iGraphics3D_Print(*args)
    def DrawMesh(*args): return _ivideo.iGraphics3D_DrawMesh(*args)
    def DrawSimpleMesh(*args): return _ivideo.iGraphics3D_DrawSimpleMesh(*args)
    def DrawPixmap(*args): return _ivideo.iGraphics3D_DrawPixmap(*args)
    def DrawLine(*args): return _ivideo.iGraphics3D_DrawLine(*args)
    def ActivateBuffers(*args): return _ivideo.iGraphics3D_ActivateBuffers(*args)
    def DeactivateBuffers(*args): return _ivideo.iGraphics3D_DeactivateBuffers(*args)
    def SetTextureState(*args): return _ivideo.iGraphics3D_SetTextureState(*args)
    def SetClipper(*args): return _ivideo.iGraphics3D_SetClipper(*args)
    def GetClipper(*args): return _ivideo.iGraphics3D_GetClipper(*args)
    def GetClipType(*args): return _ivideo.iGraphics3D_GetClipType(*args)
    def SetNearPlane(*args): return _ivideo.iGraphics3D_SetNearPlane(*args)
    def ResetNearPlane(*args): return _ivideo.iGraphics3D_ResetNearPlane(*args)
    def GetNearPlane(*args): return _ivideo.iGraphics3D_GetNearPlane(*args)
    def HasNearPlane(*args): return _ivideo.iGraphics3D_HasNearPlane(*args)
    def SetRenderState(*args): return _ivideo.iGraphics3D_SetRenderState(*args)
    def GetRenderState(*args): return _ivideo.iGraphics3D_GetRenderState(*args)
    def SetOption(*args): return _ivideo.iGraphics3D_SetOption(*args)
    def SetWriteMask(*args): return _ivideo.iGraphics3D_SetWriteMask(*args)
    def GetWriteMask(*args): return _ivideo.iGraphics3D_GetWriteMask(*args)
    def SetZMode(*args): return _ivideo.iGraphics3D_SetZMode(*args)
    def GetZMode(*args): return _ivideo.iGraphics3D_GetZMode(*args)
    def EnableZOffset(*args): return _ivideo.iGraphics3D_EnableZOffset(*args)
    def DisableZOffset(*args): return _ivideo.iGraphics3D_DisableZOffset(*args)
    def SetShadowState(*args): return _ivideo.iGraphics3D_SetShadowState(*args)
    def GetZBuffValue(*args): return _ivideo.iGraphics3D_GetZBuffValue(*args)
    def OpenPortal(*args): return _ivideo.iGraphics3D_OpenPortal(*args)
    def ClosePortal(*args): return _ivideo.iGraphics3D_ClosePortal(*args)
    def CreateHalo(*args): return _ivideo.iGraphics3D_CreateHalo(*args)
    def SetWorldToCamera(*args): return _ivideo.iGraphics3D_SetWorldToCamera(*args)
    def PerformExtension(*args): return _ivideo.iGraphics3D_PerformExtension(*args)
    def GetWorldToCamera(*args): return _ivideo.iGraphics3D_GetWorldToCamera(*args)
    def GetCurrentDrawFlags(*args): return _ivideo.iGraphics3D_GetCurrentDrawFlags(*args)
    def GetProjectionMatrix(*args): return _ivideo.iGraphics3D_GetProjectionMatrix(*args)
    def SetProjectionMatrix(*args): return _ivideo.iGraphics3D_SetProjectionMatrix(*args)
    def SetTextureComparisonModes(*args): return _ivideo.iGraphics3D_SetTextureComparisonModes(*args)
    def CopyFromRenderTargets(*args): return _ivideo.iGraphics3D_CopyFromRenderTargets(*args)
    def DrawSimpleMeshes(*args): return _ivideo.iGraphics3D_DrawSimpleMeshes(*args)
    scfGetVersion = staticmethod(_ivideo.iGraphics3D_scfGetVersion)
    __swig_destroy__ = _ivideo.delete_iGraphics3D
    __del__ = lambda self : None;
iGraphics3D_swigregister = _ivideo.iGraphics3D_swigregister
iGraphics3D_swigregister(iGraphics3D)
iGraphics3D_scfGetVersion = _ivideo.iGraphics3D_scfGetVersion

csmcNone = _ivideo.csmcNone
csmcArrow = _ivideo.csmcArrow
csmcLens = _ivideo.csmcLens
csmcCross = _ivideo.csmcCross
csmcPen = _ivideo.csmcPen
csmcMove = _ivideo.csmcMove
csmcSizeNWSE = _ivideo.csmcSizeNWSE
csmcSizeNESW = _ivideo.csmcSizeNESW
csmcSizeNS = _ivideo.csmcSizeNS
csmcSizeEW = _ivideo.csmcSizeEW
csmcStop = _ivideo.csmcStop
csmcWait = _ivideo.csmcWait
CS_ALERT_ERROR = _ivideo.CS_ALERT_ERROR
CS_ALERT_WARNING = _ivideo.CS_ALERT_WARNING
CS_ALERT_NOTE = _ivideo.CS_ALERT_NOTE
class iNativeWindowManager(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def Alert(*args): return _ivideo.iNativeWindowManager_Alert(*args)
    __swig_destroy__ = _ivideo.delete_iNativeWindowManager
    __del__ = lambda self : None;
iNativeWindowManager_swigregister = _ivideo.iNativeWindowManager_swigregister
iNativeWindowManager_swigregister(iNativeWindowManager)

class iNativeWindow(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def SetTitle(*args): return _ivideo.iNativeWindow_SetTitle(*args)
    def SetIcon(*args): return _ivideo.iNativeWindow_SetIcon(*args)
    __swig_destroy__ = _ivideo.delete_iNativeWindow
    __del__ = lambda self : None;
iNativeWindow_swigregister = _ivideo.iNativeWindow_swigregister
iNativeWindow_swigregister(iNativeWindow)

cullNormal = _ivideo.cullNormal
cullFlipped = _ivideo.cullFlipped
cullDisabled = _ivideo.cullDisabled
GetFlippedCullMode = _ivideo.GetFlippedCullMode
atfGreaterEqual = _ivideo.atfGreaterEqual
atfGreater = _ivideo.atfGreater
atfLowerEqual = _ivideo.atfLowerEqual
atfLower = _ivideo.atfLower
class AlphaTestOptions(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    threshold = _swig_property(_ivideo.AlphaTestOptions_threshold_get, _ivideo.AlphaTestOptions_threshold_set)
    func = _swig_property(_ivideo.AlphaTestOptions_func_get, _ivideo.AlphaTestOptions_func_set)
    def __init__(self, *args): 
        this = _ivideo.new_AlphaTestOptions(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ivideo.delete_AlphaTestOptions
    __del__ = lambda self : None;
AlphaTestOptions_swigregister = _ivideo.AlphaTestOptions_swigregister
AlphaTestOptions_swigregister(AlphaTestOptions)

class RenderMeshModes(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ivideo.new_RenderMeshModes(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ivideo.delete_RenderMeshModes
    __del__ = lambda self : None;
    z_buf_mode = _swig_property(_ivideo.RenderMeshModes_z_buf_mode_get, _ivideo.RenderMeshModes_z_buf_mode_set)
    mixmode = _swig_property(_ivideo.RenderMeshModes_mixmode_get, _ivideo.RenderMeshModes_mixmode_set)
    renderPrio = _swig_property(_ivideo.RenderMeshModes_renderPrio_get, _ivideo.RenderMeshModes_renderPrio_set)
    cullMode = _swig_property(_ivideo.RenderMeshModes_cullMode_get, _ivideo.RenderMeshModes_cullMode_set)
    alphaType = _swig_property(_ivideo.RenderMeshModes_alphaType_get, _ivideo.RenderMeshModes_alphaType_set)
    alphaTest = _swig_property(_ivideo.RenderMeshModes_alphaTest_get, _ivideo.RenderMeshModes_alphaTest_set)
    zoffset = _swig_property(_ivideo.RenderMeshModes_zoffset_get, _ivideo.RenderMeshModes_zoffset_set)
    buffers = _swig_property(_ivideo.RenderMeshModes_buffers_get, _ivideo.RenderMeshModes_buffers_set)
    doInstancing = _swig_property(_ivideo.RenderMeshModes_doInstancing_get, _ivideo.RenderMeshModes_doInstancing_set)
    instParamNum = _swig_property(_ivideo.RenderMeshModes_instParamNum_get, _ivideo.RenderMeshModes_instParamNum_set)
    instParamsTargets = _swig_property(_ivideo.RenderMeshModes_instParamsTargets_get, _ivideo.RenderMeshModes_instParamsTargets_set)
    instanceNum = _swig_property(_ivideo.RenderMeshModes_instanceNum_get, _ivideo.RenderMeshModes_instanceNum_set)
    instParams = _swig_property(_ivideo.RenderMeshModes_instParams_get, _ivideo.RenderMeshModes_instParams_set)
RenderMeshModes_swigregister = _ivideo.RenderMeshModes_swigregister
RenderMeshModes_swigregister(RenderMeshModes)

class RenderMeshIndexRange(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    start = _swig_property(_ivideo.RenderMeshIndexRange_start_get, _ivideo.RenderMeshIndexRange_start_set)
    end = _swig_property(_ivideo.RenderMeshIndexRange_end_get, _ivideo.RenderMeshIndexRange_end_set)
    def __init__(self, *args): 
        this = _ivideo.new_RenderMeshIndexRange(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ivideo.delete_RenderMeshIndexRange
    __del__ = lambda self : None;
RenderMeshIndexRange_swigregister = _ivideo.RenderMeshIndexRange_swigregister
RenderMeshIndexRange_swigregister(RenderMeshIndexRange)

class CoreRenderMesh(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    db_mesh_name = _swig_property(_ivideo.CoreRenderMesh_db_mesh_name_get)
    def __init__(self, *args): 
        this = _ivideo.new_CoreRenderMesh(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ivideo.delete_CoreRenderMesh
    __del__ = lambda self : None;
    clip_portal = _swig_property(_ivideo.CoreRenderMesh_clip_portal_get, _ivideo.CoreRenderMesh_clip_portal_set)
    clip_plane = _swig_property(_ivideo.CoreRenderMesh_clip_plane_get, _ivideo.CoreRenderMesh_clip_plane_set)
    clip_z_plane = _swig_property(_ivideo.CoreRenderMesh_clip_z_plane_get, _ivideo.CoreRenderMesh_clip_z_plane_set)
    do_mirror = _swig_property(_ivideo.CoreRenderMesh_do_mirror_get, _ivideo.CoreRenderMesh_do_mirror_set)
    meshtype = _swig_property(_ivideo.CoreRenderMesh_meshtype_get, _ivideo.CoreRenderMesh_meshtype_set)
    multiRanges = _swig_property(_ivideo.CoreRenderMesh_multiRanges_get, _ivideo.CoreRenderMesh_multiRanges_set)
    rangesNum = _swig_property(_ivideo.CoreRenderMesh_rangesNum_get, _ivideo.CoreRenderMesh_rangesNum_set)
    indexstart = _swig_property(_ivideo.CoreRenderMesh_indexstart_get, _ivideo.CoreRenderMesh_indexstart_set)
    indexend = _swig_property(_ivideo.CoreRenderMesh_indexend_get, _ivideo.CoreRenderMesh_indexend_set)
    material = _swig_property(_ivideo.CoreRenderMesh_material_get, _ivideo.CoreRenderMesh_material_set)
    object2world = _swig_property(_ivideo.CoreRenderMesh_object2world_get, _ivideo.CoreRenderMesh_object2world_set)
    bbox = _swig_property(_ivideo.CoreRenderMesh_bbox_get, _ivideo.CoreRenderMesh_bbox_set)
CoreRenderMesh_swigregister = _ivideo.CoreRenderMesh_swigregister
CoreRenderMesh_swigregister(CoreRenderMesh)

class RenderMesh(CoreRenderMesh,RenderMeshModes):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ivideo.new_RenderMesh(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ivideo.delete_RenderMesh
    __del__ = lambda self : None;
    geometryInstance = _swig_property(_ivideo.RenderMesh_geometryInstance_get, _ivideo.RenderMesh_geometryInstance_set)
    portal = _swig_property(_ivideo.RenderMesh_portal_get, _ivideo.RenderMesh_portal_set)
    variablecontext = _swig_property(_ivideo.RenderMesh_variablecontext_get, _ivideo.RenderMesh_variablecontext_set)
    worldspace_origin = _swig_property(_ivideo.RenderMesh_worldspace_origin_get, _ivideo.RenderMesh_worldspace_origin_set)
RenderMesh_swigregister = _ivideo.RenderMesh_swigregister
RenderMesh_swigregister(RenderMesh)

CSFONT_LARGE = _ivideo.CSFONT_LARGE
CSFONT_ITALIC = _ivideo.CSFONT_ITALIC
CSFONT_COURIER = _ivideo.CSFONT_COURIER
CSFONT_SMALL = _ivideo.CSFONT_SMALL
CS_FONT_DEFAULT_GLYPH = _ivideo.CS_FONT_DEFAULT_GLYPH
class iFontDeleteNotify(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def BeforeDelete(*args): return _ivideo.iFontDeleteNotify_BeforeDelete(*args)
    __swig_destroy__ = _ivideo.delete_iFontDeleteNotify
    __del__ = lambda self : None;
iFontDeleteNotify_swigregister = _ivideo.iFontDeleteNotify_swigregister
iFontDeleteNotify_swigregister(iFontDeleteNotify)

class csBitmapMetrics(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    width = _swig_property(_ivideo.csBitmapMetrics_width_get, _ivideo.csBitmapMetrics_width_set)
    height = _swig_property(_ivideo.csBitmapMetrics_height_get, _ivideo.csBitmapMetrics_height_set)
    left = _swig_property(_ivideo.csBitmapMetrics_left_get, _ivideo.csBitmapMetrics_left_set)
    top = _swig_property(_ivideo.csBitmapMetrics_top_get, _ivideo.csBitmapMetrics_top_set)
    def __init__(self, *args): 
        this = _ivideo.new_csBitmapMetrics(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ivideo.delete_csBitmapMetrics
    __del__ = lambda self : None;
csBitmapMetrics_swigregister = _ivideo.csBitmapMetrics_swigregister
csBitmapMetrics_swigregister(csBitmapMetrics)

class csGlyphMetrics(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    advance = _swig_property(_ivideo.csGlyphMetrics_advance_get, _ivideo.csGlyphMetrics_advance_set)
    def __init__(self, *args): 
        this = _ivideo.new_csGlyphMetrics(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ivideo.delete_csGlyphMetrics
    __del__ = lambda self : None;
csGlyphMetrics_swigregister = _ivideo.csGlyphMetrics_swigregister
csGlyphMetrics_swigregister(csGlyphMetrics)

class iFont(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def AddDeleteCallback(*args): return _ivideo.iFont_AddDeleteCallback(*args)
    def RemoveDeleteCallback(*args): return _ivideo.iFont_RemoveDeleteCallback(*args)
    def GetSize(*args): return _ivideo.iFont_GetSize(*args)
    def GetMaxSize(*args): return _ivideo.iFont_GetMaxSize(*args)
    def GetGlyphMetrics(*args): return _ivideo.iFont_GetGlyphMetrics(*args)
    def GetGlyphBitmap(*args): return _ivideo.iFont_GetGlyphBitmap(*args)
    def GetGlyphAlphaBitmap(*args): return _ivideo.iFont_GetGlyphAlphaBitmap(*args)
    def GetDimensions(*args): return _ivideo.iFont_GetDimensions(*args)
    def GetLength(*args): return _ivideo.iFont_GetLength(*args)
    def GetDescent(*args): return _ivideo.iFont_GetDescent(*args)
    def GetAscent(*args): return _ivideo.iFont_GetAscent(*args)
    def HasGlyph(*args): return _ivideo.iFont_HasGlyph(*args)
    def GetTextHeight(*args): return _ivideo.iFont_GetTextHeight(*args)
    def GetUnderlinePosition(*args): return _ivideo.iFont_GetUnderlinePosition(*args)
    def GetUnderlineThickness(*args): return _ivideo.iFont_GetUnderlineThickness(*args)
    scfGetVersion = staticmethod(_ivideo.iFont_scfGetVersion)
    __swig_destroy__ = _ivideo.delete_iFont
    __del__ = lambda self : None;
iFont_swigregister = _ivideo.iFont_swigregister
iFont_swigregister(iFont)
iFont_scfGetVersion = _ivideo.iFont_scfGetVersion

class iFontServer(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def LoadFont(*args): return _ivideo.iFontServer_LoadFont(*args)
    def SetWarnOnError(*args): return _ivideo.iFontServer_SetWarnOnError(*args)
    def GetWarnOnError(*args): return _ivideo.iFontServer_GetWarnOnError(*args)
    scfGetVersion = staticmethod(_ivideo.iFontServer_scfGetVersion)
    __swig_destroy__ = _ivideo.delete_iFontServer
    __del__ = lambda self : None;
iFontServer_swigregister = _ivideo.iFontServer_swigregister
iFontServer_swigregister(iFontServer)
iFontServer_scfGetVersion = _ivideo.iFontServer_scfGetVersion

class iHalo(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetWidth(*args): return _ivideo.iHalo_GetWidth(*args)
    def GetHeight(*args): return _ivideo.iHalo_GetHeight(*args)
    def SetColor(*args): return _ivideo.iHalo_SetColor(*args)
    def GetColor(*args): return _ivideo.iHalo_GetColor(*args)
    def Draw(*args): return _ivideo.iHalo_Draw(*args)
    scfGetVersion = staticmethod(_ivideo.iHalo_scfGetVersion)
    __swig_destroy__ = _ivideo.delete_iHalo
    __del__ = lambda self : None;
iHalo_swigregister = _ivideo.iHalo_swigregister
iHalo_swigregister(iHalo)
iHalo_scfGetVersion = _ivideo.iHalo_scfGetVersion

class csShaderVariableStack(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ivideo.new_csShaderVariableStack(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ivideo.delete_csShaderVariableStack
    __del__ = lambda self : None;
    def assign(*args): return _ivideo.csShaderVariableStack_assign(*args)
    def Setup(*args): return _ivideo.csShaderVariableStack_Setup(*args)
    def MakeOwnArray(*args): return _ivideo.csShaderVariableStack_MakeOwnArray(*args)
    def GetSize(*args): return _ivideo.csShaderVariableStack_GetSize(*args)
    def Clear(*args): return _ivideo.csShaderVariableStack_Clear(*args)
    def MergeFront(*args): return _ivideo.csShaderVariableStack_MergeFront(*args)
    def MergeBack(*args): return _ivideo.csShaderVariableStack_MergeBack(*args)
    def Copy(*args): return _ivideo.csShaderVariableStack_Copy(*args)
csShaderVariableStack_swigregister = _ivideo.csShaderVariableStack_swigregister
csShaderVariableStack_swigregister(csShaderVariableStack)

csGetShaderVariableFromStack = _ivideo.csGetShaderVariableFromStack
class iShaderVariableContext(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def AddVariable(*args): return _ivideo.iShaderVariableContext_AddVariable(*args)
    def GetVariable(*args): return _ivideo.iShaderVariableContext_GetVariable(*args)
    def GetVariableAdd(*args): return _ivideo.iShaderVariableContext_GetVariableAdd(*args)
    def GetShaderVariables(*args): return _ivideo.iShaderVariableContext_GetShaderVariables(*args)
    def PushVariables(*args): return _ivideo.iShaderVariableContext_PushVariables(*args)
    def IsEmpty(*args): return _ivideo.iShaderVariableContext_IsEmpty(*args)
    def ReplaceVariable(*args): return _ivideo.iShaderVariableContext_ReplaceVariable(*args)
    def Clear(*args): return _ivideo.iShaderVariableContext_Clear(*args)
    def RemoveVariable(*args): return _ivideo.iShaderVariableContext_RemoveVariable(*args)
    scfGetVersion = staticmethod(_ivideo.iShaderVariableContext_scfGetVersion)
    __swig_destroy__ = _ivideo.delete_iShaderVariableContext
    __del__ = lambda self : None;
iShaderVariableContext_swigregister = _ivideo.iShaderVariableContext_swigregister
iShaderVariableContext_swigregister(iShaderVariableContext)
iShaderVariableContext_scfGetVersion = _ivideo.iShaderVariableContext_scfGetVersion

TagNeutral = _ivideo.TagNeutral
TagForbidden = _ivideo.TagForbidden
TagRequired = _ivideo.TagRequired
class iShaderManager(iShaderVariableContext):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def RegisterShader(*args): return _ivideo.iShaderManager_RegisterShader(*args)
    def UnregisterShader(*args): return _ivideo.iShaderManager_UnregisterShader(*args)
    def UnregisterShaders(*args): return _ivideo.iShaderManager_UnregisterShaders(*args)
    def GetShader(*args): return _ivideo.iShaderManager_GetShader(*args)
    def GetShaders(*args): return _ivideo.iShaderManager_GetShaders(*args)
    def RegisterCompiler(*args): return _ivideo.iShaderManager_RegisterCompiler(*args)
    def GetCompiler(*args): return _ivideo.iShaderManager_GetCompiler(*args)
    def RegisterShaderVariableAccessor(*args): return _ivideo.iShaderManager_RegisterShaderVariableAccessor(*args)
    def UnregisterShaderVariableAccessor(*args): return _ivideo.iShaderManager_UnregisterShaderVariableAccessor(*args)
    def GetShaderVariableAccessor(*args): return _ivideo.iShaderManager_GetShaderVariableAccessor(*args)
    def UnregisterShaderVariableAcessors(*args): return _ivideo.iShaderManager_UnregisterShaderVariableAcessors(*args)
    def GetShaderVariableStack(*args): return _ivideo.iShaderManager_GetShaderVariableStack(*args)
    def SetTagOptions(*args): return _ivideo.iShaderManager_SetTagOptions(*args)
    def GetTagOptions(*args): return _ivideo.iShaderManager_GetTagOptions(*args)
    def GetTags(*args): return _ivideo.iShaderManager_GetTags(*args)
    def GetSVNameStringset(*args): return _ivideo.iShaderManager_GetSVNameStringset(*args)
    def GetShaderCache(*args): return _ivideo.iShaderManager_GetShaderCache(*args)
    cachePriorityLowest = _ivideo.iShaderManager_cachePriorityLowest
    cachePriorityGlobal = _ivideo.iShaderManager_cachePriorityGlobal
    cachePriorityApp = _ivideo.iShaderManager_cachePriorityApp
    cachePriorityUser = _ivideo.iShaderManager_cachePriorityUser
    cachePriorityHighest = _ivideo.iShaderManager_cachePriorityHighest
    def AddSubShaderCache(*args): return _ivideo.iShaderManager_AddSubShaderCache(*args)
    def AddSubCacheDirectory(*args): return _ivideo.iShaderManager_AddSubCacheDirectory(*args)
    def RemoveSubShaderCache(*args): return _ivideo.iShaderManager_RemoveSubShaderCache(*args)
    def RemoveAllSubShaderCaches(*args): return _ivideo.iShaderManager_RemoveAllSubShaderCaches(*args)
    scfGetVersion = staticmethod(_ivideo.iShaderManager_scfGetVersion)
    __swig_destroy__ = _ivideo.delete_iShaderManager
    __del__ = lambda self : None;
iShaderManager_swigregister = _ivideo.iShaderManager_swigregister
iShaderManager_swigregister(iShaderManager)
iShaderManager_scfGetVersion = _ivideo.iShaderManager_scfGetVersion

class csShaderMetadata(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    description = _swig_property(_ivideo.csShaderMetadata_description_get, _ivideo.csShaderMetadata_description_set)
    numberOfLights = _swig_property(_ivideo.csShaderMetadata_numberOfLights_get, _ivideo.csShaderMetadata_numberOfLights_set)
    def __init__(self, *args): 
        this = _ivideo.new_csShaderMetadata(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ivideo.delete_csShaderMetadata
    __del__ = lambda self : None;
csShaderMetadata_swigregister = _ivideo.csShaderMetadata_swigregister
csShaderMetadata_swigregister(csShaderMetadata)

class iShaderPriorityList(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetCount(*args): return _ivideo.iShaderPriorityList_GetCount(*args)
    def GetPriority(*args): return _ivideo.iShaderPriorityList_GetPriority(*args)
    __swig_destroy__ = _ivideo.delete_iShaderPriorityList
    __del__ = lambda self : None;
iShaderPriorityList_swigregister = _ivideo.iShaderPriorityList_swigregister
iShaderPriorityList_swigregister(iShaderPriorityList)

class iShader(iShaderVariableContext):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def QueryObject(*args): return _ivideo.iShader_QueryObject(*args)
    def GetFileName(*args): return _ivideo.iShader_GetFileName(*args)
    def SetFileName(*args): return _ivideo.iShader_SetFileName(*args)
    def GetTicket(*args): return _ivideo.iShader_GetTicket(*args)
    def GetNumberOfPasses(*args): return _ivideo.iShader_GetNumberOfPasses(*args)
    def ActivatePass(*args): return _ivideo.iShader_ActivatePass(*args)
    def SetupPass(*args): return _ivideo.iShader_SetupPass(*args)
    def TeardownPass(*args): return _ivideo.iShader_TeardownPass(*args)
    def DeactivatePass(*args): return _ivideo.iShader_DeactivatePass(*args)
    svuTextures = _ivideo.iShader_svuTextures
    svuBuffers = _ivideo.iShader_svuBuffers
    svuVProc = _ivideo.iShader_svuVProc
    svuVP = _ivideo.iShader_svuVP
    svuFP = _ivideo.iShader_svuFP
    svuAll = _ivideo.iShader_svuAll
    def GetUsedShaderVars(*args): return _ivideo.iShader_GetUsedShaderVars(*args)
    def GetMetadata(*args): return _ivideo.iShader_GetMetadata(*args)
    def PushShaderVariables(*args): return _ivideo.iShader_PushShaderVariables(*args)
    def GetPrioritiesTicket(*args): return _ivideo.iShader_GetPrioritiesTicket(*args)
    def GetAvailablePriorities(*args): return _ivideo.iShader_GetAvailablePriorities(*args)
    def GetTechniqueMetadata(*args): return _ivideo.iShader_GetTechniqueMetadata(*args)
    def ForceTechnique(*args): return _ivideo.iShader_ForceTechnique(*args)
    scfGetVersion = staticmethod(_ivideo.iShader_scfGetVersion)
    __swig_destroy__ = _ivideo.delete_iShader
    __del__ = lambda self : None;
iShader_swigregister = _ivideo.iShader_swigregister
iShader_swigregister(iShader)
iShader_scfGetVersion = _ivideo.iShader_scfGetVersion

class iShaderCompiler(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetName(*args): return _ivideo.iShaderCompiler_GetName(*args)
    def CompileShader(*args): return _ivideo.iShaderCompiler_CompileShader(*args)
    def ValidateTemplate(*args): return _ivideo.iShaderCompiler_ValidateTemplate(*args)
    def IsTemplateToCompiler(*args): return _ivideo.iShaderCompiler_IsTemplateToCompiler(*args)
    def GetPriorities(*args): return _ivideo.iShaderCompiler_GetPriorities(*args)
    def PrecacheShader(*args): return _ivideo.iShaderCompiler_PrecacheShader(*args)
    __swig_destroy__ = _ivideo.delete_iShaderCompiler
    __del__ = lambda self : None;
iShaderCompiler_swigregister = _ivideo.iShaderCompiler_swigregister
iShaderCompiler_swigregister(iShaderCompiler)

class csRefShaderStringIDHash(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ivideo.new_csRefShaderStringIDHash(*args)
        try: self.this.append(this)
        except: self.this = this
    def Put(*args): return _ivideo.csRefShaderStringIDHash_Put(*args)
    def GetAll(*args): return _ivideo.csRefShaderStringIDHash_GetAll(*args)
    def PutUnique(*args): return _ivideo.csRefShaderStringIDHash_PutUnique(*args)
    def Contains(*args): return _ivideo.csRefShaderStringIDHash_Contains(*args)
    def In(*args): return _ivideo.csRefShaderStringIDHash_In(*args)
    def GetElementPointer(*args): return _ivideo.csRefShaderStringIDHash_GetElementPointer(*args)
    def Get(*args): return _ivideo.csRefShaderStringIDHash_Get(*args)
    def GetOrCreate(*args): return _ivideo.csRefShaderStringIDHash_GetOrCreate(*args)
    def Empty(*args): return _ivideo.csRefShaderStringIDHash_Empty(*args)
    def DeleteAll(*args): return _ivideo.csRefShaderStringIDHash_DeleteAll(*args)
    def Delete(*args): return _ivideo.csRefShaderStringIDHash_Delete(*args)
    def GetSize(*args): return _ivideo.csRefShaderStringIDHash_GetSize(*args)
    def IsEmpty(*args): return _ivideo.csRefShaderStringIDHash_IsEmpty(*args)
    def __getitem__(*args): return _ivideo.csRefShaderStringIDHash___getitem__(*args)
    def __delitem__(*args): return _ivideo.csRefShaderStringIDHash___delitem__(*args)
    def clear(*args): return _ivideo.csRefShaderStringIDHash_clear(*args)
    def __nonzero__(*args): return _ivideo.csRefShaderStringIDHash___nonzero__(*args)
    def __setitem__(*args): return _ivideo.csRefShaderStringIDHash___setitem__(*args)
    def __len__(*args): return _ivideo.csRefShaderStringIDHash___len__(*args)
    __swig_destroy__ = _ivideo.delete_csRefShaderStringIDHash
    __del__ = lambda self : None;
csRefShaderStringIDHash_swigregister = _ivideo.csRefShaderStringIDHash_swigregister
csRefShaderStringIDHash_swigregister(csRefShaderStringIDHash)

class iShaderArray(core.CustomAllocated):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _ivideo.delete_iShaderArray
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _ivideo.new_iShaderArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetSize(*args): return _ivideo.iShaderArray_GetSize(*args)
    def Get(*args): return _ivideo.iShaderArray_Get(*args)
    def Put(*args): return _ivideo.iShaderArray_Put(*args)
    def Push(*args): return _ivideo.iShaderArray_Push(*args)
    def Merge(*args): return _ivideo.iShaderArray_Merge(*args)
    def MergeSmart(*args): return _ivideo.iShaderArray_MergeSmart(*args)
    def Pop(*args): return _ivideo.iShaderArray_Pop(*args)
    def Top(*args): return _ivideo.iShaderArray_Top(*args)
    def Insert(*args): return _ivideo.iShaderArray_Insert(*args)
    def Contains(*args): return _ivideo.iShaderArray_Contains(*args)
    def DeleteAll(*args): return _ivideo.iShaderArray_DeleteAll(*args)
    def Truncate(*args): return _ivideo.iShaderArray_Truncate(*args)
    def Empty(*args): return _ivideo.iShaderArray_Empty(*args)
    def IsEmpty(*args): return _ivideo.iShaderArray_IsEmpty(*args)
    def SetMinimalCapacity(*args): return _ivideo.iShaderArray_SetMinimalCapacity(*args)
    def DeleteIndex(*args): return _ivideo.iShaderArray_DeleteIndex(*args)
    def DeleteIndexFast(*args): return _ivideo.iShaderArray_DeleteIndexFast(*args)
    def DeleteRange(*args): return _ivideo.iShaderArray_DeleteRange(*args)
    def __eq__(*args): return _ivideo.iShaderArray___eq__(*args)
    def __ne__(*args): return _ivideo.iShaderArray___ne__(*args)
    def GetAllocator(*args): return _ivideo.iShaderArray_GetAllocator(*args)
iShaderArray_swigregister = _ivideo.iShaderArray_swigregister
iShaderArray_swigregister(iShaderArray)

class iTextureHandle(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetFlags(*args): return _ivideo.iTextureHandle_GetFlags(*args)
    def SetKeyColor(*args): return _ivideo.iTextureHandle_SetKeyColor(*args)
    def GetKeyColorStatus(*args): return _ivideo.iTextureHandle_GetKeyColorStatus(*args)
    def GetKeyColor(*args): return _ivideo.iTextureHandle_GetKeyColor(*args)
    CS_TEXTURE_CUBE_POS_X = _ivideo.iTextureHandle_CS_TEXTURE_CUBE_POS_X
    CS_TEXTURE_CUBE_NEG_X = _ivideo.iTextureHandle_CS_TEXTURE_CUBE_NEG_X
    CS_TEXTURE_CUBE_POS_Y = _ivideo.iTextureHandle_CS_TEXTURE_CUBE_POS_Y
    CS_TEXTURE_CUBE_NEG_Y = _ivideo.iTextureHandle_CS_TEXTURE_CUBE_NEG_Y
    CS_TEXTURE_CUBE_POS_Z = _ivideo.iTextureHandle_CS_TEXTURE_CUBE_POS_Z
    CS_TEXTURE_CUBE_NEG_Z = _ivideo.iTextureHandle_CS_TEXTURE_CUBE_NEG_Z
    def GetRendererDimensions(*args): return _ivideo.iTextureHandle_GetRendererDimensions(*args)
    def GetOriginalDimensions(*args): return _ivideo.iTextureHandle_GetOriginalDimensions(*args)
    RGBA8888 = _ivideo.iTextureHandle_RGBA8888
    BGRA8888 = _ivideo.iTextureHandle_BGRA8888
    def Blit(*args): return _ivideo.iTextureHandle_Blit(*args)
    def GetImageName(*args): return _ivideo.iTextureHandle_GetImageName(*args)
    def GetAlphaType(*args): return _ivideo.iTextureHandle_GetAlphaType(*args)
    def Precache(*args): return _ivideo.iTextureHandle_Precache(*args)
    def IsPrecached(*args): return _ivideo.iTextureHandle_IsPrecached(*args)
    def SetTextureClass(*args): return _ivideo.iTextureHandle_SetTextureClass(*args)
    def GetTextureClass(*args): return _ivideo.iTextureHandle_GetTextureClass(*args)
    def SetAlphaType(*args): return _ivideo.iTextureHandle_SetAlphaType(*args)
    texType1D = _ivideo.iTextureHandle_texType1D
    texType2D = _ivideo.iTextureHandle_texType2D
    texType3D = _ivideo.iTextureHandle_texType3D
    texTypeCube = _ivideo.iTextureHandle_texTypeCube
    texTypeRect = _ivideo.iTextureHandle_texTypeRect
    def GetTextureType(*args): return _ivideo.iTextureHandle_GetTextureType(*args)
    blitbufReadable = _ivideo.iTextureHandle_blitbufReadable
    blitbufRetainArea = _ivideo.iTextureHandle_blitbufRetainArea
    def QueryBlitBuffer(*args): return _ivideo.iTextureHandle_QueryBlitBuffer(*args)
    def ApplyBlitBuffer(*args): return _ivideo.iTextureHandle_ApplyBlitBuffer(*args)
    natureIndirect = _ivideo.iTextureHandle_natureIndirect
    natureDirect = _ivideo.iTextureHandle_natureDirect
    def GetBufferNature(*args): return _ivideo.iTextureHandle_GetBufferNature(*args)
    def SetMipmapLimits(*args): return _ivideo.iTextureHandle_SetMipmapLimits(*args)
    def GetMipmapLimits(*args): return _ivideo.iTextureHandle_GetMipmapLimits(*args)
    def Readback(*args): return _ivideo.iTextureHandle_Readback(*args)
    scfGetVersion = staticmethod(_ivideo.iTextureHandle_scfGetVersion)
    __swig_destroy__ = _ivideo.delete_iTextureHandle
    __del__ = lambda self : None;
iTextureHandle_swigregister = _ivideo.iTextureHandle_swigregister
iTextureHandle_swigregister(iTextureHandle)
iTextureHandle_scfGetVersion = _ivideo.iTextureHandle_scfGetVersion

CS_TEXTURE_2D = _ivideo.CS_TEXTURE_2D
CS_TEXTURE_3D = _ivideo.CS_TEXTURE_3D
CS_TEXTURE_NOMIPMAPS = _ivideo.CS_TEXTURE_NOMIPMAPS
CS_TEXTURE_CLAMP = _ivideo.CS_TEXTURE_CLAMP
CS_TEXTURE_NOFILTER = _ivideo.CS_TEXTURE_NOFILTER
CS_TEXTURE_NPOTS = _ivideo.CS_TEXTURE_NPOTS
CS_TEXTURE_SCALE_UP = _ivideo.CS_TEXTURE_SCALE_UP
CS_TEXTURE_SCALE_DOWN = _ivideo.CS_TEXTURE_SCALE_DOWN
CS_TEXTURE_CREATE_CLEAR = _ivideo.CS_TEXTURE_CREATE_CLEAR
class iTextureManager(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def RegisterTexture(*args): return _ivideo.iTextureManager_RegisterTexture(*args)
    def GetTextureFormat(*args): return _ivideo.iTextureManager_GetTextureFormat(*args)
    def GetMaxTextureSize(*args): return _ivideo.iTextureManager_GetMaxTextureSize(*args)
    def CreateTexture(*args): return _ivideo.iTextureManager_CreateTexture(*args)
    scfGetVersion = staticmethod(_ivideo.iTextureManager_scfGetVersion)
    __swig_destroy__ = _ivideo.delete_iTextureManager
    __del__ = lambda self : None;
iTextureManager_swigregister = _ivideo.iTextureManager_swigregister
iTextureManager_swigregister(iTextureManager)
iTextureManager_scfGetVersion = _ivideo.iTextureManager_scfGetVersion

CS_MATERIAL_VARNAME_FLATCOLOR = _ivideo.CS_MATERIAL_VARNAME_FLATCOLOR
CS_MATERIAL_TEXTURE_DIFFUSE = _ivideo.CS_MATERIAL_TEXTURE_DIFFUSE
class iMaterial(iShaderVariableContext):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def SetShader(*args): return _ivideo.iMaterial_SetShader(*args)
    def GetShader(*args): return _ivideo.iMaterial_GetShader(*args)
    def GetShaders(*args): return _ivideo.iMaterial_GetShaders(*args)
    def GetTexture(*args): return _ivideo.iMaterial_GetTexture(*args)
    def GetFirstShader(*args): return _ivideo.iMaterial_GetFirstShader(*args)
    scfGetVersion = staticmethod(_ivideo.iMaterial_scfGetVersion)
    __swig_destroy__ = _ivideo.delete_iMaterial
    __del__ = lambda self : None;
iMaterial_swigregister = _ivideo.iMaterial_swigregister
iMaterial_swigregister(iMaterial)
iMaterial_scfGetVersion = _ivideo.iMaterial_scfGetVersion

CS_FX_SETALPHA = _ivideo.CS_FX_SETALPHA
CS_FX_SETALPHA_INT = _ivideo.CS_FX_SETALPHA_INT
CS_REQUEST_PLUGIN = core.CS_REQUEST_PLUGIN
def CS_REQUEST_NULL3D ():
  return CS_REQUEST_PLUGIN("crystalspace.graphics3d.null", iGraphics3D)

def CS_REQUEST_SOFTWARE3D ():
  return CS_REQUEST_PLUGIN("crystalspace.graphics3d.software", iGraphics3D)

def CS_REQUEST_OPENGL3D ():
  return CS_REQUEST_PLUGIN("crystalspace.graphics3d.opengl", iGraphics3D)

def CS_REQUEST_FONTSERVER ():
  return CS_REQUEST_PLUGIN("crystalspace.font.server.default", iFontServer)




