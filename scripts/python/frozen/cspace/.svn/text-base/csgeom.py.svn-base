# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.

import _csgeom
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import core
_SetSCFPointer = _csgeom._SetSCFPointer
_GetSCFPointer = _csgeom._GetSCFPointer
if not "core" in dir():
    core = __import__("cspace").__dict__["core"]
core.AddSCFLink(_SetSCFPointer)
CSMutableArrayHelper = core.CSMutableArrayHelper

class csVector2(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    x = _swig_property(_csgeom.csVector2_x_get, _csgeom.csVector2_x_set)
    y = _swig_property(_csgeom.csVector2_y_get, _csgeom.csVector2_y_set)
    def __init__(self, *args): 
        this = _csgeom.new_csVector2(*args)
        try: self.this.append(this)
        except: self.this = this
    def Description(*args): return _csgeom.csVector2_Description(*args)
    def Set(*args): return _csgeom.csVector2_Set(*args)
    def Get(*args): return _csgeom.csVector2_Get(*args)
    def Norm(*args): return _csgeom.csVector2_Norm(*args)
    def SquaredNorm(*args): return _csgeom.csVector2_SquaredNorm(*args)
    def Rotate(*args): return _csgeom.csVector2_Rotate(*args)
    def IsLeft(*args): return _csgeom.csVector2_IsLeft(*args)
    def __iadd__(*args): return _csgeom.csVector2___iadd__(*args)
    def __isub__(*args): return _csgeom.csVector2___isub__(*args)
    def __imul__(*args): return _csgeom.csVector2___imul__(*args)
    def __idiv__(*args): return _csgeom.csVector2___idiv__(*args)
    def __pos__(*args): return _csgeom.csVector2___pos__(*args)
    def __neg__(*args): return _csgeom.csVector2___neg__(*args)
    def __add__(*args): return _csgeom.csVector2___add__(*args)
    def __sub__(*args): return _csgeom.csVector2___sub__(*args)
    def __mul__(*args): return _csgeom.csVector2___mul__(*args)
    def __div__(*args): return _csgeom.csVector2___div__(*args)
    def __eq__(*args): return _csgeom.csVector2___eq__(*args)
    def __ne__(*args): return _csgeom.csVector2___ne__(*args)
    def __lt__(*args): return _csgeom.csVector2___lt__(*args)
    def __gt__(*args): return _csgeom.csVector2___gt__(*args)
    def __rmul__(*args): return _csgeom.csVector2___rmul__(*args)
    def __abs__(*args): return _csgeom.csVector2___abs__(*args)
    def __getitem__(*args): return _csgeom.csVector2___getitem__(*args)
    def __setitem__(*args): return _csgeom.csVector2___setitem__(*args)
    def __str__(self):
      return "%f,%f"%(self.x,self.y)
    def __repr__(self):
      return "cspace.csVector2(%s)"%(self)

    __swig_destroy__ = _csgeom.delete_csVector2
    __del__ = lambda self : None;
csVector2_swigregister = _csgeom.csVector2_swigregister
csVector2_swigregister(csVector2)

CS_AXIS_NONE = _csgeom.CS_AXIS_NONE
CS_AXIS_X = _csgeom.CS_AXIS_X
CS_AXIS_Y = _csgeom.CS_AXIS_Y
CS_AXIS_Z = _csgeom.CS_AXIS_Z
CS_AXIS_W = _csgeom.CS_AXIS_W
class csVector3(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    x = _swig_property(_csgeom.csVector3_x_get, _csgeom.csVector3_x_set)
    y = _swig_property(_csgeom.csVector3_y_get, _csgeom.csVector3_y_set)
    z = _swig_property(_csgeom.csVector3_z_get, _csgeom.csVector3_z_set)
    def __init__(self, *args): 
        this = _csgeom.new_csVector3(*args)
        try: self.this.append(this)
        except: self.this = this
    def Description(*args): return _csgeom.csVector3_Description(*args)
    def __iadd__(*args): return _csgeom.csVector3___iadd__(*args)
    def __isub__(*args): return _csgeom.csVector3___isub__(*args)
    def __pos__(*args): return _csgeom.csVector3___pos__(*args)
    def __neg__(*args): return _csgeom.csVector3___neg__(*args)
    def Set(*args): return _csgeom.csVector3_Set(*args)
    def Get(*args): return _csgeom.csVector3_Get(*args)
    def Norm(*args): return _csgeom.csVector3_Norm(*args)
    def SquaredNorm(*args): return _csgeom.csVector3_SquaredNorm(*args)
    def Unit(*args): return _csgeom.csVector3_Unit(*args)
    def Normalize(*args): return _csgeom.csVector3_Normalize(*args)
    def IsZero(*args): return _csgeom.csVector3_IsZero(*args)
    def UnitAxisClamped(*args): return _csgeom.csVector3_UnitAxisClamped(*args)
    def DominantAxis(*args): return _csgeom.csVector3_DominantAxis(*args)
    def __add__(*args): return _csgeom.csVector3___add__(*args)
    def __sub__(*args): return _csgeom.csVector3___sub__(*args)
    def __mul__(*args): return _csgeom.csVector3___mul__(*args)
    def __eq__(*args): return _csgeom.csVector3___eq__(*args)
    def __ne__(*args): return _csgeom.csVector3___ne__(*args)
    def __lt__(*args): return _csgeom.csVector3___lt__(*args)
    def __gt__(*args): return _csgeom.csVector3___gt__(*args)
    def __imul__(*args): return _csgeom.csVector3___imul__(*args)
    def __idiv__(*args): return _csgeom.csVector3___idiv__(*args)
    def __div__(*args): return _csgeom.csVector3___div__(*args)
    def project(*args): return _csgeom.csVector3_project(*args)
    def Cross(*args): return _csgeom.csVector3_Cross(*args)
    def __rmul__(*args): return _csgeom.csVector3___rmul__(*args)
    def __abs__(*args): return _csgeom.csVector3___abs__(*args)
    def __getitem__(*args): return _csgeom.csVector3___getitem__(*args)
    def __setitem__(*args): return _csgeom.csVector3___setitem__(*args)
    def __nonzero__(*args): return _csgeom.csVector3___nonzero__(*args)
    def __str__(self):
      return "%f,%f,%f"%(self.x,self.y,self.z)
    def __repr__(self):
      return "cspace.csVector3(%s)"%(self)

    __swig_destroy__ = _csgeom.delete_csVector3
    __del__ = lambda self : None;
csVector3_swigregister = _csgeom.csVector3_swigregister
csVector3_swigregister(csVector3)

class csVector3ArrayReadOnly(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetSize(*args): return _csgeom.csVector3ArrayReadOnly_GetSize(*args)
    def Get(*args): return _csgeom.csVector3ArrayReadOnly_Get(*args)
    def Top(*args): return _csgeom.csVector3ArrayReadOnly_Top(*args)
    def Find(*args): return _csgeom.csVector3ArrayReadOnly_Find(*args)
    def GetIndex(*args): return _csgeom.csVector3ArrayReadOnly_GetIndex(*args)
    def IsEmpty(*args): return _csgeom.csVector3ArrayReadOnly_IsEmpty(*args)
    def GetAll(*args): return _csgeom.csVector3ArrayReadOnly_GetAll(*args)
    __swig_destroy__ = _csgeom.delete_csVector3ArrayReadOnly
    __del__ = lambda self : None;
csVector3ArrayReadOnly_swigregister = _csgeom.csVector3ArrayReadOnly_swigregister
csVector3ArrayReadOnly_swigregister(csVector3ArrayReadOnly)

class csVector3ArrayChangeElements(csVector3ArrayReadOnly):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def Get(*args): return _csgeom.csVector3ArrayChangeElements_Get(*args)
    def Top(*args): return _csgeom.csVector3ArrayChangeElements_Top(*args)
    __swig_destroy__ = _csgeom.delete_csVector3ArrayChangeElements
    __del__ = lambda self : None;
csVector3ArrayChangeElements_swigregister = _csgeom.csVector3ArrayChangeElements_swigregister
csVector3ArrayChangeElements_swigregister(csVector3ArrayChangeElements)

class csVector3ArrayChangeAll(csVector3ArrayChangeElements):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def SetSize(*args): return _csgeom.csVector3ArrayChangeAll_SetSize(*args)
    def GetExtend(*args): return _csgeom.csVector3ArrayChangeAll_GetExtend(*args)
    def Put(*args): return _csgeom.csVector3ArrayChangeAll_Put(*args)
    def Push(*args): return _csgeom.csVector3ArrayChangeAll_Push(*args)
    def PushSmart(*args): return _csgeom.csVector3ArrayChangeAll_PushSmart(*args)
    def Pop(*args): return _csgeom.csVector3ArrayChangeAll_Pop(*args)
    def Insert(*args): return _csgeom.csVector3ArrayChangeAll_Insert(*args)
    def DeleteAll(*args): return _csgeom.csVector3ArrayChangeAll_DeleteAll(*args)
    def Truncate(*args): return _csgeom.csVector3ArrayChangeAll_Truncate(*args)
    def Empty(*args): return _csgeom.csVector3ArrayChangeAll_Empty(*args)
    def DeleteIndex(*args): return _csgeom.csVector3ArrayChangeAll_DeleteIndex(*args)
    def DeleteIndexFast(*args): return _csgeom.csVector3ArrayChangeAll_DeleteIndexFast(*args)
    def Delete(*args): return _csgeom.csVector3ArrayChangeAll_Delete(*args)
    __swig_destroy__ = _csgeom.delete_csVector3ArrayChangeAll
    __del__ = lambda self : None;
csVector3ArrayChangeAll_swigregister = _csgeom.csVector3ArrayChangeAll_swigregister
csVector3ArrayChangeAll_swigregister(csVector3ArrayChangeAll)

class csVector4Float(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    x = _swig_property(_csgeom.csVector4Float_x_get, _csgeom.csVector4Float_x_set)
    y = _swig_property(_csgeom.csVector4Float_y_get, _csgeom.csVector4Float_y_set)
    z = _swig_property(_csgeom.csVector4Float_z_get, _csgeom.csVector4Float_z_set)
    w = _swig_property(_csgeom.csVector4Float_w_get, _csgeom.csVector4Float_w_set)
    def __init__(self, *args): 
        this = _csgeom.new_csVector4Float(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csVector4Float
    __del__ = lambda self : None;
csVector4Float_swigregister = _csgeom.csVector4Float_swigregister
csVector4Float_swigregister(csVector4Float)

class csVector4(csVector4Float):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csVector4(*args)
        try: self.this.append(this)
        except: self.this = this
    def assign(*args): return _csgeom.csVector4_assign(*args)
    def __add__(*args): return _csgeom.csVector4___add__(*args)
    def __sub__(*args): return _csgeom.csVector4___sub__(*args)
    def __mul__(*args): return _csgeom.csVector4___mul__(*args)
    def __div__(*args): return _csgeom.csVector4___div__(*args)
    def __eq__(*args): return _csgeom.csVector4___eq__(*args)
    def __ne__(*args): return _csgeom.csVector4___ne__(*args)
    def __lt__(*args): return _csgeom.csVector4___lt__(*args)
    def __gt__(*args): return _csgeom.csVector4___gt__(*args)
    def __rmul__(*args): return _csgeom.csVector4___rmul__(*args)
    def __abs__(*args): return _csgeom.csVector4___abs__(*args)
    def __getitem__(*args): return _csgeom.csVector4___getitem__(*args)
    def __setitem__(*args): return _csgeom.csVector4___setitem__(*args)
    def __nonzero__(*args): return _csgeom.csVector4___nonzero__(*args)
    def __str__(self):
      return "%f,%f,%f,%f"%(self.x,self.y,self.z,self.w)
    def __repr__(self):
      return "cspace.csVector4(%s)"%(self)

    __swig_destroy__ = _csgeom.delete_csVector4
    __del__ = lambda self : None;
csVector4_swigregister = _csgeom.csVector4_swigregister
csVector4_swigregister(csVector4)

class csMatrix2(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    m11 = _swig_property(_csgeom.csMatrix2_m11_get, _csgeom.csMatrix2_m11_set)
    m12 = _swig_property(_csgeom.csMatrix2_m12_get, _csgeom.csMatrix2_m12_set)
    m21 = _swig_property(_csgeom.csMatrix2_m21_get, _csgeom.csMatrix2_m21_set)
    m22 = _swig_property(_csgeom.csMatrix2_m22_get, _csgeom.csMatrix2_m22_set)
    def __init__(self, *args): 
        this = _csgeom.new_csMatrix2(*args)
        try: self.this.append(this)
        except: self.this = this
    def Row1(*args): return _csgeom.csMatrix2_Row1(*args)
    def Row2(*args): return _csgeom.csMatrix2_Row2(*args)
    def Col1(*args): return _csgeom.csMatrix2_Col1(*args)
    def Col2(*args): return _csgeom.csMatrix2_Col2(*args)
    def Set(*args): return _csgeom.csMatrix2_Set(*args)
    def __iadd__(*args): return _csgeom.csMatrix2___iadd__(*args)
    def __isub__(*args): return _csgeom.csMatrix2___isub__(*args)
    def __imul__(*args): return _csgeom.csMatrix2___imul__(*args)
    def __idiv__(*args): return _csgeom.csMatrix2___idiv__(*args)
    def __pos__(*args): return _csgeom.csMatrix2___pos__(*args)
    def __neg__(*args): return _csgeom.csMatrix2___neg__(*args)
    def Transpose(*args): return _csgeom.csMatrix2_Transpose(*args)
    def GetTranspose(*args): return _csgeom.csMatrix2_GetTranspose(*args)
    def GetInverse(*args): return _csgeom.csMatrix2_GetInverse(*args)
    def Invert(*args): return _csgeom.csMatrix2_Invert(*args)
    def Determinant(*args): return _csgeom.csMatrix2_Determinant(*args)
    def Identity(*args): return _csgeom.csMatrix2_Identity(*args)
    def __str__(s):
      return "%f,%f\n%f,%f"%(s.m11,s.m12,s.m21,s.m22)
    def __repr__(s):
      return "cspace.csMatrix2(%f,%f,%f,%f)"%(s.m11,s.m12,s.m21,s.m22)

    __swig_destroy__ = _csgeom.delete_csMatrix2
    __del__ = lambda self : None;
csMatrix2_swigregister = _csgeom.csMatrix2_swigregister
csMatrix2_swigregister(csMatrix2)

class csMatrix3(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    m11 = _swig_property(_csgeom.csMatrix3_m11_get, _csgeom.csMatrix3_m11_set)
    m12 = _swig_property(_csgeom.csMatrix3_m12_get, _csgeom.csMatrix3_m12_set)
    m13 = _swig_property(_csgeom.csMatrix3_m13_get, _csgeom.csMatrix3_m13_set)
    m21 = _swig_property(_csgeom.csMatrix3_m21_get, _csgeom.csMatrix3_m21_set)
    m22 = _swig_property(_csgeom.csMatrix3_m22_get, _csgeom.csMatrix3_m22_set)
    m23 = _swig_property(_csgeom.csMatrix3_m23_get, _csgeom.csMatrix3_m23_set)
    m31 = _swig_property(_csgeom.csMatrix3_m31_get, _csgeom.csMatrix3_m31_set)
    m32 = _swig_property(_csgeom.csMatrix3_m32_get, _csgeom.csMatrix3_m32_set)
    m33 = _swig_property(_csgeom.csMatrix3_m33_get, _csgeom.csMatrix3_m33_set)
    def __init__(self, *args): 
        this = _csgeom.new_csMatrix3(*args)
        try: self.this.append(this)
        except: self.this = this
    def Description(*args): return _csgeom.csMatrix3_Description(*args)
    def Row1(*args): return _csgeom.csMatrix3_Row1(*args)
    def Row2(*args): return _csgeom.csMatrix3_Row2(*args)
    def Row3(*args): return _csgeom.csMatrix3_Row3(*args)
    def Row(*args): return _csgeom.csMatrix3_Row(*args)
    def Col1(*args): return _csgeom.csMatrix3_Col1(*args)
    def Col2(*args): return _csgeom.csMatrix3_Col2(*args)
    def Col3(*args): return _csgeom.csMatrix3_Col3(*args)
    def Col(*args): return _csgeom.csMatrix3_Col(*args)
    def Set(*args): return _csgeom.csMatrix3_Set(*args)
    def assign(*args): return _csgeom.csMatrix3_assign(*args)
    def __iadd__(*args): return _csgeom.csMatrix3___iadd__(*args)
    def __isub__(*args): return _csgeom.csMatrix3___isub__(*args)
    def __idiv__(*args): return _csgeom.csMatrix3___idiv__(*args)
    def __pos__(*args): return _csgeom.csMatrix3___pos__(*args)
    def __neg__(*args): return _csgeom.csMatrix3___neg__(*args)
    def Transpose(*args): return _csgeom.csMatrix3_Transpose(*args)
    def GetTranspose(*args): return _csgeom.csMatrix3_GetTranspose(*args)
    def GetInverse(*args): return _csgeom.csMatrix3_GetInverse(*args)
    def Invert(*args): return _csgeom.csMatrix3_Invert(*args)
    def Determinant(*args): return _csgeom.csMatrix3_Determinant(*args)
    def Identity(*args): return _csgeom.csMatrix3_Identity(*args)
    def IsIdentity(*args): return _csgeom.csMatrix3_IsIdentity(*args)
    def __add__(*args): return _csgeom.csMatrix3___add__(*args)
    def __sub__(*args): return _csgeom.csMatrix3___sub__(*args)
    def __div__(*args): return _csgeom.csMatrix3___div__(*args)
    def __eq__(*args): return _csgeom.csMatrix3___eq__(*args)
    def __ne__(*args): return _csgeom.csMatrix3___ne__(*args)
    def __lt__(*args): return _csgeom.csMatrix3___lt__(*args)
    def __mul__(*args): return _csgeom.csMatrix3___mul__(*args)
    def __imul__(*args): return _csgeom.csMatrix3___imul__(*args)
    def __rmul__(*args): return _csgeom.csMatrix3___rmul__(*args)
    def __str__(s):
      return "%f,%f,%f\n%f,%f,%f\n%f,%f,%f"%(s.m11,s.m12,s.m13,
                s.m21,s.m22,s.m23,s.m31,s.m32,s.m33)
    def __repr__(s):
      return "cspace.csMatrix3(%f,%f,%f,%f,%f,%f,%f,%f,%f)"%(s.m11,s.m12,
                s.m13,s.m21,s.m22,s.m23,s.m31,s.m32,s.m33)

    __swig_destroy__ = _csgeom.delete_csMatrix3
    __del__ = lambda self : None;
csMatrix3_swigregister = _csgeom.csMatrix3_swigregister
csMatrix3_swigregister(csMatrix3)

class csXRotMatrix3(csMatrix3):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csXRotMatrix3(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csXRotMatrix3
    __del__ = lambda self : None;
csXRotMatrix3_swigregister = _csgeom.csXRotMatrix3_swigregister
csXRotMatrix3_swigregister(csXRotMatrix3)

class csYRotMatrix3(csMatrix3):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csYRotMatrix3(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csYRotMatrix3
    __del__ = lambda self : None;
csYRotMatrix3_swigregister = _csgeom.csYRotMatrix3_swigregister
csYRotMatrix3_swigregister(csYRotMatrix3)

class csZRotMatrix3(csMatrix3):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csZRotMatrix3(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csZRotMatrix3
    __del__ = lambda self : None;
csZRotMatrix3_swigregister = _csgeom.csZRotMatrix3_swigregister
csZRotMatrix3_swigregister(csZRotMatrix3)

class csXScaleMatrix3(csMatrix3):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csXScaleMatrix3(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csXScaleMatrix3
    __del__ = lambda self : None;
csXScaleMatrix3_swigregister = _csgeom.csXScaleMatrix3_swigregister
csXScaleMatrix3_swigregister(csXScaleMatrix3)

class csYScaleMatrix3(csMatrix3):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csYScaleMatrix3(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csYScaleMatrix3
    __del__ = lambda self : None;
csYScaleMatrix3_swigregister = _csgeom.csYScaleMatrix3_swigregister
csYScaleMatrix3_swigregister(csYScaleMatrix3)

class csZScaleMatrix3(csMatrix3):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csZScaleMatrix3(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csZScaleMatrix3
    __del__ = lambda self : None;
csZScaleMatrix3_swigregister = _csgeom.csZScaleMatrix3_swigregister
csZScaleMatrix3_swigregister(csZScaleMatrix3)

class csTransform(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _csgeom.delete_csTransform
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _csgeom.new_csTransform(*args)
        try: self.this.append(this)
        except: self.this = this
    def Description(*args): return _csgeom.csTransform_Description(*args)
    def Identity(*args): return _csgeom.csTransform_Identity(*args)
    def IsIdentity(*args): return _csgeom.csTransform_IsIdentity(*args)
    def GetO2T(*args): return _csgeom.csTransform_GetO2T(*args)
    def GetO2TTranslation(*args): return _csgeom.csTransform_GetO2TTranslation(*args)
    def GetOrigin(*args): return _csgeom.csTransform_GetOrigin(*args)
    def SetO2T(*args): return _csgeom.csTransform_SetO2T(*args)
    def SetO2TTranslation(*args): return _csgeom.csTransform_SetO2TTranslation(*args)
    def SetOrigin(*args): return _csgeom.csTransform_SetOrigin(*args)
    def Translate(*args): return _csgeom.csTransform_Translate(*args)
    def Other2ThisRelative(*args): return _csgeom.csTransform_Other2ThisRelative(*args)
    def Other2This(*args): return _csgeom.csTransform_Other2This(*args)
    GetReflect = staticmethod(_csgeom.csTransform_GetReflect)
    def GetFront(*args): return _csgeom.csTransform_GetFront(*args)
    def GetUp(*args): return _csgeom.csTransform_GetUp(*args)
    def GetRight(*args): return _csgeom.csTransform_GetRight(*args)
    def __mul__(*args): return _csgeom.csTransform___mul__(*args)
    def __rmul__(*args): return _csgeom.csTransform___rmul__(*args)
    def __str__(self):
      return str(self.GetO2T())+"\n"+str(self.GetOrigin())
    def __repr__(self):
      return "cspace.csTransform(%s,%s)"%(repr(self.GetO2T()),
                repr(self.GetOrigin()))

csTransform_swigregister = _csgeom.csTransform_swigregister
csTransform_swigregister(csTransform)
csTransform_GetReflect = _csgeom.csTransform_GetReflect

class csReversibleTransform(csTransform):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csReversibleTransform(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetT2O(*args): return _csgeom.csReversibleTransform_GetT2O(*args)
    def GetT2OTranslation(*args): return _csgeom.csReversibleTransform_GetT2OTranslation(*args)
    def GetInverse(*args): return _csgeom.csReversibleTransform_GetInverse(*args)
    def SetO2T(*args): return _csgeom.csReversibleTransform_SetO2T(*args)
    def SetT2O(*args): return _csgeom.csReversibleTransform_SetT2O(*args)
    def This2OtherRelative(*args): return _csgeom.csReversibleTransform_This2OtherRelative(*args)
    def This2Other(*args): return _csgeom.csReversibleTransform_This2Other(*args)
    def RotateOther(*args): return _csgeom.csReversibleTransform_RotateOther(*args)
    def RotateThis(*args): return _csgeom.csReversibleTransform_RotateThis(*args)
    def LookAt(*args): return _csgeom.csReversibleTransform_LookAt(*args)
    def __imul__(*args): return _csgeom.csReversibleTransform___imul__(*args)
    def __mul__(*args): return _csgeom.csReversibleTransform___mul__(*args)
    def __idiv__(*args): return _csgeom.csReversibleTransform___idiv__(*args)
    def __div__(*args): return _csgeom.csReversibleTransform___div__(*args)
    __swig_destroy__ = _csgeom.delete_csReversibleTransform
    __del__ = lambda self : None;
csReversibleTransform_swigregister = _csgeom.csReversibleTransform_swigregister
csReversibleTransform_swigregister(csReversibleTransform)

class csOrthoTransform(csReversibleTransform):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csOrthoTransform(*args)
        try: self.this.append(this)
        except: self.this = this
    def SetO2T(*args): return _csgeom.csOrthoTransform_SetO2T(*args)
    def SetT2O(*args): return _csgeom.csOrthoTransform_SetT2O(*args)
    __swig_destroy__ = _csgeom.delete_csOrthoTransform
    __del__ = lambda self : None;
csOrthoTransform_swigregister = _csgeom.csOrthoTransform_swigregister
csOrthoTransform_swigregister(csOrthoTransform)

class csSphere(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csSphere(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetCenter(*args): return _csgeom.csSphere_GetCenter(*args)
    def SetCenter(*args): return _csgeom.csSphere_SetCenter(*args)
    def GetRadius(*args): return _csgeom.csSphere_GetRadius(*args)
    def SetRadius(*args): return _csgeom.csSphere_SetRadius(*args)
    def Union(*args): return _csgeom.csSphere_Union(*args)
    def __iadd__(*args): return _csgeom.csSphere___iadd__(*args)
    def TestIntersect(*args): return _csgeom.csSphere_TestIntersect(*args)
    def __imul__(*args): return _csgeom.csSphere___imul__(*args)
    def __div__(*args): return _csgeom.csSphere___div__(*args)
    __swig_destroy__ = _csgeom.delete_csSphere
    __del__ = lambda self : None;
csSphere_swigregister = _csgeom.csSphere_swigregister
csSphere_swigregister(csSphere)

class csEllipsoid(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csEllipsoid(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetCenter(*args): return _csgeom.csEllipsoid_GetCenter(*args)
    def SetCenter(*args): return _csgeom.csEllipsoid_SetCenter(*args)
    def GetRadius(*args): return _csgeom.csEllipsoid_GetRadius(*args)
    def SetRadius(*args): return _csgeom.csEllipsoid_SetRadius(*args)
    __swig_destroy__ = _csgeom.delete_csEllipsoid
    __del__ = lambda self : None;
csEllipsoid_swigregister = _csgeom.csEllipsoid_swigregister
csEllipsoid_swigregister(csEllipsoid)

CS_POLY_IN = _csgeom.CS_POLY_IN
CS_POLY_ON = _csgeom.CS_POLY_ON
CS_POLY_OUT = _csgeom.CS_POLY_OUT
class csPlane2(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    norm = _swig_property(_csgeom.csPlane2_norm_get, _csgeom.csPlane2_norm_set)
    CC = _swig_property(_csgeom.csPlane2_CC_get, _csgeom.csPlane2_CC_set)
    def __init__(self, *args): 
        this = _csgeom.new_csPlane2(*args)
        try: self.this.append(this)
        except: self.this = this
    def Normal(*args): return _csgeom.csPlane2_Normal(*args)
    def GetNormal(*args): return _csgeom.csPlane2_GetNormal(*args)
    def A(*args): return _csgeom.csPlane2_A(*args)
    def B(*args): return _csgeom.csPlane2_B(*args)
    def C(*args): return _csgeom.csPlane2_C(*args)
    def Set(*args): return _csgeom.csPlane2_Set(*args)
    Classify = staticmethod(_csgeom.csPlane2_Classify)
    def Distance(*args): return _csgeom.csPlane2_Distance(*args)
    def SquaredDistance(*args): return _csgeom.csPlane2_SquaredDistance(*args)
    def Invert(*args): return _csgeom.csPlane2_Invert(*args)
    def Normalize(*args): return _csgeom.csPlane2_Normalize(*args)
    __swig_destroy__ = _csgeom.delete_csPlane2
    __del__ = lambda self : None;
csPlane2_swigregister = _csgeom.csPlane2_swigregister
csPlane2_swigregister(csPlane2)
csPlane2_Classify = _csgeom.csPlane2_Classify

class csPlane3(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    norm = _swig_property(_csgeom.csPlane3_norm_get, _csgeom.csPlane3_norm_set)
    DD = _swig_property(_csgeom.csPlane3_DD_get, _csgeom.csPlane3_DD_set)
    def __init__(self, *args): 
        this = _csgeom.new_csPlane3(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(*args): return _csgeom.csPlane3___eq__(*args)
    def Normal(*args): return _csgeom.csPlane3_Normal(*args)
    def A(*args): return _csgeom.csPlane3_A(*args)
    def B(*args): return _csgeom.csPlane3_B(*args)
    def C(*args): return _csgeom.csPlane3_C(*args)
    def D(*args): return _csgeom.csPlane3_D(*args)
    def GetNormal(*args): return _csgeom.csPlane3_GetNormal(*args)
    def Set(*args): return _csgeom.csPlane3_Set(*args)
    def SetOrigin(*args): return _csgeom.csPlane3_SetOrigin(*args)
    Classify = staticmethod(_csgeom.csPlane3_Classify)
    def Distance(*args): return _csgeom.csPlane3_Distance(*args)
    def Invert(*args): return _csgeom.csPlane3_Invert(*args)
    def Inverse(*args): return _csgeom.csPlane3_Inverse(*args)
    def Normalize(*args): return _csgeom.csPlane3_Normalize(*args)
    def FindPoint(*args): return _csgeom.csPlane3_FindPoint(*args)
    def ProjectOnto(*args): return _csgeom.csPlane3_ProjectOnto(*args)
    FindOrthogonalPoints = staticmethod(_csgeom.csPlane3_FindOrthogonalPoints)
    def ClipPolygon(*args): return _csgeom.csPlane3_ClipPolygon(*args)
    def Description(*args): return _csgeom.csPlane3_Description(*args)
    def __imul__(*args): return _csgeom.csPlane3___imul__(*args)
    def __idiv__(*args): return _csgeom.csPlane3___idiv__(*args)
    def __div__(*args): return _csgeom.csPlane3___div__(*args)
    __swig_destroy__ = _csgeom.delete_csPlane3
    __del__ = lambda self : None;
csPlane3_swigregister = _csgeom.csPlane3_swigregister
csPlane3_swigregister(csPlane3)
csPlane3_Classify = _csgeom.csPlane3_Classify
csPlane3_FindOrthogonalPoints = _csgeom.csPlane3_FindOrthogonalPoints

class csMath2(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    WhichSide2D = staticmethod(_csgeom.csMath2_WhichSide2D)
    InPoly2D = staticmethod(_csgeom.csMath2_InPoly2D)
    Area2 = staticmethod(_csgeom.csMath2_Area2)
    Right = staticmethod(_csgeom.csMath2_Right)
    Left = staticmethod(_csgeom.csMath2_Left)
    Visible = staticmethod(_csgeom.csMath2_Visible)
    PlanesEqual = staticmethod(_csgeom.csMath2_PlanesEqual)
    PlanesClose = staticmethod(_csgeom.csMath2_PlanesClose)
    def __init__(self, *args): 
        this = _csgeom.new_csMath2(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csMath2
    __del__ = lambda self : None;
csMath2_swigregister = _csgeom.csMath2_swigregister
csMath2_swigregister(csMath2)
csMath2_WhichSide2D = _csgeom.csMath2_WhichSide2D
csMath2_InPoly2D = _csgeom.csMath2_InPoly2D
csMath2_Area2 = _csgeom.csMath2_Area2
csMath2_Right = _csgeom.csMath2_Right
csMath2_Left = _csgeom.csMath2_Left
csMath2_Visible = _csgeom.csMath2_Visible
csMath2_PlanesEqual = _csgeom.csMath2_PlanesEqual
csMath2_PlanesClose = _csgeom.csMath2_PlanesClose

class csIntersect2(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    PlanePolygon = staticmethod(_csgeom.csIntersect2_PlanePolygon)
    SegmentSegment = staticmethod(_csgeom.csIntersect2_SegmentSegment)
    SegmentLine = staticmethod(_csgeom.csIntersect2_SegmentLine)
    LineLine = staticmethod(_csgeom.csIntersect2_LineLine)
    SegmentPlane = staticmethod(_csgeom.csIntersect2_SegmentPlane)
    SegmentPlaneNoTest = staticmethod(_csgeom.csIntersect2_SegmentPlaneNoTest)
    PlanePlane = staticmethod(_csgeom.csIntersect2_PlanePlane)
    SegmentBox = staticmethod(_csgeom.csIntersect2_SegmentBox)
    def __init__(self, *args): 
        this = _csgeom.new_csIntersect2(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csIntersect2
    __del__ = lambda self : None;
csIntersect2_swigregister = _csgeom.csIntersect2_swigregister
csIntersect2_swigregister(csIntersect2)
csIntersect2_PlanePolygon = _csgeom.csIntersect2_PlanePolygon
csIntersect2_SegmentSegment = _csgeom.csIntersect2_SegmentSegment
csIntersect2_SegmentLine = _csgeom.csIntersect2_SegmentLine
csIntersect2_LineLine = _csgeom.csIntersect2_LineLine
csIntersect2_SegmentPlane = _csgeom.csIntersect2_SegmentPlane
csIntersect2_SegmentPlaneNoTest = _csgeom.csIntersect2_SegmentPlaneNoTest
csIntersect2_PlanePlane = _csgeom.csIntersect2_PlanePlane
csIntersect2_SegmentBox = _csgeom.csIntersect2_SegmentBox

class csPoly2D(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csPoly2D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csPoly2D
    __del__ = lambda self : None;
    def assign(*args): return _csgeom.csPoly2D_assign(*args)
    def MakeEmpty(*args): return _csgeom.csPoly2D_MakeEmpty(*args)
    def GetVertexCount(*args): return _csgeom.csPoly2D_GetVertexCount(*args)
    def GetVertices(*args): return _csgeom.csPoly2D_GetVertices(*args)
    def GetVertex(*args): return _csgeom.csPoly2D_GetVertex(*args)
    def GetFirst(*args): return _csgeom.csPoly2D_GetFirst(*args)
    def GetLast(*args): return _csgeom.csPoly2D_GetLast(*args)
    In = staticmethod(_csgeom.csPoly2D_In)
    def MakeRoom(*args): return _csgeom.csPoly2D_MakeRoom(*args)
    def SetVertexCount(*args): return _csgeom.csPoly2D_SetVertexCount(*args)
    def AddVertex(*args): return _csgeom.csPoly2D_AddVertex(*args)
    def SetVertices(*args): return _csgeom.csPoly2D_SetVertices(*args)
    def ClipAgainst(*args): return _csgeom.csPoly2D_ClipAgainst(*args)
    def Intersect(*args): return _csgeom.csPoly2D_Intersect(*args)
    def ClipPlane(*args): return _csgeom.csPoly2D_ClipPlane(*args)
    def ExtendConvex(*args): return _csgeom.csPoly2D_ExtendConvex(*args)
    def GetSignedArea(*args): return _csgeom.csPoly2D_GetSignedArea(*args)
    def Random(*args): return _csgeom.csPoly2D_Random(*args)
    def __getitem__(*args): return _csgeom.csPoly2D___getitem__(*args)
    def __setitem__ (self, i, v):
      own_v = self.__getitem__(i)
      for i in range(2):
        own_v[i] = v[i]

csPoly2D_swigregister = _csgeom.csPoly2D_swigregister
csPoly2D_swigregister(csPoly2D)
csPoly2D_In = _csgeom.csPoly2D_In

class csPoly2DFactory(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _csgeom.delete_csPoly2DFactory
    __del__ = lambda self : None;
    def Create(*args): return _csgeom.csPoly2DFactory_Create(*args)
    def __init__(self, *args): 
        this = _csgeom.new_csPoly2DFactory(*args)
        try: self.this.append(this)
        except: self.this = this
csPoly2DFactory_swigregister = _csgeom.csPoly2DFactory_swigregister
csPoly2DFactory_swigregister(csPoly2DFactory)

class csMath3(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    WhichSide3D = staticmethod(_csgeom.csMath3_WhichSide3D)
    Visible = staticmethod(_csgeom.csMath3_Visible)
    Between = staticmethod(_csgeom.csMath3_Between)
    SetMinMax = staticmethod(_csgeom.csMath3_SetMinMax)
    DoubleArea3 = staticmethod(_csgeom.csMath3_DoubleArea3)
    Direction3 = staticmethod(_csgeom.csMath3_Direction3)
    CalcNormal = staticmethod(_csgeom.csMath3_CalcNormal)
    CalcPlane = staticmethod(_csgeom.csMath3_CalcPlane)
    PlanesEqual = staticmethod(_csgeom.csMath3_PlanesEqual)
    PlanesClose = staticmethod(_csgeom.csMath3_PlanesClose)
    OuterPlanes = staticmethod(_csgeom.csMath3_OuterPlanes)
    FindObserverSides = staticmethod(_csgeom.csMath3_FindObserverSides)
    SpherePosition = staticmethod(_csgeom.csMath3_SpherePosition)
    def __init__(self, *args): 
        this = _csgeom.new_csMath3(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csMath3
    __del__ = lambda self : None;
csMath3_swigregister = _csgeom.csMath3_swigregister
csMath3_swigregister(csMath3)
csMath3_WhichSide3D = _csgeom.csMath3_WhichSide3D
csMath3_Visible = _csgeom.csMath3_Visible
csMath3_Between = _csgeom.csMath3_Between
csMath3_SetMinMax = _csgeom.csMath3_SetMinMax
csMath3_DoubleArea3 = _csgeom.csMath3_DoubleArea3
csMath3_Direction3 = _csgeom.csMath3_Direction3
csMath3_CalcNormal = _csgeom.csMath3_CalcNormal
csMath3_CalcPlane = _csgeom.csMath3_CalcPlane
csMath3_PlanesEqual = _csgeom.csMath3_PlanesEqual
csMath3_PlanesClose = _csgeom.csMath3_PlanesClose
csMath3_OuterPlanes = _csgeom.csMath3_OuterPlanes
csMath3_FindObserverSides = _csgeom.csMath3_FindObserverSides
csMath3_SpherePosition = _csgeom.csMath3_SpherePosition

class csSquaredDist(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    PointPoint = staticmethod(_csgeom.csSquaredDist_PointPoint)
    PointLine = staticmethod(_csgeom.csSquaredDist_PointLine)
    PointPlane = staticmethod(_csgeom.csSquaredDist_PointPlane)
    PointPoly = staticmethod(_csgeom.csSquaredDist_PointPoly)
    def __init__(self, *args): 
        this = _csgeom.new_csSquaredDist(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csSquaredDist
    __del__ = lambda self : None;
csSquaredDist_swigregister = _csgeom.csSquaredDist_swigregister
csSquaredDist_swigregister(csSquaredDist)
csSquaredDist_PointPoint = _csgeom.csSquaredDist_PointPoint
csSquaredDist_PointLine = _csgeom.csSquaredDist_PointLine
csSquaredDist_PointPlane = _csgeom.csSquaredDist_PointPlane
csSquaredDist_PointPoly = _csgeom.csSquaredDist_PointPoly

class csIntersect3(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    PlanePolygon = staticmethod(_csgeom.csIntersect3_PlanePolygon)
    SegmentFrustum = staticmethod(_csgeom.csIntersect3_SegmentFrustum)
    SegmentTriangle = staticmethod(_csgeom.csIntersect3_SegmentTriangle)
    SegmentPolygon = staticmethod(_csgeom.csIntersect3_SegmentPolygon)
    SegmentPlanes = staticmethod(_csgeom.csIntersect3_SegmentPlanes)
    SegmentPlane = staticmethod(_csgeom.csIntersect3_SegmentPlane)
    ThreePlanes = staticmethod(_csgeom.csIntersect3_ThreePlanes)
    PlaneXPlane = staticmethod(_csgeom.csIntersect3_PlaneXPlane)
    PlaneYPlane = staticmethod(_csgeom.csIntersect3_PlaneYPlane)
    PlaneZPlane = staticmethod(_csgeom.csIntersect3_PlaneZPlane)
    PlaneAxisPlane = staticmethod(_csgeom.csIntersect3_PlaneAxisPlane)
    SegmentZ0Plane = staticmethod(_csgeom.csIntersect3_SegmentZ0Plane)
    SegmentXPlane = staticmethod(_csgeom.csIntersect3_SegmentXPlane)
    SegmentYPlane = staticmethod(_csgeom.csIntersect3_SegmentYPlane)
    SegmentZPlane = staticmethod(_csgeom.csIntersect3_SegmentZPlane)
    SegmentAxisPlane = staticmethod(_csgeom.csIntersect3_SegmentAxisPlane)
    SegmentXFrustum = staticmethod(_csgeom.csIntersect3_SegmentXFrustum)
    SegmentYFrustum = staticmethod(_csgeom.csIntersect3_SegmentYFrustum)
    BoxSegment = staticmethod(_csgeom.csIntersect3_BoxSegment)
    ClipSegmentBox = staticmethod(_csgeom.csIntersect3_ClipSegmentBox)
    BoxFrustum = staticmethod(_csgeom.csIntersect3_BoxFrustum)
    BoxSphere = staticmethod(_csgeom.csIntersect3_BoxSphere)
    BoxPlane = staticmethod(_csgeom.csIntersect3_BoxPlane)
    BoxTriangle = staticmethod(_csgeom.csIntersect3_BoxTriangle)
    BoxBox = staticmethod(_csgeom.csIntersect3_BoxBox)
    FrustumFrustum = staticmethod(_csgeom.csIntersect3_FrustumFrustum)
    TriangleTriangle = staticmethod(_csgeom.csIntersect3_TriangleTriangle)
    def __init__(self, *args): 
        this = _csgeom.new_csIntersect3(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csIntersect3
    __del__ = lambda self : None;
csIntersect3_swigregister = _csgeom.csIntersect3_swigregister
csIntersect3_swigregister(csIntersect3)
csIntersect3_PlanePolygon = _csgeom.csIntersect3_PlanePolygon
csIntersect3_SegmentFrustum = _csgeom.csIntersect3_SegmentFrustum
csIntersect3_SegmentTriangle = _csgeom.csIntersect3_SegmentTriangle
csIntersect3_SegmentPolygon = _csgeom.csIntersect3_SegmentPolygon
csIntersect3_SegmentPlanes = _csgeom.csIntersect3_SegmentPlanes
csIntersect3_SegmentPlane = _csgeom.csIntersect3_SegmentPlane
csIntersect3_ThreePlanes = _csgeom.csIntersect3_ThreePlanes
csIntersect3_PlaneXPlane = _csgeom.csIntersect3_PlaneXPlane
csIntersect3_PlaneYPlane = _csgeom.csIntersect3_PlaneYPlane
csIntersect3_PlaneZPlane = _csgeom.csIntersect3_PlaneZPlane
csIntersect3_PlaneAxisPlane = _csgeom.csIntersect3_PlaneAxisPlane
csIntersect3_SegmentZ0Plane = _csgeom.csIntersect3_SegmentZ0Plane
csIntersect3_SegmentXPlane = _csgeom.csIntersect3_SegmentXPlane
csIntersect3_SegmentYPlane = _csgeom.csIntersect3_SegmentYPlane
csIntersect3_SegmentZPlane = _csgeom.csIntersect3_SegmentZPlane
csIntersect3_SegmentAxisPlane = _csgeom.csIntersect3_SegmentAxisPlane
csIntersect3_SegmentXFrustum = _csgeom.csIntersect3_SegmentXFrustum
csIntersect3_SegmentYFrustum = _csgeom.csIntersect3_SegmentYFrustum
csIntersect3_BoxSegment = _csgeom.csIntersect3_BoxSegment
csIntersect3_ClipSegmentBox = _csgeom.csIntersect3_ClipSegmentBox
csIntersect3_BoxFrustum = _csgeom.csIntersect3_BoxFrustum
csIntersect3_BoxSphere = _csgeom.csIntersect3_BoxSphere
csIntersect3_BoxPlane = _csgeom.csIntersect3_BoxPlane
csIntersect3_BoxTriangle = _csgeom.csIntersect3_BoxTriangle
csIntersect3_BoxBox = _csgeom.csIntersect3_BoxBox
csIntersect3_FrustumFrustum = _csgeom.csIntersect3_FrustumFrustum
csIntersect3_TriangleTriangle = _csgeom.csIntersect3_TriangleTriangle

CS_POL_SAME_PLANE = _csgeom.CS_POL_SAME_PLANE
CS_POL_FRONT = _csgeom.CS_POL_FRONT
CS_POL_BACK = _csgeom.CS_POL_BACK
CS_POL_SPLIT_NEEDED = _csgeom.CS_POL_SPLIT_NEEDED
class csPoly3D(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csPoly3D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csPoly3D
    __del__ = lambda self : None;
    def MakeEmpty(*args): return _csgeom.csPoly3D_MakeEmpty(*args)
    def GetVertexCount(*args): return _csgeom.csPoly3D_GetVertexCount(*args)
    def GetVertices(*args): return _csgeom.csPoly3D_GetVertices(*args)
    def GetVertex(*args): return _csgeom.csPoly3D_GetVertex(*args)
    def GetFirst(*args): return _csgeom.csPoly3D_GetFirst(*args)
    def GetLast(*args): return _csgeom.csPoly3D_GetLast(*args)
    In = staticmethod(_csgeom.csPoly3D_In)
    def MakeRoom(*args): return _csgeom.csPoly3D_MakeRoom(*args)
    def SetVertexCount(*args): return _csgeom.csPoly3D_SetVertexCount(*args)
    def AddVertex(*args): return _csgeom.csPoly3D_AddVertex(*args)
    def SetVertices(*args): return _csgeom.csPoly3D_SetVertices(*args)
    def ProjectXPlane(*args): return _csgeom.csPoly3D_ProjectXPlane(*args)
    def ProjectYPlane(*args): return _csgeom.csPoly3D_ProjectYPlane(*args)
    def ProjectZPlane(*args): return _csgeom.csPoly3D_ProjectZPlane(*args)
    def ProjectAxisPlane(*args): return _csgeom.csPoly3D_ProjectAxisPlane(*args)
    def Classify(*args): return _csgeom.csPoly3D_Classify(*args)
    def ClassifyX(*args): return _csgeom.csPoly3D_ClassifyX(*args)
    def ClassifyY(*args): return _csgeom.csPoly3D_ClassifyY(*args)
    def ClassifyZ(*args): return _csgeom.csPoly3D_ClassifyZ(*args)
    def ClassifyAxis(*args): return _csgeom.csPoly3D_ClassifyAxis(*args)
    def IsAxisAligned(*args): return _csgeom.csPoly3D_IsAxisAligned(*args)
    def ComputeMainNormalAxis(*args): return _csgeom.csPoly3D_ComputeMainNormalAxis(*args)
    def CutToPlane(*args): return _csgeom.csPoly3D_CutToPlane(*args)
    def SplitWithPlane(*args): return _csgeom.csPoly3D_SplitWithPlane(*args)
    def SplitWithPlaneX(*args): return _csgeom.csPoly3D_SplitWithPlaneX(*args)
    def SplitWithPlaneY(*args): return _csgeom.csPoly3D_SplitWithPlaneY(*args)
    def SplitWithPlaneZ(*args): return _csgeom.csPoly3D_SplitWithPlaneZ(*args)
    def ComputeNormal(*args): return _csgeom.csPoly3D_ComputeNormal(*args)
    def ComputePlane(*args): return _csgeom.csPoly3D_ComputePlane(*args)
    def GetArea(*args): return _csgeom.csPoly3D_GetArea(*args)
    def GetCenter(*args): return _csgeom.csPoly3D_GetCenter(*args)
    def InSphere(*args): return _csgeom.csPoly3D_InSphere(*args)
    def __getitem__(*args): return _csgeom.csPoly3D___getitem__(*args)
    def __setitem__ (self, i, v):
      own_v = self.__getitem__(i)
      for i in range(3):
        own_v[i] = v[i]

csPoly3D_swigregister = _csgeom.csPoly3D_swigregister
csPoly3D_swigregister(csPoly3D)
csPoly3D_In = _csgeom.csPoly3D_In

class csCompressVertex(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    orig_idx = _swig_property(_csgeom.csCompressVertex_orig_idx_get, _csgeom.csCompressVertex_orig_idx_set)
    x = _swig_property(_csgeom.csCompressVertex_x_get, _csgeom.csCompressVertex_x_set)
    y = _swig_property(_csgeom.csCompressVertex_y_get, _csgeom.csCompressVertex_y_set)
    z = _swig_property(_csgeom.csCompressVertex_z_get, _csgeom.csCompressVertex_z_set)
    new_idx = _swig_property(_csgeom.csCompressVertex_new_idx_get, _csgeom.csCompressVertex_new_idx_set)
    used = _swig_property(_csgeom.csCompressVertex_used_get, _csgeom.csCompressVertex_used_set)
    def __init__(self, *args): 
        this = _csgeom.new_csCompressVertex(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csCompressVertex
    __del__ = lambda self : None;
csCompressVertex_swigregister = _csgeom.csCompressVertex_swigregister
csCompressVertex_swigregister(csCompressVertex)

class csVector3Array(csPoly3D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csVector3Array(*args)
        try: self.this.append(this)
        except: self.this = this
    def AddVertexSmart(*args): return _csgeom.csVector3Array_AddVertexSmart(*args)
    CompressVertices = staticmethod(_csgeom.csVector3Array_CompressVertices)
    __swig_destroy__ = _csgeom.delete_csVector3Array
    __del__ = lambda self : None;
csVector3Array_swigregister = _csgeom.csVector3Array_swigregister
csVector3Array_swigregister(csVector3Array)
csVector3Array_CompressVertices = _csgeom.csVector3Array_CompressVertices

class TriangleInt(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    a = _swig_property(_csgeom.TriangleInt_a_get, _csgeom.TriangleInt_a_set)
    b = _swig_property(_csgeom.TriangleInt_b_get, _csgeom.TriangleInt_b_set)
    c = _swig_property(_csgeom.TriangleInt_c_get, _csgeom.TriangleInt_c_set)
    def Set(*args): return _csgeom.TriangleInt_Set(*args)
    def __init__(self, *args): 
        this = _csgeom.new_TriangleInt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_TriangleInt
    __del__ = lambda self : None;
TriangleInt_swigregister = _csgeom.TriangleInt_swigregister
TriangleInt_swigregister(TriangleInt)

class csTriangle(TriangleInt):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csTriangle(*args)
        try: self.this.append(this)
        except: self.this = this
    def __getitem__(*args): return _csgeom.csTriangle___getitem__(*args)
    def __setitem__(*args): return _csgeom.csTriangle___setitem__(*args)
    def __nonzero__(*args): return _csgeom.csTriangle___nonzero__(*args)
    def __str__(self):
      return "%d,%d,%d"%(self.a,self.b,self.c)
    def __repr__(self):
      return "cspace.csTriangle(%s)"%(self)

    __swig_destroy__ = _csgeom.delete_csTriangle
    __del__ = lambda self : None;
csTriangle_swigregister = _csgeom.csTriangle_swigregister
csTriangle_swigregister(csTriangle)

class csRect(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    xmin = _swig_property(_csgeom.csRect_xmin_get, _csgeom.csRect_xmin_set)
    ymin = _swig_property(_csgeom.csRect_ymin_get, _csgeom.csRect_ymin_set)
    xmax = _swig_property(_csgeom.csRect_xmax_get, _csgeom.csRect_xmax_set)
    ymax = _swig_property(_csgeom.csRect_ymax_get, _csgeom.csRect_ymax_set)
    def __init__(self, *args): 
        this = _csgeom.new_csRect(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csRect
    __del__ = lambda self : None;
    def Intersect(*args): return _csgeom.csRect_Intersect(*args)
    def Intersects(*args): return _csgeom.csRect_Intersects(*args)
    def Union(*args): return _csgeom.csRect_Union(*args)
    def Exclude(*args): return _csgeom.csRect_Exclude(*args)
    def Subtract(*args): return _csgeom.csRect_Subtract(*args)
    def IsEmpty(*args): return _csgeom.csRect_IsEmpty(*args)
    def MakeEmpty(*args): return _csgeom.csRect_MakeEmpty(*args)
    def Set(*args): return _csgeom.csRect_Set(*args)
    def SetPos(*args): return _csgeom.csRect_SetPos(*args)
    def SetSize(*args): return _csgeom.csRect_SetSize(*args)
    def Move(*args): return _csgeom.csRect_Move(*args)
    def Width(*args): return _csgeom.csRect_Width(*args)
    def Height(*args): return _csgeom.csRect_Height(*args)
    def Contains(*args): return _csgeom.csRect_Contains(*args)
    def ContainsRel(*args): return _csgeom.csRect_ContainsRel(*args)
    def Equal(*args): return _csgeom.csRect_Equal(*args)
    def Normalize(*args): return _csgeom.csRect_Normalize(*args)
    def Area(*args): return _csgeom.csRect_Area(*args)
    def AddAdjacent(*args): return _csgeom.csRect_AddAdjacent(*args)
    def __eq__(*args): return _csgeom.csRect___eq__(*args)
    def __ne__(*args): return _csgeom.csRect___ne__(*args)
    def Extend(*args): return _csgeom.csRect_Extend(*args)
    def Join(*args): return _csgeom.csRect_Join(*args)
    def Outset(*args): return _csgeom.csRect_Outset(*args)
    def Inset(*args): return _csgeom.csRect_Inset(*args)
    def ClipLineGeneral(*args): return _csgeom.csRect_ClipLineGeneral(*args)
    def ClipLine(*args): return _csgeom.csRect_ClipLine(*args)
    def ClipLineSafe(*args): return _csgeom.csRect_ClipLineSafe(*args)
csRect_swigregister = _csgeom.csRect_swigregister
csRect_swigregister(csRect)

class csRectRegion(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csRectRegion(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csRectRegion
    __del__ = lambda self : None;
    def Include(*args): return _csgeom.csRectRegion_Include(*args)
    def Exclude(*args): return _csgeom.csRectRegion_Exclude(*args)
    def ClipTo(*args): return _csgeom.csRectRegion_ClipTo(*args)
    def Count(*args): return _csgeom.csRectRegion_Count(*args)
    def RectAt(*args): return _csgeom.csRectRegion_RectAt(*args)
    def MakeEmpty(*args): return _csgeom.csRectRegion_MakeEmpty(*args)
csRectRegion_swigregister = _csgeom.csRectRegion_swigregister
csRectRegion_swigregister(csRectRegion)

class csQuaternion(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csQuaternion(*args)
        try: self.this.append(this)
        except: self.this = this
    def Set(*args): return _csgeom.csQuaternion_Set(*args)
    def SetIdentity(*args): return _csgeom.csQuaternion_SetIdentity(*args)
    def __iadd__(*args): return _csgeom.csQuaternion___iadd__(*args)
    def __isub__(*args): return _csgeom.csQuaternion___isub__(*args)
    def __imul__(*args): return _csgeom.csQuaternion___imul__(*args)
    def __idiv__(*args): return _csgeom.csQuaternion___idiv__(*args)
    def GetConjugate(*args): return _csgeom.csQuaternion_GetConjugate(*args)
    def Conjugate(*args): return _csgeom.csQuaternion_Conjugate(*args)
    def Dot(*args): return _csgeom.csQuaternion_Dot(*args)
    def SquaredNorm(*args): return _csgeom.csQuaternion_SquaredNorm(*args)
    def Norm(*args): return _csgeom.csQuaternion_Norm(*args)
    def Unit(*args): return _csgeom.csQuaternion_Unit(*args)
    def Rotate(*args): return _csgeom.csQuaternion_Rotate(*args)
    def SetAxisAngle(*args): return _csgeom.csQuaternion_SetAxisAngle(*args)
    def GetAxisAngle(*args): return _csgeom.csQuaternion_GetAxisAngle(*args)
    def SetEulerAngles(*args): return _csgeom.csQuaternion_SetEulerAngles(*args)
    def GetEulerAngles(*args): return _csgeom.csQuaternion_GetEulerAngles(*args)
    def SetMatrix(*args): return _csgeom.csQuaternion_SetMatrix(*args)
    def GetMatrix(*args): return _csgeom.csQuaternion_GetMatrix(*args)
    def NLerp(*args): return _csgeom.csQuaternion_NLerp(*args)
    def SLerp(*args): return _csgeom.csQuaternion_SLerp(*args)
    def Log(*args): return _csgeom.csQuaternion_Log(*args)
    def Exp(*args): return _csgeom.csQuaternion_Exp(*args)
    def Squad(*args): return _csgeom.csQuaternion_Squad(*args)
    v = _swig_property(_csgeom.csQuaternion_v_get, _csgeom.csQuaternion_v_set)
    w = _swig_property(_csgeom.csQuaternion_w_get, _csgeom.csQuaternion_w_set)
    def __add__(*args): return _csgeom.csQuaternion___add__(*args)
    def __sub__(*args): return _csgeom.csQuaternion___sub__(*args)
    def __mul__(*args): return _csgeom.csQuaternion___mul__(*args)
    def __str__(self):
      return "%s,%f"%(self.v,self.w)
    def __repr__(self):
      return "cspace.csQuaternion(%s)"%(self)

    __swig_destroy__ = _csgeom.delete_csQuaternion
    __del__ = lambda self : None;
csQuaternion_swigregister = _csgeom.csQuaternion_swigregister
csQuaternion_swigregister(csQuaternion)

class csSpline(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _csgeom.delete_csSpline
    __del__ = lambda self : None;
    def GetDimensionCount(*args): return _csgeom.csSpline_GetDimensionCount(*args)
    def GetPointCount(*args): return _csgeom.csSpline_GetPointCount(*args)
    def InsertPoint(*args): return _csgeom.csSpline_InsertPoint(*args)
    def RemovePoint(*args): return _csgeom.csSpline_RemovePoint(*args)
    def SetTimeValues(*args): return _csgeom.csSpline_SetTimeValues(*args)
    def SetTimeValue(*args): return _csgeom.csSpline_SetTimeValue(*args)
    def GetTimeValues(*args): return _csgeom.csSpline_GetTimeValues(*args)
    def GetTimeValue(*args): return _csgeom.csSpline_GetTimeValue(*args)
    def SetDimensionValues(*args): return _csgeom.csSpline_SetDimensionValues(*args)
    def SetDimensionValue(*args): return _csgeom.csSpline_SetDimensionValue(*args)
    def GetDimensionValues(*args): return _csgeom.csSpline_GetDimensionValues(*args)
    def GetDimensionValue(*args): return _csgeom.csSpline_GetDimensionValue(*args)
    def SetIndexValues(*args): return _csgeom.csSpline_SetIndexValues(*args)
    def GetIndexValues(*args): return _csgeom.csSpline_GetIndexValues(*args)
    def Calculate(*args): return _csgeom.csSpline_Calculate(*args)
    def GetCurrentIndex(*args): return _csgeom.csSpline_GetCurrentIndex(*args)
    def GetInterpolatedDimension(*args): return _csgeom.csSpline_GetInterpolatedDimension(*args)
csSpline_swigregister = _csgeom.csSpline_swigregister
csSpline_swigregister(csSpline)

class csCubicSpline(csSpline):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csCubicSpline(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csCubicSpline
    __del__ = lambda self : None;
    def Calculate(*args): return _csgeom.csCubicSpline_Calculate(*args)
    def GetInterpolatedDimension(*args): return _csgeom.csCubicSpline_GetInterpolatedDimension(*args)
csCubicSpline_swigregister = _csgeom.csCubicSpline_swigregister
csCubicSpline_swigregister(csCubicSpline)

class csBSpline(csSpline):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csBSpline(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csBSpline
    __del__ = lambda self : None;
    def Calculate(*args): return _csgeom.csBSpline_Calculate(*args)
    def GetInterpolatedDimension(*args): return _csgeom.csBSpline_GetInterpolatedDimension(*args)
csBSpline_swigregister = _csgeom.csBSpline_swigregister
csBSpline_swigregister(csBSpline)

class csCatmullRomSpline(csBSpline):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csCatmullRomSpline(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csCatmullRomSpline
    __del__ = lambda self : None;
    def Clone(*args): return _csgeom.csCatmullRomSpline_Clone(*args)
csCatmullRomSpline_swigregister = _csgeom.csCatmullRomSpline_swigregister
csCatmullRomSpline_swigregister(csCatmullRomSpline)

CS_BOUNDINGBOX_MAXVALUE = _csgeom.CS_BOUNDINGBOX_MAXVALUE
CS_BOX_CORNER_xy = _csgeom.CS_BOX_CORNER_xy
CS_BOX_CORNER_xY = _csgeom.CS_BOX_CORNER_xY
CS_BOX_CORNER_Xy = _csgeom.CS_BOX_CORNER_Xy
CS_BOX_CORNER_XY = _csgeom.CS_BOX_CORNER_XY
CS_BOX_CENTER2 = _csgeom.CS_BOX_CENTER2
CS_BOX_EDGE_xy_Xy = _csgeom.CS_BOX_EDGE_xy_Xy
CS_BOX_EDGE_Xy_xy = _csgeom.CS_BOX_EDGE_Xy_xy
CS_BOX_EDGE_Xy_XY = _csgeom.CS_BOX_EDGE_Xy_XY
CS_BOX_EDGE_XY_Xy = _csgeom.CS_BOX_EDGE_XY_Xy
CS_BOX_EDGE_XY_xY = _csgeom.CS_BOX_EDGE_XY_xY
CS_BOX_EDGE_xY_XY = _csgeom.CS_BOX_EDGE_xY_XY
CS_BOX_EDGE_xY_xy = _csgeom.CS_BOX_EDGE_xY_xy
CS_BOX_EDGE_xy_xY = _csgeom.CS_BOX_EDGE_xy_xY
class csBox2(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def MinX(*args): return _csgeom.csBox2_MinX(*args)
    def MinY(*args): return _csgeom.csBox2_MinY(*args)
    def MaxX(*args): return _csgeom.csBox2_MaxX(*args)
    def MaxY(*args): return _csgeom.csBox2_MaxY(*args)
    def Min(*args): return _csgeom.csBox2_Min(*args)
    def Max(*args): return _csgeom.csBox2_Max(*args)
    def Area(*args): return _csgeom.csBox2_Area(*args)
    def GetCorner(*args): return _csgeom.csBox2_GetCorner(*args)
    def GetCenter(*args): return _csgeom.csBox2_GetCenter(*args)
    def SetCenter(*args): return _csgeom.csBox2_SetCenter(*args)
    def SetSize(*args): return _csgeom.csBox2_SetSize(*args)
    def GetEdgeInfo(*args): return _csgeom.csBox2_GetEdgeInfo(*args)
    def GetEdge(*args): return _csgeom.csBox2_GetEdge(*args)
    def Intersect(*args): return _csgeom.csBox2_Intersect(*args)
    def In(*args): return _csgeom.csBox2_In(*args)
    def Overlap(*args): return _csgeom.csBox2_Overlap(*args)
    def Contains(*args): return _csgeom.csBox2_Contains(*args)
    def Empty(*args): return _csgeom.csBox2_Empty(*args)
    def SquaredOriginDist(*args): return _csgeom.csBox2_SquaredOriginDist(*args)
    def SquaredOriginMaxDist(*args): return _csgeom.csBox2_SquaredOriginMaxDist(*args)
    def SquaredPosDist(*args): return _csgeom.csBox2_SquaredPosDist(*args)
    def SquaredPosMaxDist(*args): return _csgeom.csBox2_SquaredPosMaxDist(*args)
    def StartBoundingBox(*args): return _csgeom.csBox2_StartBoundingBox(*args)
    def AddBoundingVertex(*args): return _csgeom.csBox2_AddBoundingVertex(*args)
    def AddBoundingVertexSmart(*args): return _csgeom.csBox2_AddBoundingVertexSmart(*args)
    def AddBoundingVertexTest(*args): return _csgeom.csBox2_AddBoundingVertexTest(*args)
    def AddBoundingVertexSmartTest(*args): return _csgeom.csBox2_AddBoundingVertexSmartTest(*args)
    def __init__(self, *args): 
        this = _csgeom.new_csBox2(*args)
        try: self.this.append(this)
        except: self.this = this
    def Set(*args): return _csgeom.csBox2_Set(*args)
    def SetMin(*args): return _csgeom.csBox2_SetMin(*args)
    def SetMax(*args): return _csgeom.csBox2_SetMax(*args)
    def Description(*args): return _csgeom.csBox2_Description(*args)
    def __iadd__(*args): return _csgeom.csBox2___iadd__(*args)
    def __imul__(*args): return _csgeom.csBox2___imul__(*args)
    def TestIntersect(*args): return _csgeom.csBox2_TestIntersect(*args)
    def __mul__(*args): return _csgeom.csBox2___mul__(*args)
    def __ne__(*args): return _csgeom.csBox2___ne__(*args)
    def __gt__(*args): return _csgeom.csBox2___gt__(*args)
    def __add__(*args): return _csgeom.csBox2___add__(*args)
    def __lt__(*args): return _csgeom.csBox2___lt__(*args)
    __swig_destroy__ = _csgeom.delete_csBox2
    __del__ = lambda self : None;
csBox2_swigregister = _csgeom.csBox2_swigregister
csBox2_swigregister(csBox2)

CS_BOX_CORNER_xyz = _csgeom.CS_BOX_CORNER_xyz
CS_BOX_CORNER_xyZ = _csgeom.CS_BOX_CORNER_xyZ
CS_BOX_CORNER_xYz = _csgeom.CS_BOX_CORNER_xYz
CS_BOX_CORNER_xYZ = _csgeom.CS_BOX_CORNER_xYZ
CS_BOX_CORNER_Xyz = _csgeom.CS_BOX_CORNER_Xyz
CS_BOX_CORNER_XyZ = _csgeom.CS_BOX_CORNER_XyZ
CS_BOX_CORNER_XYz = _csgeom.CS_BOX_CORNER_XYz
CS_BOX_CORNER_XYZ = _csgeom.CS_BOX_CORNER_XYZ
CS_BOX_CENTER3 = _csgeom.CS_BOX_CENTER3
CS_BOX_SIDE_x = _csgeom.CS_BOX_SIDE_x
CS_BOX_SIDE_X = _csgeom.CS_BOX_SIDE_X
CS_BOX_SIDE_y = _csgeom.CS_BOX_SIDE_y
CS_BOX_SIDE_Y = _csgeom.CS_BOX_SIDE_Y
CS_BOX_SIDE_z = _csgeom.CS_BOX_SIDE_z
CS_BOX_SIDE_Z = _csgeom.CS_BOX_SIDE_Z
CS_BOX_INSIDE = _csgeom.CS_BOX_INSIDE
CS_BOX_EDGE_Xyz_xyz = _csgeom.CS_BOX_EDGE_Xyz_xyz
CS_BOX_EDGE_xyz_Xyz = _csgeom.CS_BOX_EDGE_xyz_Xyz
CS_BOX_EDGE_xyz_xYz = _csgeom.CS_BOX_EDGE_xyz_xYz
CS_BOX_EDGE_xYz_xyz = _csgeom.CS_BOX_EDGE_xYz_xyz
CS_BOX_EDGE_xYz_XYz = _csgeom.CS_BOX_EDGE_xYz_XYz
CS_BOX_EDGE_XYz_xYz = _csgeom.CS_BOX_EDGE_XYz_xYz
CS_BOX_EDGE_XYz_Xyz = _csgeom.CS_BOX_EDGE_XYz_Xyz
CS_BOX_EDGE_Xyz_XYz = _csgeom.CS_BOX_EDGE_Xyz_XYz
CS_BOX_EDGE_Xyz_XyZ = _csgeom.CS_BOX_EDGE_Xyz_XyZ
CS_BOX_EDGE_XyZ_Xyz = _csgeom.CS_BOX_EDGE_XyZ_Xyz
CS_BOX_EDGE_XyZ_XYZ = _csgeom.CS_BOX_EDGE_XyZ_XYZ
CS_BOX_EDGE_XYZ_XyZ = _csgeom.CS_BOX_EDGE_XYZ_XyZ
CS_BOX_EDGE_XYZ_XYz = _csgeom.CS_BOX_EDGE_XYZ_XYz
CS_BOX_EDGE_XYz_XYZ = _csgeom.CS_BOX_EDGE_XYz_XYZ
CS_BOX_EDGE_XYZ_xYZ = _csgeom.CS_BOX_EDGE_XYZ_xYZ
CS_BOX_EDGE_xYZ_XYZ = _csgeom.CS_BOX_EDGE_xYZ_XYZ
CS_BOX_EDGE_xYZ_xYz = _csgeom.CS_BOX_EDGE_xYZ_xYz
CS_BOX_EDGE_xYz_xYZ = _csgeom.CS_BOX_EDGE_xYz_xYZ
CS_BOX_EDGE_xYZ_xyZ = _csgeom.CS_BOX_EDGE_xYZ_xyZ
CS_BOX_EDGE_xyZ_xYZ = _csgeom.CS_BOX_EDGE_xyZ_xYZ
CS_BOX_EDGE_xyZ_xyz = _csgeom.CS_BOX_EDGE_xyZ_xyz
CS_BOX_EDGE_xyz_xyZ = _csgeom.CS_BOX_EDGE_xyz_xyZ
CS_BOX_EDGE_xyZ_XyZ = _csgeom.CS_BOX_EDGE_xyZ_XyZ
CS_BOX_EDGE_XyZ_xyZ = _csgeom.CS_BOX_EDGE_XyZ_xyZ
class csBox3(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def MinX(*args): return _csgeom.csBox3_MinX(*args)
    def MinY(*args): return _csgeom.csBox3_MinY(*args)
    def MinZ(*args): return _csgeom.csBox3_MinZ(*args)
    def MaxX(*args): return _csgeom.csBox3_MaxX(*args)
    def MaxY(*args): return _csgeom.csBox3_MaxY(*args)
    def MaxZ(*args): return _csgeom.csBox3_MaxZ(*args)
    def Min(*args): return _csgeom.csBox3_Min(*args)
    def Max(*args): return _csgeom.csBox3_Max(*args)
    def Volume(*args): return _csgeom.csBox3_Volume(*args)
    def Area(*args): return _csgeom.csBox3_Area(*args)
    def IsNaN(*args): return _csgeom.csBox3_IsNaN(*args)
    def GetCorner(*args): return _csgeom.csBox3_GetCorner(*args)
    def GetEdgeInfo(*args): return _csgeom.csBox3_GetEdgeInfo(*args)
    def GetFaceEdges(*args): return _csgeom.csBox3_GetFaceEdges(*args)
    def GetCenter(*args): return _csgeom.csBox3_GetCenter(*args)
    def SetCenter(*args): return _csgeom.csBox3_SetCenter(*args)
    def SetSize(*args): return _csgeom.csBox3_SetSize(*args)
    def GetSize(*args): return _csgeom.csBox3_GetSize(*args)
    def GetSide(*args): return _csgeom.csBox3_GetSide(*args)
    def GetAxisPlane(*args): return _csgeom.csBox3_GetAxisPlane(*args)
    def GetVisibleSides(*args): return _csgeom.csBox3_GetVisibleSides(*args)
    OtherSide = staticmethod(_csgeom.csBox3_OtherSide)
    def GetEdge(*args): return _csgeom.csBox3_GetEdge(*args)
    def In(*args): return _csgeom.csBox3_In(*args)
    def Overlap(*args): return _csgeom.csBox3_Overlap(*args)
    def Contains(*args): return _csgeom.csBox3_Contains(*args)
    def Empty(*args): return _csgeom.csBox3_Empty(*args)
    def StartBoundingBox(*args): return _csgeom.csBox3_StartBoundingBox(*args)
    def AddBoundingVertex(*args): return _csgeom.csBox3_AddBoundingVertex(*args)
    def AddBoundingVertexSmart(*args): return _csgeom.csBox3_AddBoundingVertexSmart(*args)
    def AddBoundingVertexTest(*args): return _csgeom.csBox3_AddBoundingVertexTest(*args)
    def AddBoundingVertexSmartTest(*args): return _csgeom.csBox3_AddBoundingVertexSmartTest(*args)
    def AddBoundingBox(*args): return _csgeom.csBox3_AddBoundingBox(*args)
    def __init__(self, *args): 
        this = _csgeom.new_csBox3(*args)
        try: self.this.append(this)
        except: self.this = this
    def Set(*args): return _csgeom.csBox3_Set(*args)
    def SetMin(*args): return _csgeom.csBox3_SetMin(*args)
    def SetMax(*args): return _csgeom.csBox3_SetMax(*args)
    def GetMin(*args): return _csgeom.csBox3_GetMin(*args)
    def GetMax(*args): return _csgeom.csBox3_GetMax(*args)
    def Description(*args): return _csgeom.csBox3_Description(*args)
    def Split(*args): return _csgeom.csBox3_Split(*args)
    def TestSplit(*args): return _csgeom.csBox3_TestSplit(*args)
    def AdjacentX(*args): return _csgeom.csBox3_AdjacentX(*args)
    def AdjacentY(*args): return _csgeom.csBox3_AdjacentY(*args)
    def AdjacentZ(*args): return _csgeom.csBox3_AdjacentZ(*args)
    def Adjacent(*args): return _csgeom.csBox3_Adjacent(*args)
    def CalculatePointSegment(*args): return _csgeom.csBox3_CalculatePointSegment(*args)
    def GetConvexOutline(*args): return _csgeom.csBox3_GetConvexOutline(*args)
    def Between(*args): return _csgeom.csBox3_Between(*args)
    def ManhattanDistance(*args): return _csgeom.csBox3_ManhattanDistance(*args)
    def SquaredOriginDist(*args): return _csgeom.csBox3_SquaredOriginDist(*args)
    def SquaredOriginMaxDist(*args): return _csgeom.csBox3_SquaredOriginMaxDist(*args)
    def SquaredPosDist(*args): return _csgeom.csBox3_SquaredPosDist(*args)
    def SquaredPosMaxDist(*args): return _csgeom.csBox3_SquaredPosMaxDist(*args)
    def ProjectBox(*args): return _csgeom.csBox3_ProjectBox(*args)
    def ProjectOutline(*args): return _csgeom.csBox3_ProjectOutline(*args)
    def ProjectBoxAndOutline(*args): return _csgeom.csBox3_ProjectBoxAndOutline(*args)
    def __iadd__(*args): return _csgeom.csBox3___iadd__(*args)
    def __imul__(*args): return _csgeom.csBox3___imul__(*args)
    def TestIntersect(*args): return _csgeom.csBox3_TestIntersect(*args)
    def __mul__(*args): return _csgeom.csBox3___mul__(*args)
    def __ne__(*args): return _csgeom.csBox3___ne__(*args)
    def __gt__(*args): return _csgeom.csBox3___gt__(*args)
    def __add__(*args): return _csgeom.csBox3___add__(*args)
    def __lt__(*args): return _csgeom.csBox3___lt__(*args)
    __swig_destroy__ = _csgeom.delete_csBox3
    __del__ = lambda self : None;
csBox3_swigregister = _csgeom.csBox3_swigregister
csBox3_swigregister(csBox3)
csBox3_OtherSide = _csgeom.csBox3_OtherSide

class csOBB(csBox3):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csOBB(*args)
        try: self.this.append(this)
        except: self.this = this
    def AddBoundingVertex(*args): return _csgeom.csOBB_AddBoundingVertex(*args)
    def GetCorner(*args): return _csgeom.csOBB_GetCorner(*args)
    def GetMatrix(*args): return _csgeom.csOBB_GetMatrix(*args)
    def Volume(*args): return _csgeom.csOBB_Volume(*args)
    def FindOBB(*args): return _csgeom.csOBB_FindOBB(*args)
    def FindOBBAccurate(*args): return _csgeom.csOBB_FindOBBAccurate(*args)
    __swig_destroy__ = _csgeom.delete_csOBB
    __del__ = lambda self : None;
csOBB_swigregister = _csgeom.csOBB_swigregister
csOBB_swigregister(csOBB)

class csOBBFrozen(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def Copy(*args): return _csgeom.csOBBFrozen_Copy(*args)
    def __init__(self, *args): 
        this = _csgeom.new_csOBBFrozen(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetCorner(*args): return _csgeom.csOBBFrozen_GetCorner(*args)
    def ProjectOBB(*args): return _csgeom.csOBBFrozen_ProjectOBB(*args)
    __swig_destroy__ = _csgeom.delete_csOBBFrozen
    __del__ = lambda self : None;
csOBBFrozen_swigregister = _csgeom.csOBBFrozen_swigregister
csOBBFrozen_swigregister(csOBBFrozen)

class csSegment2(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csSegment2(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csSegment2
    __del__ = lambda self : None;
    def Set(*args): return _csgeom.csSegment2_Set(*args)
    def SetStart(*args): return _csgeom.csSegment2_SetStart(*args)
    def SetEnd(*args): return _csgeom.csSegment2_SetEnd(*args)
    def Start(*args): return _csgeom.csSegment2_Start(*args)
    def End(*args): return _csgeom.csSegment2_End(*args)
csSegment2_swigregister = _csgeom.csSegment2_swigregister
csSegment2_swigregister(csSegment2)

class csSegment3(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csSegment3(*args)
        try: self.this.append(this)
        except: self.this = this
    def Set(*args): return _csgeom.csSegment3_Set(*args)
    def SetStart(*args): return _csgeom.csSegment3_SetStart(*args)
    def SetEnd(*args): return _csgeom.csSegment3_SetEnd(*args)
    def Start(*args): return _csgeom.csSegment3_Start(*args)
    def End(*args): return _csgeom.csSegment3_End(*args)
    __swig_destroy__ = _csgeom.delete_csSegment3
    __del__ = lambda self : None;
csSegment3_swigregister = _csgeom.csSegment3_swigregister
csSegment3_swigregister(csSegment3)

class csPath(core.scfPath):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csPath(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csPath
    __del__ = lambda self : None;
    def Length(*args): return _csgeom.csPath_Length(*args)
    def QueryObject(*args): return _csgeom.csPath_QueryObject(*args)
    def CalculateAtTime(*args): return _csgeom.csPath_CalculateAtTime(*args)
    def GetCurrentIndex(*args): return _csgeom.csPath_GetCurrentIndex(*args)
    def GetTime(*args): return _csgeom.csPath_GetTime(*args)
    def SetTime(*args): return _csgeom.csPath_SetTime(*args)
    def SetTimes(*args): return _csgeom.csPath_SetTimes(*args)
    def GetTimes(*args): return _csgeom.csPath_GetTimes(*args)
    def SetPositionVectors(*args): return _csgeom.csPath_SetPositionVectors(*args)
    def SetUpVectors(*args): return _csgeom.csPath_SetUpVectors(*args)
    def SetForwardVectors(*args): return _csgeom.csPath_SetForwardVectors(*args)
    def SetPositionVector(*args): return _csgeom.csPath_SetPositionVector(*args)
    def SetUpVector(*args): return _csgeom.csPath_SetUpVector(*args)
    def SetForwardVector(*args): return _csgeom.csPath_SetForwardVector(*args)
    def GetPositionVector(*args): return _csgeom.csPath_GetPositionVector(*args)
    def GetUpVector(*args): return _csgeom.csPath_GetUpVector(*args)
    def GetForwardVector(*args): return _csgeom.csPath_GetForwardVector(*args)
    def GetInterpolatedPosition(*args): return _csgeom.csPath_GetInterpolatedPosition(*args)
    def GetInterpolatedUp(*args): return _csgeom.csPath_GetInterpolatedUp(*args)
    def GetInterpolatedForward(*args): return _csgeom.csPath_GetInterpolatedForward(*args)
    def GetDimensionValues(*args): return _csgeom.csPath_GetDimensionValues(*args)
    def GetDimensionValue(*args): return _csgeom.csPath_GetDimensionValue(*args)
    def InsertPoint(*args): return _csgeom.csPath_InsertPoint(*args)
    def RemovePoint(*args): return _csgeom.csPath_RemovePoint(*args)
csPath_swigregister = _csgeom.csPath_swigregister
csPath_swigregister(csPath)

class pycsTriangleMesh(core.iTriangleMesh):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def IncRef(*args): return _csgeom.pycsTriangleMesh_IncRef(*args)
    def DecRef(*args): return _csgeom.pycsTriangleMesh_DecRef(*args)
    def GetRefCount(*args): return _csgeom.pycsTriangleMesh_GetRefCount(*args)
    def QueryInterface(*args): return _csgeom.pycsTriangleMesh_QueryInterface(*args)
    def AddRefOwner(*args): return _csgeom.pycsTriangleMesh_AddRefOwner(*args)
    def RemoveRefOwner(*args): return _csgeom.pycsTriangleMesh_RemoveRefOwner(*args)
    def GetInterfaceMetadata(*args): return _csgeom.pycsTriangleMesh_GetInterfaceMetadata(*args)
pycsTriangleMesh_swigregister = _csgeom.pycsTriangleMesh_swigregister
pycsTriangleMesh_swigregister(pycsTriangleMesh)

class pycsTriangleMeshBox(core.iTriangleMesh):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def IncRef(*args): return _csgeom.pycsTriangleMeshBox_IncRef(*args)
    def DecRef(*args): return _csgeom.pycsTriangleMeshBox_DecRef(*args)
    def GetRefCount(*args): return _csgeom.pycsTriangleMeshBox_GetRefCount(*args)
    def QueryInterface(*args): return _csgeom.pycsTriangleMeshBox_QueryInterface(*args)
    def AddRefOwner(*args): return _csgeom.pycsTriangleMeshBox_AddRefOwner(*args)
    def RemoveRefOwner(*args): return _csgeom.pycsTriangleMeshBox_RemoveRefOwner(*args)
    def GetInterfaceMetadata(*args): return _csgeom.pycsTriangleMeshBox_GetInterfaceMetadata(*args)
pycsTriangleMeshBox_swigregister = _csgeom.pycsTriangleMeshBox_swigregister
pycsTriangleMeshBox_swigregister(pycsTriangleMeshBox)

class scfTriangleMeshPointer(core.iTriangleMesh):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def IncRef(*args): return _csgeom.scfTriangleMeshPointer_IncRef(*args)
    def DecRef(*args): return _csgeom.scfTriangleMeshPointer_DecRef(*args)
    def GetRefCount(*args): return _csgeom.scfTriangleMeshPointer_GetRefCount(*args)
    def QueryInterface(*args): return _csgeom.scfTriangleMeshPointer_QueryInterface(*args)
    def AddRefOwner(*args): return _csgeom.scfTriangleMeshPointer_AddRefOwner(*args)
    def RemoveRefOwner(*args): return _csgeom.scfTriangleMeshPointer_RemoveRefOwner(*args)
    def GetInterfaceMetadata(*args): return _csgeom.scfTriangleMeshPointer_GetInterfaceMetadata(*args)
scfTriangleMeshPointer_swigregister = _csgeom.scfTriangleMeshPointer_swigregister
scfTriangleMeshPointer_swigregister(scfTriangleMeshPointer)

class csTriangleMesh(pycsTriangleMesh):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csTriangleMesh(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csTriangleMesh
    __del__ = lambda self : None;
    def AddVertex(*args): return _csgeom.csTriangleMesh_AddVertex(*args)
    def GetVertexCount(*args): return _csgeom.csTriangleMesh_GetVertexCount(*args)
    def GetVertices(*args): return _csgeom.csTriangleMesh_GetVertices(*args)
    def AddTriangle(*args): return _csgeom.csTriangleMesh_AddTriangle(*args)
    def AddTriangleMesh(*args): return _csgeom.csTriangleMesh_AddTriangleMesh(*args)
    def GetTriangles(*args): return _csgeom.csTriangleMesh_GetTriangles(*args)
    def GetTriangle(*args): return _csgeom.csTriangleMesh_GetTriangle(*args)
    def GetTriangleCount(*args): return _csgeom.csTriangleMesh_GetTriangleCount(*args)
    def Clear(*args): return _csgeom.csTriangleMesh_Clear(*args)
    def SetSize(*args): return _csgeom.csTriangleMesh_SetSize(*args)
    def SetTriangles(*args): return _csgeom.csTriangleMesh_SetTriangles(*args)
    def Lock(*args): return _csgeom.csTriangleMesh_Lock(*args)
    def Unlock(*args): return _csgeom.csTriangleMesh_Unlock(*args)
    def GetFlags(*args): return _csgeom.csTriangleMesh_GetFlags(*args)
    def GetChangeNumber(*args): return _csgeom.csTriangleMesh_GetChangeNumber(*args)
    def __iadd__(*args): return _csgeom.csTriangleMesh___iadd__(*args)
csTriangleMesh_swigregister = _csgeom.csTriangleMesh_swigregister
csTriangleMesh_swigregister(csTriangleMesh)

class csTriangleVertex(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    pos = _swig_property(_csgeom.csTriangleVertex_pos_get, _csgeom.csTriangleVertex_pos_set)
    idx = _swig_property(_csgeom.csTriangleVertex_idx_get, _csgeom.csTriangleVertex_idx_set)
    con_triangles = _swig_property(_csgeom.csTriangleVertex_con_triangles_get, _csgeom.csTriangleVertex_con_triangles_set)
    con_vertices = _swig_property(_csgeom.csTriangleVertex_con_vertices_get, _csgeom.csTriangleVertex_con_vertices_set)
    def __init__(self, *args): 
        this = _csgeom.new_csTriangleVertex(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csTriangleVertex
    __del__ = lambda self : None;
    def AddTriangle(*args): return _csgeom.csTriangleVertex_AddTriangle(*args)
    def AddVertex(*args): return _csgeom.csTriangleVertex_AddVertex(*args)
csTriangleVertex_swigregister = _csgeom.csTriangleVertex_swigregister
csTriangleVertex_swigregister(csTriangleVertex)

class csTriangleVertices(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csTriangleVertices(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csTriangleVertices
    __del__ = lambda self : None;
    def UpdateVertices(*args): return _csgeom.csTriangleVertices_UpdateVertices(*args)
    def GetVertexCount(*args): return _csgeom.csTriangleVertices_GetVertexCount(*args)
    def GetVertex(*args): return _csgeom.csTriangleVertices_GetVertex(*args)
csTriangleVertices_swigregister = _csgeom.csTriangleVertices_swigregister
csTriangleVertices_swigregister(csTriangleVertices)

class csTriangleMeshBox(pycsTriangleMeshBox):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csTriangleMeshBox(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csTriangleMeshBox
    __del__ = lambda self : None;
    def SetBox(*args): return _csgeom.csTriangleMeshBox_SetBox(*args)
    def GetVertexCount(*args): return _csgeom.csTriangleMeshBox_GetVertexCount(*args)
    def GetVertices(self):
      return CSMutableArrayHelper(self.GetVertexByIndex, self.GetVertexCount)


    def GetTriangleCount(*args): return _csgeom.csTriangleMeshBox_GetTriangleCount(*args)
    def GetTriangles(self):
      return CSMutableArrayHelper(self.GetTriangleByIndex, self.GetTriangleCount)


    def Lock(*args): return _csgeom.csTriangleMeshBox_Lock(*args)
    def Unlock(*args): return _csgeom.csTriangleMeshBox_Unlock(*args)
    def GetFlags(*args): return _csgeom.csTriangleMeshBox_GetFlags(*args)
    def GetChangeNumber(*args): return _csgeom.csTriangleMeshBox_GetChangeNumber(*args)
csTriangleMeshBox_swigregister = _csgeom.csTriangleMeshBox_swigregister
csTriangleMeshBox_swigregister(csTriangleMeshBox)

class csTriangleMeshPointer(scfTriangleMeshPointer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csTriangleMeshPointer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csTriangleMeshPointer
    __del__ = lambda self : None;
    def GetVertexCount(*args): return _csgeom.csTriangleMeshPointer_GetVertexCount(*args)
    def GetVertices(self):
      return CSMutableArrayHelper(self.GetVertexByIndex, self.GetVertexCount)


    def GetTriangleCount(*args): return _csgeom.csTriangleMeshPointer_GetTriangleCount(*args)
    def GetTriangles(self):
      return CSMutableArrayHelper(self.GetTriangleByIndex, self.GetTriangleCount)


    def Lock(*args): return _csgeom.csTriangleMeshPointer_Lock(*args)
    def Unlock(*args): return _csgeom.csTriangleMeshPointer_Unlock(*args)
    def GetFlags(*args): return _csgeom.csTriangleMeshPointer_GetFlags(*args)
    def GetChangeNumber(*args): return _csgeom.csTriangleMeshPointer_GetChangeNumber(*args)
csTriangleMeshPointer_swigregister = _csgeom.csTriangleMeshPointer_swigregister
csTriangleMeshPointer_swigregister(csTriangleMeshPointer)

class csIntArray(core.CustomAllocated):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _csgeom.delete_csIntArray
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _csgeom.new_csIntArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetSize(*args): return _csgeom.csIntArray_GetSize(*args)
    def Get(*args): return _csgeom.csIntArray_Get(*args)
    def Put(*args): return _csgeom.csIntArray_Put(*args)
    def Push(*args): return _csgeom.csIntArray_Push(*args)
    def Merge(*args): return _csgeom.csIntArray_Merge(*args)
    def MergeSmart(*args): return _csgeom.csIntArray_MergeSmart(*args)
    def Pop(*args): return _csgeom.csIntArray_Pop(*args)
    def Top(*args): return _csgeom.csIntArray_Top(*args)
    def Insert(*args): return _csgeom.csIntArray_Insert(*args)
    def Contains(*args): return _csgeom.csIntArray_Contains(*args)
    def DeleteAll(*args): return _csgeom.csIntArray_DeleteAll(*args)
    def Truncate(*args): return _csgeom.csIntArray_Truncate(*args)
    def Empty(*args): return _csgeom.csIntArray_Empty(*args)
    def IsEmpty(*args): return _csgeom.csIntArray_IsEmpty(*args)
    def SetMinimalCapacity(*args): return _csgeom.csIntArray_SetMinimalCapacity(*args)
    def DeleteIndex(*args): return _csgeom.csIntArray_DeleteIndex(*args)
    def DeleteIndexFast(*args): return _csgeom.csIntArray_DeleteIndexFast(*args)
    def DeleteRange(*args): return _csgeom.csIntArray_DeleteRange(*args)
    def __eq__(*args): return _csgeom.csIntArray___eq__(*args)
    def __ne__(*args): return _csgeom.csIntArray___ne__(*args)
    def GetAllocator(*args): return _csgeom.csIntArray_GetAllocator(*args)
    def __getitem__(*args): return _csgeom.csIntArray___getitem__(*args)
    def __contains__(*args): return _csgeom.csIntArray___contains__(*args)
    def __delitem__(*args): return _csgeom.csIntArray___delitem__(*args)
    def __len__(*args): return _csgeom.csIntArray___len__(*args)
    def append(*args): return _csgeom.csIntArray_append(*args)
    def content_iterator(self):
            for idx in xrange(len(self)):
                    yield self.__getitem__(idx)
    def __iter__(self): return self.content_iterator()  
csIntArray_swigregister = _csgeom.csIntArray_swigregister
csIntArray_swigregister(csIntArray)

class csIntArrayArray(core.CustomAllocated):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _csgeom.delete_csIntArrayArray
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _csgeom.new_csIntArrayArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetSize(*args): return _csgeom.csIntArrayArray_GetSize(*args)
    def Get(*args): return _csgeom.csIntArrayArray_Get(*args)
    def Put(*args): return _csgeom.csIntArrayArray_Put(*args)
    def Push(*args): return _csgeom.csIntArrayArray_Push(*args)
    def Merge(*args): return _csgeom.csIntArrayArray_Merge(*args)
    def MergeSmart(*args): return _csgeom.csIntArrayArray_MergeSmart(*args)
    def Pop(*args): return _csgeom.csIntArrayArray_Pop(*args)
    def Top(*args): return _csgeom.csIntArrayArray_Top(*args)
    def Insert(*args): return _csgeom.csIntArrayArray_Insert(*args)
    def DeleteAll(*args): return _csgeom.csIntArrayArray_DeleteAll(*args)
    def Truncate(*args): return _csgeom.csIntArrayArray_Truncate(*args)
    def Empty(*args): return _csgeom.csIntArrayArray_Empty(*args)
    def IsEmpty(*args): return _csgeom.csIntArrayArray_IsEmpty(*args)
    def SetMinimalCapacity(*args): return _csgeom.csIntArrayArray_SetMinimalCapacity(*args)
    def DeleteIndex(*args): return _csgeom.csIntArrayArray_DeleteIndex(*args)
    def DeleteIndexFast(*args): return _csgeom.csIntArrayArray_DeleteIndexFast(*args)
    def DeleteRange(*args): return _csgeom.csIntArrayArray_DeleteRange(*args)
    def __eq__(*args): return _csgeom.csIntArrayArray___eq__(*args)
    def __ne__(*args): return _csgeom.csIntArrayArray___ne__(*args)
    def GetAllocator(*args): return _csgeom.csIntArrayArray_GetAllocator(*args)
    def __getitem__(*args): return _csgeom.csIntArrayArray___getitem__(*args)
    def __contains__(*args): return _csgeom.csIntArrayArray___contains__(*args)
    def __delitem__(*args): return _csgeom.csIntArrayArray___delitem__(*args)
    def __len__(*args): return _csgeom.csIntArrayArray___len__(*args)
    def append(*args): return _csgeom.csIntArrayArray_append(*args)
    def content_iterator(self):
            for idx in xrange(len(self)):
                    yield self.__getitem__(idx)
    def __iter__(self): return self.content_iterator()  
csIntArrayArray_swigregister = _csgeom.csIntArrayArray_swigregister
csIntArrayArray_swigregister(csIntArrayArray)

class csTriangleMinMax(csTriangle):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    minx = _swig_property(_csgeom.csTriangleMinMax_minx_get, _csgeom.csTriangleMinMax_minx_set)
    maxx = _swig_property(_csgeom.csTriangleMinMax_maxx_get, _csgeom.csTriangleMinMax_maxx_set)
    def __init__(self, *args): 
        this = _csgeom.new_csTriangleMinMax(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csTriangleMinMax
    __del__ = lambda self : None;
csTriangleMinMax_swigregister = _csgeom.csTriangleMinMax_swigregister
csTriangleMinMax_swigregister(csTriangleMinMax)

class csTriangleMeshEdge(core.CustomAllocated):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    vt1 = _swig_property(_csgeom.csTriangleMeshEdge_vt1_get, _csgeom.csTriangleMeshEdge_vt1_set)
    vt2 = _swig_property(_csgeom.csTriangleMeshEdge_vt2_get, _csgeom.csTriangleMeshEdge_vt2_set)
    tri1 = _swig_property(_csgeom.csTriangleMeshEdge_tri1_get, _csgeom.csTriangleMeshEdge_tri1_set)
    tri2 = _swig_property(_csgeom.csTriangleMeshEdge_tri2_get, _csgeom.csTriangleMeshEdge_tri2_set)
    active = _swig_property(_csgeom.csTriangleMeshEdge_active_get, _csgeom.csTriangleMeshEdge_active_set)
    def __init__(self, *args): 
        this = _csgeom.new_csTriangleMeshEdge(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csTriangleMeshEdge
    __del__ = lambda self : None;
csTriangleMeshEdge_swigregister = _csgeom.csTriangleMeshEdge_swigregister
csTriangleMeshEdge_swigregister(csTriangleMeshEdge)

class csTriangleMeshTools(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    CalculateNormals = staticmethod(_csgeom.csTriangleMeshTools_CalculateNormals)
    CalculatePlanes = staticmethod(_csgeom.csTriangleMeshTools_CalculatePlanes)
    CalculateEdges = staticmethod(_csgeom.csTriangleMeshTools_CalculateEdges)
    CheckActiveEdges = staticmethod(_csgeom.csTriangleMeshTools_CheckActiveEdges)
    CalculateOutline = staticmethod(_csgeom.csTriangleMeshTools_CalculateOutline)
    IsMeshClosed = staticmethod(_csgeom.csTriangleMeshTools_IsMeshClosed)
    IsMeshConvex = staticmethod(_csgeom.csTriangleMeshTools_IsMeshConvex)
    CloseMesh = staticmethod(_csgeom.csTriangleMeshTools_CloseMesh)
    SortTrianglesX = staticmethod(_csgeom.csTriangleMeshTools_SortTrianglesX)
    PointInClosedMesh = staticmethod(_csgeom.csTriangleMeshTools_PointInClosedMesh)
    LineInClosedMesh = staticmethod(_csgeom.csTriangleMeshTools_LineInClosedMesh)
    BoxInClosedMesh = staticmethod(_csgeom.csTriangleMeshTools_BoxInClosedMesh)
    CalculateVertexConnections = staticmethod(_csgeom.csTriangleMeshTools_CalculateVertexConnections)
    def __init__(self, *args): 
        this = _csgeom.new_csTriangleMeshTools(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csTriangleMeshTools
    __del__ = lambda self : None;
csTriangleMeshTools_swigregister = _csgeom.csTriangleMeshTools_swigregister
csTriangleMeshTools_swigregister(csTriangleMeshTools)
csTriangleMeshTools_CalculateNormals = _csgeom.csTriangleMeshTools_CalculateNormals
csTriangleMeshTools_CalculatePlanes = _csgeom.csTriangleMeshTools_CalculatePlanes
csTriangleMeshTools_CalculateEdges = _csgeom.csTriangleMeshTools_CalculateEdges
csTriangleMeshTools_CheckActiveEdges = _csgeom.csTriangleMeshTools_CheckActiveEdges
csTriangleMeshTools_CalculateOutline = _csgeom.csTriangleMeshTools_CalculateOutline
csTriangleMeshTools_IsMeshClosed = _csgeom.csTriangleMeshTools_IsMeshClosed
csTriangleMeshTools_IsMeshConvex = _csgeom.csTriangleMeshTools_IsMeshConvex
csTriangleMeshTools_CloseMesh = _csgeom.csTriangleMeshTools_CloseMesh
csTriangleMeshTools_SortTrianglesX = _csgeom.csTriangleMeshTools_SortTrianglesX
csTriangleMeshTools_PointInClosedMesh = _csgeom.csTriangleMeshTools_PointInClosedMesh
csTriangleMeshTools_LineInClosedMesh = _csgeom.csTriangleMeshTools_LineInClosedMesh
csTriangleMeshTools_BoxInClosedMesh = _csgeom.csTriangleMeshTools_BoxInClosedMesh
csTriangleMeshTools_CalculateVertexConnections = _csgeom.csTriangleMeshTools_CalculateVertexConnections

CS_VEC_FORWARD = csVector3(0,0,1)
CS_VEC_BACKWARD = csVector3(0,0,-1)
CS_VEC_RIGHT = csVector3(1,0,0)
CS_VEC_LEFT = csVector3(-1,0,0)
CS_VEC_UP = csVector3(0,1,0)
CS_VEC_DOWN = csVector3(0,-1,0)
CS_VEC_ROT_RIGHT = csVector3(0,1,0)
CS_VEC_ROT_LEFT = csVector3(0,-1,0)
CS_VEC_TILT_RIGHT = -csVector3(0,0,1)
CS_VEC_TILT_LEFT = -csVector3(0,0,-1)
CS_VEC_TILT_UP = -csVector3(1,0,0)
CS_VEC_TILT_DOWN = -csVector3(-1,0,0)




