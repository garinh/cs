;-------------------------------------------
; Dynavis settings
;-------------------------------------------

; The number of times to reduce the coverage buffer relative to the
; size of the screen. If this value is set to 0 then the coverage buffer
; will use the same size as the screen. If set to 1 then the coverage
; buffer dimensions will be halfed (i.e. 320x240 for a 640x480 screen).
; Note that using higher values here will make Dynavis overhead less
; but it can also introduce culling errors. Note that using a smaller coverage
; buffer does not always make the end result faster. The tiles will be bigger
; (relative to screen size) so this may be a negative factor. However it
; is probably good to use ReduceCoverageBuffer = 1 if the display size
; is bigger.
Culling.Dynavis.ReduceCoverageBuffer = 1

; Disable or enable frustum culling.
Culling.Dynavis.FrustumCull = true

; Set the type of coverage culling to do. Can be either
; 'outline', 'polygon', or 'none'.
Culling.Dynavis.Coverage = outline

; Enables history culling (i.e. remembering a visible object as being visible
; for a few frames).
Culling.Dynavis.History = true

; Enables write queue (delay expensive write in coverage buffer).
Culling.Dynavis.WriteQueue = true

; Ignore small occluders.
Culling.Dynavis.IgnoreSmall = false

; Clamp occluders.
Culling.Dynavis.ClampOccluder = false

; Visible Point Tracking.
Culling.Dynavis.VPT = true

; Outline splatting (currently buggy, do not enable!)
Culling.Dynavis.OutlineSplatting = false

; Insert an inverted clipper for portals.
Culling.Dynavis.InvertedClipper = true

; Ignore bad occluders (occluders that didn't modify the coverage or
; depth buffer) for a few frames.
Culling.Dynavis.IgnoreBadOccluders = true

; Dynavis will mark bad occluders as bad and will retry them after a while.
; Sometimes it is possible that objects are not culled by one occluder but
; only with a combination of occluders. If all those occluders are marked
; as bad then it is unlikely that Dynavis will be able to recover from that as
; the occluders will most likely not be retried at the same time. To solve
; this problem Dynavis will retry all potential occluders from time to time.
; If you increase this number below then this will happen less often.
Culling.Dynavis.RetryOccluders = 50

; Dynavis will count how many objects are occluded in every tile that
; is covered by an occluder. If that total number is less then the thresshold
; below then the occluder will be marked as bad for a few frames.
; Set this to -1 to disable this.
Culling.Dynavis.BadOccluderThresshold = 10

