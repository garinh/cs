<!--
  Copyright (C) 2007 by Frank Richter
	    (C) 2007 by Jorrit Tyberghein

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Library General Public
  License as published by the Free Software Foundation; either
  version 2 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Library General Public License for more details.

  You should have received a copy of the GNU Library General Public
  License along with this library; if not, write to the Free
  Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-->
<snippet>
  <technique priority="100">
    <combiner name="cg" plugin="crystalspace.graphics3d.shader.combiner.glcg" />
    
    <input file="/shader-snippets/texCoord.inp"	/>

    <input name="position" type="position4_camera" />
    
    <input name="texAlpha1" type="tex2d" default="complex">
      <block location="pass">
	  <texture name="tex alpha map 1" destination="fragmentIn.texAlpha1" />
      </block>
      
      <block location="cg:fragmentIn">
	  <uniform type="tex2d" name="texAlpha1" />
      </block>
      
      <block location="cg:fragmentMain">
	  texAlpha1 = fragmentIn.texAlpha1;
      </block>
    </input>

    <input name="texAlpha2" type="tex2d" default="complex">
      <block location="pass">
	  <texture name="tex alpha map 2" destination="fragmentIn.texAlpha2" />
      </block>
      
      <block location="cg:fragmentIn">
	  <uniform type="tex2d" name="texAlpha2" />
      </block>
      
      <block location="cg:fragmentMain">
	  texAlpha2 = fragmentIn.texAlpha2;
      </block>
    </input>

    <input name="texAlpha3" type="tex2d" default="complex">
      <block location="pass">
	  <texture name="tex alpha map 3" destination="fragmentIn.texAlpha3" />
      </block>
      
      <block location="cg:fragmentIn">
	  <uniform type="tex2d" name="texAlpha3" />
      </block>
      
      <block location="cg:fragmentMain">
	  texAlpha3 = fragmentIn.texAlpha3;
      </block>
    </input>

    <input name="texDiffuse1" type="tex2d" default="complex">
      <block location="pass">
	  <texture name="tex diffuse 1" destination="fragmentIn.texDiffuse1" />
      </block>
      
      <block location="cg:fragmentIn">
	  <uniform type="tex2d" name="texDiffuse1" />
      </block>
      
      <block location="cg:fragmentMain">
	  texDiffuse1 = fragmentIn.texDiffuse1;
      </block>
    </input>

    <input name="texDiffuse2" type="tex2d" default="complex">
      <block location="pass">
	  <texture name="tex diffuse 2" destination="fragmentIn.texDiffuse2" />
      </block>
      
      <block location="cg:fragmentIn">
	  <uniform type="tex2d" name="texDiffuse2" />
      </block>
      
      <block location="cg:fragmentMain">
	  texDiffuse2 = fragmentIn.texDiffuse2;
      </block>
    </input>

    <input name="texDiffuse3" type="tex2d" default="complex">
      <block location="pass">
	  <texture name="tex diffuse 3" destination="fragmentIn.texDiffuse3" />
      </block>
      
      <block location="cg:fragmentIn">
	  <uniform type="tex2d" name="texDiffuse3" />
      </block>
      
      <block location="cg:fragmentMain">
	  texDiffuse3 = fragmentIn.texDiffuse3;
      </block>
    </input>

    <input name="texDiffuse4" type="tex2d" default="complex">
      <block location="pass">
	  <texture name="tex diffuse 4" destination="fragmentIn.texDiffuse4" />
      </block>
      
      <block location="cg:fragmentIn">
	  <uniform type="tex2d" name="texDiffuse4" />
      </block>
      
      <block location="cg:fragmentMain">
	  texDiffuse4 = fragmentIn.texDiffuse4;
      </block>
    </input>

    <input name="texDiffuse5" type="tex2d" default="complex">
      <block location="pass">
	  <texture name="tex diffuse 5" destination="fragmentIn.texDiffuse5" />
      </block>
      
      <block location="cg:fragmentIn">
	  <uniform type="tex2d" name="texDiffuse5" />
      </block>
      
      <block location="cg:fragmentMain">
	  texDiffuse5 = fragmentIn.texDiffuse5;
      </block>
    </input>

    <input name="texDiffuse6" type="tex2d" default="complex">
      <block location="pass">
	  <texture name="tex diffuse 6" destination="fragmentIn.texDiffuse6" />
      </block>
      
      <block location="cg:fragmentIn">
	  <uniform type="tex2d" name="texDiffuse6" />
      </block>
      
      <block location="cg:fragmentMain">
	  texDiffuse6 = fragmentIn.texDiffuse6;
      </block>
    </input>

    <input name="texDiffuse7" type="tex2d" default="complex">
      <block location="pass">
	  <texture name="tex diffuse 7" destination="fragmentIn.texDiffuse7" />
      </block>
      
      <block location="cg:fragmentIn">
	  <uniform type="tex2d" name="texDiffuse7" />
      </block>
      
      <block location="cg:fragmentMain">
	  texDiffuse7 = fragmentIn.texDiffuse7;
      </block>
    </input>

    <input name="texDiffuse8" type="tex2d" default="complex">
      <block location="pass">
	  <texture name="tex diffuse 8" destination="fragmentIn.texDiffuse8" />
      </block>
      
      <block location="cg:fragmentIn">
	  <uniform type="tex2d" name="texDiffuse8" />
      </block>
      
      <block location="cg:fragmentMain">
	  texDiffuse8 = fragmentIn.texDiffuse8;
      </block>
    </input>

    <input name="texDiffuse9" type="tex2d" default="complex">
      <block location="pass">
	  <texture name="tex diffuse 9" destination="fragmentIn.texDiffuse9" />
      </block>
      
      <block location="cg:fragmentIn">
	  <uniform type="tex2d" name="texDiffuse9" />
      </block>
      
      <block location="cg:fragmentMain">
	  texDiffuse9 = fragmentIn.texDiffuse9;
      </block>
    </input>

    <input name="texDiffuse10" type="tex2d" default="complex">
      <block location="pass">
	  <texture name="tex diffuse 10" destination="fragmentIn.texDiffuse10" />
      </block>
      
      <block location="cg:fragmentIn">
	  <uniform type="tex2d" name="texDiffuse10" />
      </block>
      
      <block location="cg:fragmentMain">
	  texDiffuse10 = fragmentIn.texDiffuse10;
      </block>
    </input>

    <input name="texDiffuse11" type="tex2d" default="complex">
      <block location="pass">
	  <texture name="tex diffuse 11" destination="fragmentIn.texDiffuse11" />
      </block>
      
      <block location="cg:fragmentIn">
	  <uniform type="tex2d" name="texDiffuse11" />
      </block>
      
      <block location="cg:fragmentMain">
	  texDiffuse11 = fragmentIn.texDiffuse11;
      </block>
    </input>

    <input name="texture_scale" type="float2" default="complex">
      <block location="pass">
	  <shadervar name="texture scale" type="vector2">1,1</shadervar>
      </block>
      
      <block location="cg:variablemap">
	  <variablemap variable="texture scale" destination="fragmentIn.texture_scale" />
      </block>
      
      <block location="cg:fragmentIn">
	  <uniform type="float2" name="texture_scale" />
      </block>
      
      <block location="cg:fragmentMain">
	  texture_scale = fragmentIn.texture_scale;
      </block>
    </input>
    
    <block location="cg:vertexMain">
      surfaceColor = float4(0);
      surfaceColor_attr_perfragment = true;
    </block>
    
    <block location="cg:fragmentMain">
      surfaceColor = tex2D (texDiffuse1, texCoord*texture_scale);
      surfaceColor *= tex2D (texAlpha1, texCoord).x;

      float4 tempColor = tex2D (texDiffuse2, texCoord*texture_scale);
      tempColor *= tex2D (texAlpha1, texCoord).y;
      surfaceColor += tempColor;

      tempColor = tex2D (texDiffuse3, texCoord*texture_scale);
      tempColor *= tex2D (texAlpha1, texCoord).z;
      surfaceColor += tempColor;

      tempColor = tex2D (texDiffuse4, texCoord*texture_scale);
      tempColor *= tex2D (texAlpha1, texCoord).w;
      surfaceColor += tempColor;

      tempColor = tex2D (texDiffuse5, texCoord*texture_scale);
      tempColor *= tex2D (texAlpha2, texCoord).x;
      surfaceColor += tempColor;

      tempColor = tex2D (texDiffuse6, texCoord*texture_scale);
      tempColor *= tex2D (texAlpha2, texCoord).y;
      surfaceColor += tempColor;

      tempColor = tex2D (texDiffuse7, texCoord*texture_scale);
      tempColor *= tex2D (texAlpha2, texCoord).z;
      surfaceColor += tempColor;

      tempColor = tex2D (texDiffuse8, texCoord*texture_scale);
      tempColor *= tex2D (texAlpha2, texCoord).w;
      surfaceColor += tempColor;

      tempColor = tex2D (texDiffuse9, texCoord*texture_scale);
      tempColor *= tex2D (texAlpha3, texCoord).x;
      surfaceColor += tempColor;

      tempColor = tex2D (texDiffuse10, texCoord*texture_scale);
      tempColor *= tex2D (texAlpha3, texCoord).y;
      surfaceColor += tempColor;

      tempColor = tex2D (texDiffuse11, texCoord*texture_scale);
      tempColor *= tex2D (texAlpha3, texCoord).z;
      surfaceColor += tempColor;

      surfaceColor_attr_perfragment = true;
    </block>
    
    <output name="surfaceColor" type="rgba">
      <attribute name="perfragment" type="bool" />
    </output>
  </technique>
</snippet>
