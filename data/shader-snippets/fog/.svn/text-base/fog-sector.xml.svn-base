<!--
  Copyright (C) 2007 by Frank Richter
	    (C) 2007 by Jorrit Tyberghein

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Library General Public
  License as published by the Free Software Foundation; either
  version 2 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Library General Public License for more details.

  You should have received a copy of the GNU Library General Public
  License along with this library; if not, write to the Free
  Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-->
<snippet>
  <technique priority="100">
    <combiner name="cg" plugin="crystalspace.graphics3d.shader.combiner.glcg" />

    <input name="litColor" type="rgba" />
    <input name="eyePos" type="position4_camera" />
    
    <block location="cg:vertexIn">
      <uniform type="float4" name="fogPlaneS" />
      <uniform type="float4" name="fogPlaneT" />
    </block>

    <block location="cg:fragmentIn">
      <uniform type="tex2d" name="fogTex" />
      <uniform type="rgba" name="fogColor" />
      <uniform type="float" name="fogFadeEnd" />
      <uniform type="float" name="fogFadeStart" />
      <uniform type="float" name="fogLimit" />
    </block>
    
    <block location="cg:vertexToFragment">
      <varying type="texcoord2" name="fogTC" />
    </block>
    
    <block location="cg:vertexMain">
      fogTC.x = dot (eyePos, vertexIn.fogPlaneS);
      fogTC.y = dot (eyePos, vertexIn.fogPlaneT);
    </block>
    
    <block location="cg:variablemap">
      <?if vars."fog density".float &gt; 0 ?>
	<variablemap variable="fog color" destination="fragmentIn.fogColor" />
	<variablemap variable="fog fade start" destination="fragmentIn.fogFadeStart" />
	<variablemap variable="fog fade end" destination="fragmentIn.fogFadeEnd" />
	<variablemap variable="fog limit" destination="fragmentIn.fogLimit" />
	<!-- See the glshader_fixed plugin source for a detailed explanation 
	      of the formular below. -->
	<variablemap destination="vertexIn.fogPlaneS" type="expr">
	  <sexp>
	  (if (&gt; (elt3 fogplane) 0)
	    (make-vector 
	      0 
	      0 
	      "fog density" 
	      (- (min (max (* (elt4 fogplane) "fog density") -1) 0) (* 0.1 "fog density"))
	    )
	    (make-vector 0 0 "fog density" (* -0.1 "fog density"))
	  )
	  </sexp>
	</variablemap>
	<variablemap destination="vertexIn.fogPlaneT" type="expr">
	  <sexp>
	  (if (&gt; (elt3 fogplane) 0)
	    (make-vector
	      (/ (* (elt1 fogplane) "fog density") (elt3 fogplane))
	      (/ (* (elt2 fogplane) "fog density") (elt3 fogplane))
	      "fog density"
	      (+ (min (max (pow (+ 1 (* (elt4 fogplane) 0.2)) 5) 0) 1)
		  (* "fog density" (- (/ (elt4 fogplane) (elt3 fogplane)) 0.1)))
	    )
	    (make-vector 0 0 0 1)
	  )
	  </sexp>
	</variablemap>
      <?endif?>
    </block>
    
    <block location="pass">
      <!-- We need the fog lookup texture -->
      <texture name="standardtex fog" destination="fragmentIn.fogTex" />
    </block>
    
    <block location="cg:fragmentMain">
      foggedColor = litColor;
      <?if vars."fog density".float &gt; 0 ?>
        float intensity = tex2D (fragmentIn.fogTex, fogTC).a;
        float distance = length(eyePos);
        /* CS_FOG_MODE_LINEAR */
        <?if vars."fog mode".int == consts.CS_FOG_MODE_LINEAR ?>
          if(distance >= fragmentIn.fogFadeEnd && (fragmentIn.fogLimit > distance || fragmentIn.fogFadeEnd >= fragmentIn.fogLimit))
            foggedColor = lerp (litColor, fragmentIn.fogColor, intensity);
          else if(distance >= fragmentIn.fogFadeStart && fragmentIn.fogFadeEnd > distance)
            foggedColor = lerp (litColor, fragmentIn.fogColor, intensity *
                                (fragmentIn.fogFadeEnd - distance) /
                                (fragmentIn.fogFadeEnd - fragmentIn.fogFadeStart));
        <?elsif vars."fog mode".int == consts.CS_FOG_MODE_CRYSTALSPACE ?>
          foggedColor = lerp (litColor, fragmentIn.fogColor, intensity);
        <?endif?>
      <?endif?>
    </block>
    
    <output name="foggedColor" type="rgba" />
  </technique>
</snippet>
