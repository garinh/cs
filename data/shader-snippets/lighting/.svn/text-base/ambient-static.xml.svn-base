<!--
  Copyright (C) 2008 by Frank Richter

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Library General Public
  License as published by the Free Software Foundation; either
  version 2 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Library General Public License for more details.

  You should have received a copy of the GNU Library General Public
  License along with this library; if not, write to the Free
  Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-->
<snippet type="compound">
  <technique priority="100">
    <snippet id="ambient_static">
      <technique priority="150"
                 condition='(vars."pass number".int == 0) &amp;&amp; (vars."pass do_ambient") &amp;&amp; (vars."tex lightmap dir 1".texture || vars."static color dir 1".buffer)'>
	<combiner name="cg" plugin="crystalspace.graphics3d.shader.combiner.glcg" />
	
	<input name="combinedAmbient" type="rgb" default="complex" private="yes">
	  <block location="cg:variablemap">
	    <variablemap variable="light ambient"
	      destination="fragmentIn.combinedAmbient" />
	  </block>
	  
	  <block location="cg:fragmentIn">
	    <uniform type="rgb" name="combinedAmbient" />
	  </block>
	  
	  <block location="cg:fragmentMain">
	    combinedAmbient = fragmentIn.combinedAmbient;
	  </block>
	</input>
	
	<input name="dynamicAmbient" type="rgb" default="complex" private="yes">
	  <block location="cg:variablemap">
	    <variablemap variable="dynamic ambient"
	      destination="fragmentIn.dynamicAmbient" />
	  </block>
	  
	  <block location="cg:fragmentIn">
	    <uniform type="rgb" name="dynamicAmbient" />
	  </block>
	  
	  <block location="cg:fragmentMain">
	    dynamicAmbient = fragmentIn.dynamicAmbient;
	  </block>
	</input>
	<input name="occlusionFactor" type="float" default="value" defval="1">
	  <attribute name="perfragment" type="bool" defval="false" />
	</input>
	
	<input name="litColor" type="rgb" default="complex" private="yes">
	  <block location="pass">
	    <buffer source="static color" destination="vertexIn.litColor" />
	  </block>
	  
	  <block location="cg:vertexIn">
	    <varying type="rgb" name="litColor" />
	  </block>
	  
	  <block location="cg:vertexToFragment">
	    <varying type="rgb" name="litColor" />
	  </block>
	  
	  <block location="cg:vertexMain">
	    litColor = vertexIn.litColor;
	  </block>
	</input>
	<input name="color_dir1" type="rgb" default="complex" private="yes">
	  <block location="pass">
	    <buffer source="static color dir 1" destination="vertexIn.color_dir1" />
	  </block>
	  
	  <block location="cg:vertexIn">
	    <varying type="rgb" name="color_dir1" />
	  </block>
	  
	  <block location="cg:vertexToFragment">
	    <varying type="rgb" name="color_dir1" />
	  </block>
	  
	  <block location="cg:vertexMain">
	    color_dir1 = vertexIn.color_dir1;
	  </block>
	</input>
	<input name="color_dir2" type="rgb" default="complex" private="yes">
	  <block location="pass">
	    <buffer source="static color dir 2" destination="vertexIn.color_dir2" />
	  </block>
	  
	  <block location="cg:vertexIn">
	    <varying type="rgb" name="color_dir2" />
	  </block>
	  
	  <block location="cg:vertexToFragment">
	    <varying type="rgb" name="color_dir2" />
	  </block>
	  
	  <block location="cg:vertexMain">
	    color_dir2 = vertexIn.color_dir2;
	  </block>
	</input>
	<input name="color_dir3" type="rgb" default="complex" private="yes">
	  <block location="pass">
	    <buffer source="static color dir 3" destination="vertexIn.color_dir3" />
	  </block>
	  
	  <block location="cg:vertexIn">
	    <varying type="rgb" name="color_dir3" />
	  </block>
	  
	  <block location="cg:vertexToFragment">
	    <varying type="rgb" name="color_dir3" />
	  </block>
	  
	  <block location="cg:vertexMain">
	    color_dir3 = vertexIn.color_dir3;
	  </block>
	</input>
	
	<input name="texCoordLM" type="texcoord2" default="complex">
	  <block location="pass">
	    <buffer source="texture coordinate lightmap" 
		    destination="vertexIn.texcoordLM" />
	  </block>
	  
	  <block location="cg:vertexToFragment">
	    <varying type="texcoord2" name="texCoordLM" />
	  </block>
	  
	  <block location="cg:vertexIn">
	    <varying type="texcoord2" name="texcoordLM" />
	  </block>
	  
	  <block location="cg:vertexMain">
	    texCoordLM = vertexIn.texcoordLM;
	  </block>
	</input>
	
	<!-- Surface normal -->
	<input name="normal" type="normal_tangent" default="value" defval="0,0,1">
	  <attribute name="perfragment" type="bool" defval="false" />
	</input>
	
	<input name="lightmap" type="tex2d" default="complex" private="yes">
	  <block location="pass">
	    <texture name="tex lightmap" destination="fragmentIn.lightmap" />
	  </block>
	  
	  <block location="cg:fragmentIn">
	    <uniform type="tex2d" name="lightmap" />
	  </block>
	  
	  <block location="cg:fragmentMain">
	    lightmap = fragmentIn.lightmap;
	  </block>
	</input>
	<input name="lightmap_dir1" type="tex2d" default="complex" private="yes">
	  <block location="pass">
	    <texture name="tex lightmap dir 1" destination="fragmentIn.lightmap_dir1" />
	  </block>
	  
	  <block location="cg:fragmentIn">
	    <uniform type="tex2d" name="lightmap_dir1" />
	  </block>
	  
	  <block location="cg:fragmentMain">
	    lightmap_dir1 = fragmentIn.lightmap_dir1;
	  </block>
	</input>
	<input name="lightmap_dir2" type="tex2d" default="complex" private="yes">
	  <block location="pass">
	    <texture name="tex lightmap dir 2" destination="fragmentIn.lightmap_dir2" />
	  </block>
	  
	  <block location="cg:fragmentIn">
	    <uniform type="tex2d" name="lightmap_dir2" />
	  </block>
	  
	  <block location="cg:fragmentMain">
	    lightmap_dir2 = fragmentIn.lightmap_dir2;
	  </block>
	</input>
	<input name="lightmap_dir3" type="tex2d" default="complex" private="yes">
	  <block location="pass">
	    <texture name="tex lightmap dir 3" destination="fragmentIn.lightmap_dir3" />
	  </block>
	  
	  <block location="cg:fragmentIn">
	    <uniform type="tex2d" name="lightmap_dir3" />
	  </block>
	  
	  <block location="cg:fragmentMain">
	    lightmap_dir3 = fragmentIn.lightmap_dir3;
	  </block>
	</input>
	
	<input file="/shader-snippets/lightScale.inp" private="yes" />
	
	<block location="cg:definitions">
	  <?Include /shader-snippets/lighting/directional_lms.cginc ?>
	</block>
	
	<block location="cg:fragmentMain">
	  float3 ambient_dynamic = dynamicAmbient * occlusionFactor;
	  float3 ambient_static;
	  <?if vars."tex lightmap dir 1".texture || vars."static color dir 1".buffer ?>
	  <![CDATA[
	  // Utilize directional LM/colors only if normal is changed per-fragment
	  if (normal_attr_perfragment)
	  {
	    float3 baseLit[3];
	  ]]>
	  <?if vars."tex lightmap dir 1".texture ?>
	  <![CDATA[
	    baseLit[0] = tex2D (lightmap_dir1, texCoordLM).rgb;
	    baseLit[1] = tex2D (lightmap_dir2, texCoordLM).rgb;
	    baseLit[2] = tex2D (lightmap_dir3, texCoordLM).rgb;
	  ]]>
	  <?else?>
	  <![CDATA[
	    baseLit[0] = color_dir1;
	    baseLit[1] = color_dir2;
	    baseLit[2] = color_dir3;
	  ]]>
	  <?endif?>
	  <![CDATA[
	    ambient_static = 2 * ComputeDLMColor (normal, baseLit);
	    ambient_attr_perfragment = true;
	  }
	  else
	  // Use plain ol' less detailed lighting otherwise
	  ]]>
	  <?endif?>
	  {
	  <?if vars."tex lightmap".texture ?>
	    ambient_static = 2 * tex2D (lightmap, texCoordLM).rgb;
	    ambient_attr_perfragment = true;
	  <?else ?>
	    ambient_static = 2 * litColor;
	    ambient_attr_perfragment = occlusionFactor_attr_perfragment;
	  <?endif?>
	  }
	  ambient = (ambient_dynamic + ambient_static)*lightScale.x;
	</block>
	
	<output name="ambient" type="rgb">
	  <attribute name="perfragment" type="bool" />
	</output>
      </technique>
    
      <technique priority="100">
	<combiner name="cg" plugin="crystalspace.graphics3d.shader.combiner.glcg" />
	
	<input name="combinedAmbient" type="rgb" default="complex" private="yes">
	  <block location="cg:variablemap">
	    <variablemap variable="light ambient"
			destination="fragmentIn.combinedAmbient" />
	  </block>
	  
	  <block location="cg:fragmentIn">
	    <uniform type="rgb" name="combinedAmbient" />
	  </block>
	  
	  <block location="cg:fragmentMain">
	    combinedAmbient = fragmentIn.combinedAmbient;
	  </block>
	</input>
	
	<input name="dynamicAmbientScaled" type="rgb" default="complex" private="yes">
	  <block location="cg:variablemap">
	    <variablemap destination="fragmentIn.dynamicAmbientScaled" type="expr">
	      <sexp>(* "dynamic ambient" 0.5)</sexp>
	    </variablemap>
	    <variablemap destination="vertexIn.dynamicAmbientScaled" type="expr">
	      <sexp>(* "dynamic ambient" 0.5)</sexp>
	    </variablemap>
	  </block>
	  
	  <block location="cg:fragmentIn">
	    <uniform type="rgb" name="dynamicAmbientScaled" />
	  </block>
	  
	  <block location="cg:fragmentMain">
	    dynamicAmbientScaled = fragmentIn.dynamicAmbientScaled;
	  </block>
	  
	  <block location="cg:vertexIn">
	    <uniform type="rgb" name="dynamicAmbientScaled" />
	  </block>
	  
	  <block location="cg:vertexMain">
	    dynamicAmbientScaled = vertexIn.dynamicAmbientScaled;
	  </block>
	</input>
	<input name="occlusionFactor" type="float" default="value" defval="1">
	  <attribute name="perfragment" type="bool" defval="false" />
	</input>
	
	<input name="texCoordLM" type="texcoord2" default="complex">
	  <block location="pass">
	    <buffer source="texture coordinate lightmap" 
		    destination="vertexIn.texcoordLM" />
	  </block>
	  
	  <block location="cg:vertexToFragment">
	    <varying type="texcoord2" name="texCoordLM" />
	  </block>
	  
	  <block location="cg:vertexIn">
	    <varying type="texcoord2" name="texcoordLM" />
	  </block>
	  
	  <block location="cg:vertexMain">
	    texCoordLM = vertexIn.texcoordLM;
	  </block>
	</input>
	
	<!-- Surface normal -->
	<input name="normal" type="normal_tangent" default="value" defval="0,0,1">
	  <attribute name="perfragment" type="bool" defval="false" />
	</input>
	
	<input name="litColor" type="rgb" default="complex" private="yes">
	  <block location="pass">
	    <buffer source="static color" destination="vertexIn.litColor" />
	  </block>
	  
	  <block location="cg:vertexIn">
	    <varying type="rgb" name="litColor" />
	  </block>
	  
	  <block location="cg:vertexToFragment">
	    <varying type="rgb" name="litColor" />
	  </block>
	  
	  <block location="cg:vertexMain">
	    litColor = vertexIn.litColor;
	  </block>
	</input>
	<input name="lightmap" type="tex2d" default="complex" private="yes">
	  <block location="pass">
	    <texture name="tex lightmap" destination="fragmentIn.lightmap" />
	  </block>
	  
	  <block location="cg:fragmentIn">
	    <uniform type="tex2d" name="lightmap" />
	  </block>
	  
	  <block location="cg:fragmentMain">
	    lightmap = fragmentIn.lightmap;
	  </block>
	</input>
	<input file="/shader-snippets/lightScale.inp" private="yes" />
		
	<block location="cg:vertexToFragment">
	  <varying type="rgb" name="ambientPerVertex" />
	</block>
	  
	<block location="cg:vertexMain">
	    <?if vars."tex lightmap".texture ?>
	      ambient_attr_perfragment = true;
	    <?elsif vars."static color".buffer?>
	      if (!occlusionFactor_attr_perfragment)
	      {
	        float3 ambient_dynamic = dynamicAmbientScaled * occlusionFactor;
	        float3 ambient_static;
	        ambient_static = (2*lightScale.x) * litColor;
	        ambientPerVertex = (ambient_dynamic*(2*lightScale.x) + ambient_static);
	        ambient_attr_perfragment = false;
	      }
	      else
	        ambient_attr_perfragment = true;
	    <?else?>
	      ambient_attr_perfragment = occlusionFactor_attr_perfragment;
	    <?endif?>
	</block>
	
	<block location="cg:fragmentMain">
	  <?if (vars."pass number".int == 0) && (vars."pass do_ambient") ?>
	    float3 ambient_dynamic = dynamicAmbientScaled * occlusionFactor;
	    float3 ambient_static;
	    <?if vars."tex lightmap".texture ?>
	      ambient_static = (2*lightScale.x) * tex2D (lightmap, texCoordLM).rgb;
	      ambient_attr_perfragment = true;
	    <?elsif vars."static color".buffer?>
	      if (occlusionFactor_attr_perfragment)
	      {
	        ambient_static = (2*lightScale.x) * litColor;
	        ambient_attr_perfragment = occlusionFactor_attr_perfragment;
	      }
	      else
	      {
	        ambient_dynamic = float3 (0);
	        ambient_static = ambientPerVertex;
		ambient_attr_perfragment = false;
	      }
	    <?else?>
	      ambient_dynamic = float3 (0);
	      ambient_static = combinedAmbient * occlusionFactor;
	      ambient_attr_perfragment = occlusionFactor_attr_perfragment;
	    <?endif?>
	    ambient = (ambient_dynamic*(2*lightScale.x) + ambient_static);
	  <?else?>
	  ambient = float3(0);
	  ambient_attr_perfragment = false;
	  <?endif?>
	</block>
	
	<output name="ambient" type="rgb">
	  <attribute name="perfragment" type="bool" />
	</output>
      </technique>
    </snippet>
    
    <snippet id="ambientOcclusion" file="/shader-snippets/lighting/ambient-ao.xml"
	     condition='(vars."pass number".int == 0) &amp;&amp; (vars."pass do_ambient")'/>
	     
    <connection from="ambientOcclusion" to="ambient_static" />
  </technique>
</snippet>
