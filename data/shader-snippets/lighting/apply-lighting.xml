<!--
  Copyright (C) 2007 by Frank Richter
	    (C) 2007 by Jorrit Tyberghein

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Library General Public
  License as published by the Free Software Foundation; either
  version 2 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Library General Public License for more details.

  You should have received a copy of the GNU Library General Public
  License along with this library; if not, write to the Free
  Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-->
<snippet>
  <technique priority="100">
    <combiner name="cg" plugin="crystalspace.graphics3d.shader.combiner.glcg" />
    
    <input name="lightDiffuse" type="rgb" default="value" defval="1">
      <attribute name="perfragment" type="bool" defval="false" />
    </input>
    <input name="lightSpecular" type="rgb" default="value" defval="0">
      <attribute name="perfragment" type="bool" defval="false" />
    </input>
    <input name="surfaceDiffuse" type="rgba" default="value" defval="1">
      <attribute name="perfragment" type="bool" defval="true" />
    </input>
    <input name="surfaceSpecular" type="rgb" default="value" defval="0">
      <attribute name="perfragment" type="bool" defval="false" />
    </input>
    <input name="ambient" type="rgb" default="value" defval="0">
      <attribute name="perfragment" type="bool" defval="false" />
    </input>
    <input file="/shader-snippets/lightScale.inp" private="yes" />
      
    <block location="cg:fragmentMain">
      result = float4 (ambient + lightDiffuse, 1)*surfaceDiffuse + float4 (surfaceSpecular*lightSpecular, 0);
      result.rgb *= lightScale.y;
      result_attr_perfragment = ambient_attr_perfragment
        || surfaceDiffuse_attr_perfragment
	|| lightDiffuse_attr_perfragment
	|| surfaceSpecular_attr_perfragment
	|| lightSpecular_attr_perfragment;
    </block>

    <block location="cg:vertexMain">
      result = float4 (ambient + lightDiffuse, 1)*surfaceDiffuse + float4 (surfaceSpecular*lightSpecular, 0);
      result.rgb *= lightScale.y;
      result_attr_perfragment = ambient_attr_perfragment
	|| surfaceDiffuse_attr_perfragment
	|| lightDiffuse_attr_perfragment
	|| surfaceSpecular_attr_perfragment
	|| lightSpecular_attr_perfragment;
    </block>
    
    <output name="result" type="rgba">
      <attribute name="perfragment" type="bool" />
    </output>
  </technique>
</snippet>
