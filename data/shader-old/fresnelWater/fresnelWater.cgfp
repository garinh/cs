<cgfp>
<program>
<![CDATA[


struct vertex2fragment { 
	float4 Position : POSITION;
	float2 TexCoord : TEXCOORD0;
	float4 EyeVec : TEXCOORD1;
};

// Calculated from 1.3333, which is approx. refraction index for water
// R0 is: 
// float const R0 =  pow(1.0-refractionIndexRatio, 2.0)  
//                 / pow(1.0+refractionIndexRatio, 2.0); 
const float R0 = 0.02040781341208;

// Copied this from some NVidia doc
float fresnel(float3 view, float3 normal) 
{ 
    // light and normal are assumed to be normalized  
    return saturate(R0 + (1.0-R0) * pow(1.0-dot(view, normal), 5.0));
} 

float4 main (vertex2fragment IN, 
  uniform sampler2D TexNormal,
  uniform samplerCUBE TexReflect) : COLOR
{
	/*float3 normEye = IN.EyeVec.xyz;

	float selfOcclusion = saturate(normLight.z*5);
	
	float4 height = 0.04 * tex2D(TexHeight, IN.TexCoord) - 0.02;
	float2 newTexcoord = (height * normEye).xy + IN.TexCoord;
	
	float4 diffuseCol = tex2D(TexDiffuse, newTexcoord);
	float4 bumpNormal = tex2D(TexNormal, newTexcoord);
	bumpNormal *= 2;
	bumpNormal -= 1;
	float3 normBumpNormal = normalize(bumpNormal.xyz);
		
	float bump = dot(normLight, normBumpNormal);
	float4 outCol = saturate(lightcolor*bump.xxxx);

	float4 result = selfOcclusion*saturate(outCol*diffuseCol);

	return result;*/
  
	float3 bumpNormal = tex2D(TexNormal, IN.TexCoord).xyz * 2 - 1;
        bumpNormal.z *= 5;
        bumpNormal = normalize(bumpNormal);
        
        float3 normEye = normalize(IN.EyeVec.xyz);
        float3 reflection = texCUBE(TexReflect, reflect(normEye, bumpNormal).yzx*float3(1, -1, 1)).xyz;
        float fresnelFactor = fresnel(normEye, bumpNormal.xyz);
        return float4(reflection.r, reflection.g, reflection.b, 1) * fresnelFactor;
}

]]>
</program>
</cgfp>
