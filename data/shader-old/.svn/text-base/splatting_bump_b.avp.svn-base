<arbvp>
  <variablemap variable="STANDARD_LIGHT_0_POSITION" destination="register 0"/>
  <variablemap variable="STANDARD_LIGHT_0_DIFFUSE" destination="register 1"/>
  <variablemap variable="STANDARD_LIGHT_0_SPECULAR" destination="register 2"/>
  <variablemap variable="STANDARD_LIGHT_0_ATTENUATION" destination="register 3"/>
  <variablemap variable="texture scale" destination="register 4" />
  <variablemap variable="texture lod distance" destination="register 6"/>
  <program>
  <![CDATA[
    !!ARBvp1.0
    #---------------------------------------------------
    # terrain texture splatting with constant light term
    #---------------------------------------------------
    # Incoming program constants
    PARAM mv[4]                 = { state.matrix.modelview };
    PARAM mvi[4]                = { state.matrix.modelview.inverse };
    PARAM mvp[4]                = { state.matrix.mvp };
    PARAM eyePos                = { 0, 0, 0, 1};
    PARAM lightPos              = program.local[0];
    PARAM lightDiffuse          = program.local[1];
    PARAM lightSpecular         = program.local[2];
    PARAM lightAttenuation      = program.local[3];
    PARAM texscale              = program.local[4];
    PARAM loddist               = program.local[6];

    # Incoming vertex data
    ATTRIB iPos                 = vertex.position;
    ATTRIB iCol0                = vertex.color;
    ATTRIB iNorm                = vertex.normal;
    ATTRIB iTex0                = vertex.texcoord[0];

    # Outgoing data to FP
    # Position transformed to perspective space
    OUTPUT oPos                 = result.position;
    # Light color
    OUTPUT oCol0                = result.color;
    # Light direction in tangent space
    # Diffuse coordinates (scaled by material parameter)
    OUTPUT oTex                 = result.texcoord[0];
    # Splatting alpha map coords (scaled not to tile over terrain)
    OUTPUT oSplat               = result.texcoord[1];

    TEMP scale;

    TEMP objEye;
    TEMP lodblend;

    # transform positon to perspective space
    DP4 oPos.x, mvp[0], iPos;
    DP4 oPos.y, mvp[1], iPos;
    DP4 oPos.z, mvp[2], iPos;
    DP4 oPos.w, mvp[3], iPos;

    RCP scale.x, texscale.x;
    RCP scale.y, texscale.y;
    ADD scale.z, scale.z, -scale.z;
    SGE scale.w, scale.x, scale.x;
    MUL oTex, scale, iTex0;

    # Pass in splatting scaled to not tile
    MOV oSplat, iTex0;

    DP4 objEye.x, mvi[0], eyePos;
    DP4 objEye.y, mvi[1], eyePos;
    DP4 objEye.z, mvi[2], eyePos;
    DP4 objEye.w, mvi[3], eyePos;
          
    ADD objEye, objEye, -iPos;
    DP3 objEye.w, objEye, objEye;
    RSQ objEye.w, objEye.w;
    MUL lodblend, objEye.w, loddist;
    RCP lodblend.x, lodblend.x;
    MIN lodblend.x, lodblend.x, eyePos.w;
    ADD lodblend.x, eyePos.w, -lodblend.x;

    # Pass along diffuse light
    MUL oCol0, lightDiffuse, lodblend.x;

    END
  ]]>
  </program>
</arbvp>
