  <arbvp>
  <variablemap variable="light ambient" destination="register 0"/>
  <variablemap variable="light 0 position" destination="register 1"/>
  <variablemap variable="light 0 diffuse" destination="register 2"/>
  <variablemap variable="light 0 specular" destination="register 3"/>
  <variablemap variable="light 0 attenuation" destination="register 4"/>
  <variablemap variable="beta1 + beta2" destination="register 5" />

  <variablemap variable="texture scale" destination="register 6" />
  <variablemap variable="normal scale" destination="register 7" />
  <variablemap variable="texture lod distance" destination="register 8" />
  <program>
    <![CDATA[
      !!ARBvp1.0
      #---------------------------------------
      # Simple Vertex Lighting Program
      #---------------------------------------
      #Parameter definition
      PARAM mv[4]	     	= { state.matrix.modelview };
      PARAM mvi[4]	 	= { state.matrix.modelview.inverse };
      PARAM mvp[4]	     	= { state.matrix.mvp };
      PARAM lightAmbient 	= program.local[0];
      PARAM lightPos   		= program.local[1];
      PARAM lightDiffuse 	= program.local[2];
      PARAM lightSpecular 	= program.local[3];
      PARAM lightAttenuation 	= program.local[4];
      PARAM eyePos	 	= { 0, 0, 0, 1};
      PARAM down		= { 0, 0, 1, 0};
      PARAM lightIntensity	= { 100, 100, 100, 0 };
      PARAM log_2_e		= { 1.4427, 1.4427, 1.4427, 1.4427 };
      PARAM terrain_reflectance = { 0.0138, 0.0113, 0.008, 0 };

      PARAM cB1plusB2		= program.local[5];
      
      PARAM texscale  		= program.local[6];
      PARAM normalscale		= program.local[7];
      PARAM loddist		= program.local[8];
      # Per vertex inputs
      ATTRIB iPos		= vertex.position;
      ATTRIB iNorm		= vertex.normal;
      ATTRIB iTex0		= vertex.texcoord;
      # Outputs
      OUTPUT oPos		= result.position;
      OUTPUT oCol0		= result.color;
      OUTPUT oLightDir		= result.texcoord[0];
      OUTPUT oNormal		= result.texcoord[1];
      OUTPUT oTex 		= result.texcoord[2];
      OUTPUT oSplat		= result.texcoord[3];
      # Temporaries
      TEMP norm;
      TEMP tang;
      TEMP binorm;
      TEMP objLight;
      TEMP tangLight;
      TEMP objEye;
      TEMP tangEye;
      TEMP scale;
      TEMP lodblend;
      TEMP theta;
      TEMP extinction;
      
      #Transform vertex to viewspace
      DP4 oPos.x, mvp[0], iPos;
      DP4 oPos.y, mvp[1], iPos;
      DP4 oPos.z, mvp[2], iPos;
      DP4 oPos.w, mvp[3], iPos;

      MOV norm, iNorm;
      
      # Compute tangent from normal
      XPD tang, down, norm;
      DP3 tang.w, tang, tang;
      RSQ tang.w, tang.w;
      MUL tang, tang, tang.w;

      # Compute binormal from normal
      XPD binorm, norm, tang;
      DP3 binorm.w, binorm, binorm;
      RSQ binorm.w, binorm.w;
      MUL binorm, binorm, binorm.w;
      
      #Transform light to object space
      DP4 objLight.x, mvi[0], lightPos;
      DP4 objLight.y, mvi[1], lightPos;
      DP4 objLight.z, mvi[2], lightPos;
      DP4 objLight.w, mvi[3], lightPos;

      ADD objLight, objLight, -iPos;

      #Transform light to tangent space
      DP4 tangLight.x, tang, objLight;
      DP4 tangLight.y, binorm, objLight;
      DP4 tangLight.z, norm, objLight;
      SGE tangLight.w, tangLight.x, tangLight.x;

      #calculate vector from vertex to light in object-space
      MOV oLightDir, tangLight;

      # Pass normal map and diffuse map scaled by parameter
      MUL oNormal, normalscale, iTex0;
      MUL oTex, texscale, iTex0;

      MOV oSplat, iTex0;
      
      ###
      # Find distance from eye to vertex (down the Y)
      DP4 objEye.x, mvi[0], eyePos;
      DP4 objEye.y, mvi[1], eyePos;
      DP4 objEye.z, mvi[2], eyePos;
      DP4 objEye.w, mvi[3], eyePos;

      ADD objEye, objEye, -iPos;
      DP3 objEye.w, objEye, objEye;
      RSQ objEye.w, objEye.w;
      MUL lodblend, objEye.w, loddist;
      RCP lodblend.x, lodblend.x;
      MIN lodblend.x, lodblend.x, eyePos.w;
      ADD lodblend.x, eyePos.w, -lodblend.x;
      RCP theta.z, objEye.w;

      ###
      # Find extinction term
      # extinction = -(beta_1+beta_2) * s
      MUL extinction, cB1plusB2, -theta.z;
      ###
      # extinction = -(beta_1+beta_2) * s * log_2(e)
      MUL extinction, extinction, log_2_e;
      ###
      # extinction = e^(-(beta1 + beta2) * s)
      EX2 extinction.x, extinction.x;
      EX2 extinction.y, extinction.y;
      EX2 extinction.z, extinction.z;

      ###
      # Apply reflectance to E to get the net effective E
      # MUL extinction, extinction, materialReflection;
      MUL extinction, extinction, terrain_reflectance;

      ###
      # Apply light color and intensity
      MUL extinction, extinction, lightDiffuse;
      MUL extinction, extinction, lightIntensity;
      #MUL extinction, extinction, lightDiffuse.w;
      #ADD extinction, extinction, lightAmbient;

      # Pass along diffuse light modulated with extinction
      MUL oCol0, extinction, lodblend.x;
      # If the light is behind the terrain it shouldn't color
      MAX oCol0.w, tangLight.z, eyePos.x;
      
      END
    ]]>
  </program>
</arbvp>
