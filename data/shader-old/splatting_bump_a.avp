<arbvp>
  <variablemap variable="light position[0]" destination="register 0"/>
  <variablemap variable="light diffuse[0]" destination="register 1"/>
  <variablemap variable="light specular[0]" destination="register 2"/>
  <variablemap variable="light attenuation[0]" destination="register 3"/>
  <variablemap variable="texture scale" destination="register 4" />
  <variablemap variable="texture lod distance" destination="register 6"/>
  <program>
  <![CDATA[
    !!ARBvp1.0
    #---------------------------------------------------
    # terrain texture splatting with constant light term
    #---------------------------------------------------
    # Incoming program constants
    PARAM mv[4]	                = { state.matrix.modelview };
    PARAM mvi[4]                = { state.matrix.modelview.inverse };
    PARAM mvp[4]                = { state.matrix.mvp };
    PARAM eyePos                = { 0, 0, 0, 1};
    PARAM lightPos              = program.local[0];
    PARAM lightDiffuse          = program.local[1];
    PARAM lightSpecular         = program.local[2];
    PARAM lightAttenuation      = program.local[3];
    PARAM texscale              = program.local[4];
    PARAM loddist               = program.local[6];

    # Incoming vertex data
    ATTRIB iPos                 = vertex.position;
    ATTRIB iCol0                = vertex.color;
    ATTRIB iNorm                = vertex.normal;
    ATTRIB iTex0                = vertex.texcoord[0];
    ATTRIB iTan                 = vertex.texcoord[1];
    ATTRIB iBinorm              = vertex.texcoord[2];

    # Outgoing data to FP
    # Position transformed to perspective space
    OUTPUT oPos                 = result.position;
    # Light color
    OUTPUT oCol0                = result.color;
    # Light direction in tangent space
    OUTPUT oLightDir            = result.texcoord[0];
    # Normal map coordinates (scaled like diffuse coords)
    OUTPUT oNormal              = result.texcoord[1];

    # Placeholder for light relative to vertex
    TEMP objLight;
    # placeholder for light in tangent space
    TEMP tangLight;
    # Placeholder for reciprocal scale on material scaling
    TEMP scale;

    # transform positon to perspective space
    DP4 oPos.x, mvp[0], iPos;
    DP4 oPos.y, mvp[1], iPos;
    DP4 oPos.z, mvp[2], iPos;
    DP4 oPos.w, mvp[3], iPos;

    # Transform light relative to object
    DP4 objLight.x, mvi[0], lightPos;
    DP4 objLight.y, mvi[1], lightPos;
    DP4 objLight.z, mvi[2], lightPos;
    DP4 objLight.w, mvi[3], lightPos;
     
    # Light dir relative to vertex
    ADD objLight, objLight, -iPos;

    # Transform to tangent space
    DP4 tangLight.x, iTan, objLight;
    DP4 tangLight.y, iBinorm, objLight;
    DP4 tangLight.z, iNorm, objLight;
    SGE tangLight.w, tangLight.x, tangLight.x;

    # Pass tangent light to FP
    MOV oLightDir, tangLight;

    RCP scale.x, texscale.x;
    RCP scale.y, texscale.y;
    ADD scale.z, scale.z, -scale.z;
    SGE scale.w, scale.x, scale.x;
    # Pass normal map and diffuse map scaled by parameter
    MUL oNormal, scale, iTex0;

    END
  ]]>
  </program>
</arbvp>
