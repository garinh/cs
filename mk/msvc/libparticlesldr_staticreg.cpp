// This file is automatically generated.
#include "cssysdef.h"
#include "csutil/scf.h"

// Put static linking stuff into own section.
// The idea is that this allows the section to be swapped out but not
// swapped in again b/c something else in it was needed.
#if !defined(CS_DEBUG) && defined(CS_COMPILER_MSVC)
#pragma const_seg(".CSmetai")
#pragma comment(linker, "/section:.CSmetai,r")
#pragma code_seg(".CSmeta")
#pragma comment(linker, "/section:.CSmeta,er")
#pragma comment(linker, "/merge:.CSmetai=.CSmeta")
#endif

namespace csStaticPluginInit
{
static char const metainfo_particlesldr[] =
"<?xml version=\"1.0\"?>"
"<!-- particlesldr.csplugin -->"
"<plugin>"
"  <scf>"
"    <classes>"
"      <class>"
"        <name>crystalspace.mesh.loader.factory.particles</name>"
"        <implementation>ParticlesFactoryLoader</implementation>"
"        <description>Crystal Space Particles Factory Loader</description>"
"      </class>"
"      <class>"
"        <name>crystalspace.mesh.loader.particles</name>"
"        <implementation>ParticlesObjectLoader</implementation>"
"        <description>Crystal Space Particles Mesh Loader</description>"
"      </class>"
"      <class>"
"        <name>crystalspace.mesh.saver.factory.particles</name>"
"        <implementation>ParticlesFactorySaver</implementation>"
"        <description>Crystal Space Particles Factory Saver</description>"
"      </class>"
"      <class>"
"        <name>crystalspace.mesh.saver.particles</name>"
"        <implementation>ParticlesObjectSaver</implementation>"
"        <description>Crystal Space Particles Mesh Saver</description>"
"      </class>"
"    </classes>"
"  </scf>"
"</plugin>"
;
  #ifndef ParticlesFactoryLoader_FACTORY_REGISTER_DEFINED 
  #define ParticlesFactoryLoader_FACTORY_REGISTER_DEFINED 
    SCF_DEFINE_FACTORY_FUNC_REGISTRATION(ParticlesFactoryLoader) 
  #endif
  #ifndef ParticlesObjectLoader_FACTORY_REGISTER_DEFINED 
  #define ParticlesObjectLoader_FACTORY_REGISTER_DEFINED 
    SCF_DEFINE_FACTORY_FUNC_REGISTRATION(ParticlesObjectLoader) 
  #endif
  #ifndef ParticlesFactorySaver_FACTORY_REGISTER_DEFINED 
  #define ParticlesFactorySaver_FACTORY_REGISTER_DEFINED 
    SCF_DEFINE_FACTORY_FUNC_REGISTRATION(ParticlesFactorySaver) 
  #endif
  #ifndef ParticlesObjectSaver_FACTORY_REGISTER_DEFINED 
  #define ParticlesObjectSaver_FACTORY_REGISTER_DEFINED 
    SCF_DEFINE_FACTORY_FUNC_REGISTRATION(ParticlesObjectSaver) 
  #endif

class particlesldr
{
SCF_REGISTER_STATIC_LIBRARY(particlesldr,metainfo_particlesldr)
  #ifndef ParticlesFactoryLoader_FACTORY_REGISTERED 
  #define ParticlesFactoryLoader_FACTORY_REGISTERED 
    ParticlesFactoryLoader_StaticInit ParticlesFactoryLoader_static_init__; 
  #endif
  #ifndef ParticlesObjectLoader_FACTORY_REGISTERED 
  #define ParticlesObjectLoader_FACTORY_REGISTERED 
    ParticlesObjectLoader_StaticInit ParticlesObjectLoader_static_init__; 
  #endif
  #ifndef ParticlesFactorySaver_FACTORY_REGISTERED 
  #define ParticlesFactorySaver_FACTORY_REGISTERED 
    ParticlesFactorySaver_StaticInit ParticlesFactorySaver_static_init__; 
  #endif
  #ifndef ParticlesObjectSaver_FACTORY_REGISTERED 
  #define ParticlesObjectSaver_FACTORY_REGISTERED 
    ParticlesObjectSaver_StaticInit ParticlesObjectSaver_static_init__; 
  #endif
public:
 particlesldr();
};
particlesldr::particlesldr() {}

}
