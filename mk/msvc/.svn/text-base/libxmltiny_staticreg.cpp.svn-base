// This file is automatically generated.
#include "cssysdef.h"
#include "csutil/scf.h"

// Put static linking stuff into own section.
// The idea is that this allows the section to be swapped out but not
// swapped in again b/c something else in it was needed.
#if !defined(CS_DEBUG) && defined(CS_COMPILER_MSVC)
#pragma const_seg(".CSmetai")
#pragma comment(linker, "/section:.CSmetai,r")
#pragma code_seg(".CSmeta")
#pragma comment(linker, "/section:.CSmeta,er")
#pragma comment(linker, "/merge:.CSmetai=.CSmeta")
#endif

namespace csStaticPluginInit
{
static char const metainfo_xmltiny[] =
"<?xml version=\"1.0\"?>"
"<!-- xmltiny.csplugin -->"
"<plugin>"
"  <scf>"
"    <classes>"
"      <class>"
"        <name>crystalspace.documentsystem.tinyxml</name>"
"        <implementation>csTinyXMLPlugin</implementation>"
"        <description>Crystal Space TinyXML document system</description>"
"      </class>"
"    </classes>"
"  </scf>"
"</plugin>"
;
  #ifndef csTinyXMLPlugin_FACTORY_REGISTER_DEFINED 
  #define csTinyXMLPlugin_FACTORY_REGISTER_DEFINED 
    SCF_DEFINE_FACTORY_FUNC_REGISTRATION(csTinyXMLPlugin) 
  #endif

class xmltiny
{
SCF_REGISTER_STATIC_LIBRARY(xmltiny,metainfo_xmltiny)
  #ifndef csTinyXMLPlugin_FACTORY_REGISTERED 
  #define csTinyXMLPlugin_FACTORY_REGISTERED 
    csTinyXMLPlugin_StaticInit csTinyXMLPlugin_static_init__; 
  #endif
public:
 xmltiny();
};
xmltiny::xmltiny() {}

}
